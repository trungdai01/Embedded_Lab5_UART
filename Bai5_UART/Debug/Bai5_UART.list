
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032a8  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c344  0800c344  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c34c  0800c34c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800c354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000003a4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001995e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ec9  00000000  00000000  00039a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001430  00000000  00000000  0003eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025944  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1bf  00000000  00000000  00065c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3740  00000000  00000000  00084e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015854b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005de0  00000000  00000000  0015859c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009084 	.word	0x08009084

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009084 	.word	0x08009084

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <button_init+0x14>)
 800058e:	f004 f80b 	bl	80045a8 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <button_Scan>:

void button_Scan(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	482f      	ldr	r0, [pc, #188]	; (8000664 <button_Scan+0xc8>)
 80005a8:	f003 fffe 	bl	80045a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	482c      	ldr	r0, [pc, #176]	; (8000664 <button_Scan+0xc8>)
 80005b2:	f003 fff9 	bl	80045a8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005b6:	230a      	movs	r3, #10
 80005b8:	2202      	movs	r2, #2
 80005ba:	492b      	ldr	r1, [pc, #172]	; (8000668 <button_Scan+0xcc>)
 80005bc:	482b      	ldr	r0, [pc, #172]	; (800066c <button_Scan+0xd0>)
 80005be:	f005 fe44 	bl	800624a <HAL_SPI_Receive>
	  int button_index = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	e03f      	b.n	8000652 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	db06      	blt.n	80005e6 <button_Scan+0x4a>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	dc03      	bgt.n	80005e6 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3304      	adds	r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e018      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	dd07      	ble.n	80005fc <button_Scan+0x60>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	dc04      	bgt.n	80005fc <button_Scan+0x60>
			  button_index = 7 - i;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f1c3 0307 	rsb	r3, r3, #7
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e00d      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	dd06      	ble.n	8000610 <button_Scan+0x74>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0b      	cmp	r3, #11
 8000606:	dc03      	bgt.n	8000610 <button_Scan+0x74>
			  button_index = i + 4;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e003      	b.n	8000618 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f1c3 0317 	rsb	r3, r3, #23
 8000616:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <button_Scan+0xcc>)
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	897b      	ldrh	r3, [r7, #10]
 800061e:	4013      	ands	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <button_Scan+0x96>
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2100      	movs	r1, #0
 800062c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000630:	e009      	b.n	8000646 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063a:	3301      	adds	r3, #1
 800063c:	b299      	uxth	r1, r3
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <button_Scan+0xd4>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	ddbc      	ble.n	80005d2 <button_Scan+0x36>
	  }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020c00 	.word	0x40020c00
 8000668:	200000b8 	.word	0x200000b8
 800066c:	20000258 	.word	0x20000258
 8000670:	20000098 	.word	0x20000098

08000674 <ds3231_Write>:
			;
	};
}

void ds3231_Write(uint8_t address, uint8_t value)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af04      	add	r7, sp, #16
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fb6a 	bl	8003d60 <DEC2BCD>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	b29a      	uxth	r2, r3
 8000694:	230a      	movs	r3, #10
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	2301      	movs	r3, #1
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	f107 030f 	add.w	r3, r7, #15
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	21d0      	movs	r1, #208	; 0xd0
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <ds3231_Write+0x40>)
 80006a8:	f004 f8f6 	bl	8004898 <HAL_I2C_Mem_Write>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200001f0 	.word	0x200001f0

080006b8 <ds3231_ReadTime>:

void ds3231_ReadTime()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80006be:	230a      	movs	r3, #10
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2307      	movs	r3, #7
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <ds3231_ReadTime+0xa4>)
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	2200      	movs	r2, #0
 80006ce:	21d0      	movs	r1, #208	; 0xd0
 80006d0:	4823      	ldr	r0, [pc, #140]	; (8000760 <ds3231_ReadTime+0xa8>)
 80006d2:	f004 f9db 	bl	8004a8c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <ds3231_ReadTime+0xa4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fb26 	bl	8003d2c <BCD2DEC>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <ds3231_ReadTime+0xac>)
 80006e6:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <ds3231_ReadTime+0xa4>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fb1d 	bl	8003d2c <BCD2DEC>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <ds3231_ReadTime+0xb0>)
 80006f8:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <ds3231_ReadTime+0xa4>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fb14 	bl	8003d2c <BCD2DEC>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <ds3231_ReadTime+0xb4>)
 800070a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <ds3231_ReadTime+0xa4>)
 800070e:	78db      	ldrb	r3, [r3, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fb0b 	bl	8003d2c <BCD2DEC>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <ds3231_ReadTime+0xb8>)
 800071c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <ds3231_ReadTime+0xa4>)
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fb02 	bl	8003d2c <BCD2DEC>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <ds3231_ReadTime+0xbc>)
 800072e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <ds3231_ReadTime+0xa4>)
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	4618      	mov	r0, r3
 8000736:	f003 faf9 	bl	8003d2c <BCD2DEC>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <ds3231_ReadTime+0xc0>)
 8000740:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <ds3231_ReadTime+0xa4>)
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f003 faf0 	bl	8003d2c <BCD2DEC>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <ds3231_ReadTime+0xc4>)
 8000752:	701a      	strb	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000bc 	.word	0x200000bc
 8000760:	200001f0 	.word	0x200001f0
 8000764:	200000c8 	.word	0x200000c8
 8000768:	200000c7 	.word	0x200000c7
 800076c:	200000c6 	.word	0x200000c6
 8000770:	200000ca 	.word	0x200000ca
 8000774:	200000c9 	.word	0x200000c9
 8000778:	200000cb 	.word	0x200000cb
 800077c:	200000cc 	.word	0x200000cc

08000780 <ds3231_ReadAlarm>:

void ds3231_ReadAlarm(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x08, I2C_MEMADD_SIZE_8BIT, ds3231_alarm_buf, 2, 10);
 8000786:	230a      	movs	r3, #10
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	2302      	movs	r3, #2
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2208      	movs	r2, #8
 8000796:	21d0      	movs	r1, #208	; 0xd0
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <ds3231_ReadAlarm+0x4c>)
 800079a:	f004 f977 	bl	8004a8c <HAL_I2C_Mem_Read>
	// ds3231_alarm_sec = BCD2DEC(ds3231_alarm_buf[0]);
	ds3231_alarm_min = BCD2DEC(ds3231_alarm_buf[0]);
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fac2 	bl	8003d2c <BCD2DEC>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <ds3231_ReadAlarm+0x50>)
 80007ae:	701a      	strb	r2, [r3, #0]
	ds3231_alarm_hour = BCD2DEC(ds3231_alarm_buf[1]);
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fab9 	bl	8003d2c <BCD2DEC>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <ds3231_ReadAlarm+0x54>)
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000c4 	.word	0x200000c4
 80007cc:	200001f0 	.word	0x200001f0
 80007d0:	200000ce 	.word	0x200000ce
 80007d4:	200000cd 	.word	0x200000cd

080007d8 <fsm_alarm>:
 *      Author: quoct
 */
#include "fsm_alarm.h"

void fsm_alarm(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af04      	add	r7, sp, #16
    if (mode_alarm == ALARM_MODE1)
 80007de:	4b82      	ldr	r3, [pc, #520]	; (80009e8 <fsm_alarm+0x210>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b0a      	cmp	r3, #10
 80007e4:	d12a      	bne.n	800083c <fsm_alarm+0x64>
    {
        switch (statusNORMAL_ALARM)
 80007e6:	4b81      	ldr	r3, [pc, #516]	; (80009ec <fsm_alarm+0x214>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <fsm_alarm+0x1c>
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d004      	beq.n	80007fc <fsm_alarm+0x24>
            displayAlarm();
            if (ds3231_alarm_hour == ds3231_hours && ds3231_alarm_min == ds3231_min)
                alert();
            break;
        default:
            break;
 80007f2:	e026      	b.n	8000842 <fsm_alarm+0x6a>
            statusNORMAL_ALARM = NORMAL;
 80007f4:	4b7d      	ldr	r3, [pc, #500]	; (80009ec <fsm_alarm+0x214>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
            break;
 80007fa:	e022      	b.n	8000842 <fsm_alarm+0x6a>
            lcd_StrCenter(0, 180, "ALARM(HH:MM)", BLUE, WHITE, 16, 1);
 80007fc:	2301      	movs	r3, #1
 80007fe:	9302      	str	r3, [sp, #8]
 8000800:	2310      	movs	r3, #16
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	231f      	movs	r3, #31
 800080c:	4a78      	ldr	r2, [pc, #480]	; (80009f0 <fsm_alarm+0x218>)
 800080e:	21b4      	movs	r1, #180	; 0xb4
 8000810:	2000      	movs	r0, #0
 8000812:	f002 fcff 	bl	8003214 <lcd_StrCenter>
            ds3231_ReadAlarm();
 8000816:	f7ff ffb3 	bl	8000780 <ds3231_ReadAlarm>
            displayAlarm();
 800081a:	f001 fe09 	bl	8002430 <displayAlarm>
            if (ds3231_alarm_hour == ds3231_hours && ds3231_alarm_min == ds3231_min)
 800081e:	4b75      	ldr	r3, [pc, #468]	; (80009f4 <fsm_alarm+0x21c>)
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b75      	ldr	r3, [pc, #468]	; (80009f8 <fsm_alarm+0x220>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	429a      	cmp	r2, r3
 8000828:	d10a      	bne.n	8000840 <fsm_alarm+0x68>
 800082a:	4b74      	ldr	r3, [pc, #464]	; (80009fc <fsm_alarm+0x224>)
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4b74      	ldr	r3, [pc, #464]	; (8000a00 <fsm_alarm+0x228>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d104      	bne.n	8000840 <fsm_alarm+0x68>
                alert();
 8000836:	f001 fe2d 	bl	8002494 <alert>
            break;
 800083a:	e001      	b.n	8000840 <fsm_alarm+0x68>
        }
    }
 800083c:	bf00      	nop
 800083e:	e000      	b.n	8000842 <fsm_alarm+0x6a>
            break;
 8000840:	bf00      	nop
    if (mode_alarm == ALARM_MODE2)
 8000842:	4b69      	ldr	r3, [pc, #420]	; (80009e8 <fsm_alarm+0x210>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b0b      	cmp	r3, #11
 8000848:	f040 8094 	bne.w	8000974 <fsm_alarm+0x19c>
    {
        switch (statusHOUR_ALARM_1)
 800084c:	4b6d      	ldr	r3, [pc, #436]	; (8000a04 <fsm_alarm+0x22c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <fsm_alarm+0x82>
 8000854:	2b01      	cmp	r3, #1
 8000856:	d004      	beq.n	8000862 <fsm_alarm+0x8a>
                isSendStr = 1;
            }
            blinkyAlarm(HOUR_A);
            break;
        default:
            break;
 8000858:	e02b      	b.n	80008b2 <fsm_alarm+0xda>
            statusHOUR_ALARM_1 = NORMAL;
 800085a:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <fsm_alarm+0x22c>)
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
            break;
 8000860:	e027      	b.n	80008b2 <fsm_alarm+0xda>
            lcd_StrCenter(0, 2, "UPDATING HOUR ALARM...", GREEN, BLACK, 16, 1);
 8000862:	2301      	movs	r3, #1
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2310      	movs	r3, #16
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000872:	4a65      	ldr	r2, [pc, #404]	; (8000a08 <fsm_alarm+0x230>)
 8000874:	2102      	movs	r1, #2
 8000876:	2000      	movs	r0, #0
 8000878:	f002 fccc 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE ALARM", YELLOW, BLACK, 16, 1);
 800087c:	2301      	movs	r3, #1
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	2310      	movs	r3, #16
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	2300      	movs	r3, #0
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800088c:	4a5f      	ldr	r2, [pc, #380]	; (8000a0c <fsm_alarm+0x234>)
 800088e:	2114      	movs	r1, #20
 8000890:	2000      	movs	r0, #0
 8000892:	f002 fcbf 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 8000896:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <fsm_alarm+0x238>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d105      	bne.n	80008aa <fsm_alarm+0xd2>
                uart_Rs232SendString("Request hours of alarm: ");
 800089e:	485d      	ldr	r0, [pc, #372]	; (8000a14 <fsm_alarm+0x23c>)
 80008a0:	f003 f872 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 80008a4:	4b5a      	ldr	r3, [pc, #360]	; (8000a10 <fsm_alarm+0x238>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
            blinkyAlarm(HOUR_A);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f001 fca4 	bl	80021f8 <blinkyAlarm>
            break;
 80008b0:	bf00      	nop
        }
        switch (statusHOUR_ALARM_2)
 80008b2:	4b59      	ldr	r3, [pc, #356]	; (8000a18 <fsm_alarm+0x240>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <fsm_alarm+0xe8>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d004      	beq.n	80008c8 <fsm_alarm+0xf0>
                uart_input = 0;
                auto_change_mode = 1;
            }
            break;
        default:
            break;
 80008be:	e043      	b.n	8000948 <fsm_alarm+0x170>
            statusHOUR_ALARM_2 = NORMAL;
 80008c0:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <fsm_alarm+0x240>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
            break;
 80008c6:	e03f      	b.n	8000948 <fsm_alarm+0x170>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80008c8:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <fsm_alarm+0x244>)
 80008ca:	88db      	ldrh	r3, [r3, #6]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d00a      	beq.n	80008e6 <fsm_alarm+0x10e>
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <fsm_alarm+0x244>)
 80008d2:	88db      	ldrh	r3, [r3, #6]
 80008d4:	2b28      	cmp	r3, #40	; 0x28
 80008d6:	d913      	bls.n	8000900 <fsm_alarm+0x128>
 80008d8:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <fsm_alarm+0x244>)
 80008da:	88db      	ldrh	r3, [r3, #6]
 80008dc:	f003 0303 	and.w	r3, r3, #3
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10c      	bne.n	8000900 <fsm_alarm+0x128>
                counterHour_Alarm++;
 80008e6:	4b4e      	ldr	r3, [pc, #312]	; (8000a20 <fsm_alarm+0x248>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <fsm_alarm+0x248>)
 80008f0:	701a      	strb	r2, [r3, #0]
                if (counterHour_Alarm >= 24)
 80008f2:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <fsm_alarm+0x248>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b17      	cmp	r3, #23
 80008f8:	d902      	bls.n	8000900 <fsm_alarm+0x128>
                    counterHour_Alarm = 0;
 80008fa:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <fsm_alarm+0x248>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 8000900:	4b48      	ldr	r3, [pc, #288]	; (8000a24 <fsm_alarm+0x24c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d11e      	bne.n	8000946 <fsm_alarm+0x16e>
                counterHour_Alarm = atoi(tempUart);
 8000908:	4847      	ldr	r0, [pc, #284]	; (8000a28 <fsm_alarm+0x250>)
 800090a:	f007 fe8b 	bl	8008624 <atoi>
 800090e:	4603      	mov	r3, r0
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <fsm_alarm+0x248>)
 8000914:	701a      	strb	r2, [r3, #0]
                if (counterHour_Alarm >= 24)
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <fsm_alarm+0x248>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b17      	cmp	r3, #23
 800091c:	d90d      	bls.n	800093a <fsm_alarm+0x162>
                    counterHour_Alarm = counterHour_Alarm % 24;
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <fsm_alarm+0x248>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <fsm_alarm+0x254>)
 8000924:	fba3 1302 	umull	r1, r3, r3, r2
 8000928:	0919      	lsrs	r1, r3, #4
 800092a:	460b      	mov	r3, r1
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	440b      	add	r3, r1
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <fsm_alarm+0x248>)
 8000938:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <fsm_alarm+0x24c>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000940:	4b3b      	ldr	r3, [pc, #236]	; (8000a30 <fsm_alarm+0x258>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
            break;
 8000946:	bf00      	nop
        }
        switch (statusHOUR_ALARM_3)
 8000948:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <fsm_alarm+0x25c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <fsm_alarm+0x17e>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d004      	beq.n	800095e <fsm_alarm+0x186>
            {
                ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
            }
            break;
        default:
            break;
 8000954:	e011      	b.n	800097a <fsm_alarm+0x1a2>
            statusHOUR_ALARM_3 = NORMAL;
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <fsm_alarm+0x25c>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
            break;
 800095c:	e00d      	b.n	800097a <fsm_alarm+0x1a2>
            if (button_count[12] == 1)
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <fsm_alarm+0x244>)
 8000960:	8b1b      	ldrh	r3, [r3, #24]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d108      	bne.n	8000978 <fsm_alarm+0x1a0>
                ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <fsm_alarm+0x248>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	2009      	movs	r0, #9
 800096e:	f7ff fe81 	bl	8000674 <ds3231_Write>
            break;
 8000972:	e001      	b.n	8000978 <fsm_alarm+0x1a0>
        }
    }
 8000974:	bf00      	nop
 8000976:	e000      	b.n	800097a <fsm_alarm+0x1a2>
            break;
 8000978:	bf00      	nop
    if (mode_alarm == ALARM_MODE3)
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <fsm_alarm+0x210>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b0c      	cmp	r3, #12
 8000980:	f040 80b8 	bne.w	8000af4 <fsm_alarm+0x31c>
    {
        switch (statusMIN_ALARM_1)
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <fsm_alarm+0x260>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <fsm_alarm+0x1ba>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d004      	beq.n	800099a <fsm_alarm+0x1c2>
                isSendStr = 1;
            }
            blinkyAlarm(MIN_A);
            break;
        default:
            break;
 8000990:	e01e      	b.n	80009d0 <fsm_alarm+0x1f8>
            statusMIN_ALARM_1 = NORMAL;
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <fsm_alarm+0x260>)
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
            break;
 8000998:	e01a      	b.n	80009d0 <fsm_alarm+0x1f8>
            lcd_StrCenter(0, 2, "UPDATING MINS ALARM...", GREEN, BLACK, 16, 1);
 800099a:	2301      	movs	r3, #1
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2310      	movs	r3, #16
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	2300      	movs	r3, #0
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <fsm_alarm+0x264>)
 80009ac:	2102      	movs	r1, #2
 80009ae:	2000      	movs	r0, #0
 80009b0:	f002 fc30 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <fsm_alarm+0x238>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d105      	bne.n	80009c8 <fsm_alarm+0x1f0>
                uart_Rs232SendString("Request mins of alarm: ");
 80009bc:	4820      	ldr	r0, [pc, #128]	; (8000a40 <fsm_alarm+0x268>)
 80009be:	f002 ffe3 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <fsm_alarm+0x238>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
            blinkyAlarm(MIN_A);
 80009c8:	200b      	movs	r0, #11
 80009ca:	f001 fc15 	bl	80021f8 <blinkyAlarm>
            break;
 80009ce:	bf00      	nop
        }
        switch (statusMIN_ALARM_2)
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <fsm_alarm+0x26c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <fsm_alarm+0x206>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d035      	beq.n	8000a48 <fsm_alarm+0x270>
                uart_input = 0;
                auto_change_mode = 1;
            }
            break;
        default:
            break;
 80009dc:	e074      	b.n	8000ac8 <fsm_alarm+0x2f0>
            statusMIN_ALARM_2 = NORMAL;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <fsm_alarm+0x26c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
            break;
 80009e4:	e070      	b.n	8000ac8 <fsm_alarm+0x2f0>
 80009e6:	bf00      	nop
 80009e8:	200001a0 	.word	0x200001a0
 80009ec:	20000180 	.word	0x20000180
 80009f0:	0800909c 	.word	0x0800909c
 80009f4:	200000cd 	.word	0x200000cd
 80009f8:	200000c6 	.word	0x200000c6
 80009fc:	200000ce 	.word	0x200000ce
 8000a00:	200000c7 	.word	0x200000c7
 8000a04:	20000184 	.word	0x20000184
 8000a08:	080090ac 	.word	0x080090ac
 8000a0c:	080090c4 	.word	0x080090c4
 8000a10:	200001b4 	.word	0x200001b4
 8000a14:	080090d0 	.word	0x080090d0
 8000a18:	20000188 	.word	0x20000188
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	200001ab 	.word	0x200001ab
 8000a24:	200001b8 	.word	0x200001b8
 8000a28:	200001d0 	.word	0x200001d0
 8000a2c:	aaaaaaab 	.word	0xaaaaaaab
 8000a30:	200001bc 	.word	0x200001bc
 8000a34:	2000018c 	.word	0x2000018c
 8000a38:	20000190 	.word	0x20000190
 8000a3c:	080090ec 	.word	0x080090ec
 8000a40:	08009104 	.word	0x08009104
 8000a44:	20000194 	.word	0x20000194
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000a48:	4b71      	ldr	r3, [pc, #452]	; (8000c10 <fsm_alarm+0x438>)
 8000a4a:	88db      	ldrh	r3, [r3, #6]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d00a      	beq.n	8000a66 <fsm_alarm+0x28e>
 8000a50:	4b6f      	ldr	r3, [pc, #444]	; (8000c10 <fsm_alarm+0x438>)
 8000a52:	88db      	ldrh	r3, [r3, #6]
 8000a54:	2b28      	cmp	r3, #40	; 0x28
 8000a56:	d913      	bls.n	8000a80 <fsm_alarm+0x2a8>
 8000a58:	4b6d      	ldr	r3, [pc, #436]	; (8000c10 <fsm_alarm+0x438>)
 8000a5a:	88db      	ldrh	r3, [r3, #6]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10c      	bne.n	8000a80 <fsm_alarm+0x2a8>
                counterMin_Alarm++;
 8000a66:	4b6b      	ldr	r3, [pc, #428]	; (8000c14 <fsm_alarm+0x43c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b69      	ldr	r3, [pc, #420]	; (8000c14 <fsm_alarm+0x43c>)
 8000a70:	701a      	strb	r2, [r3, #0]
                if (counterMin_Alarm >= 60)
 8000a72:	4b68      	ldr	r3, [pc, #416]	; (8000c14 <fsm_alarm+0x43c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b3b      	cmp	r3, #59	; 0x3b
 8000a78:	d902      	bls.n	8000a80 <fsm_alarm+0x2a8>
                    counterMin_Alarm = 0;
 8000a7a:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <fsm_alarm+0x43c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 8000a80:	4b65      	ldr	r3, [pc, #404]	; (8000c18 <fsm_alarm+0x440>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d11e      	bne.n	8000ac6 <fsm_alarm+0x2ee>
                counterMin_Alarm = atoi(tempUart);
 8000a88:	4864      	ldr	r0, [pc, #400]	; (8000c1c <fsm_alarm+0x444>)
 8000a8a:	f007 fdcb 	bl	8008624 <atoi>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b60      	ldr	r3, [pc, #384]	; (8000c14 <fsm_alarm+0x43c>)
 8000a94:	701a      	strb	r2, [r3, #0]
                if (counterMin_Alarm >= 60)
 8000a96:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <fsm_alarm+0x43c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b3b      	cmp	r3, #59	; 0x3b
 8000a9c:	d90d      	bls.n	8000aba <fsm_alarm+0x2e2>
                    counterMin_Alarm = counterMin_Alarm % 60;
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <fsm_alarm+0x43c>)
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b5f      	ldr	r3, [pc, #380]	; (8000c20 <fsm_alarm+0x448>)
 8000aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa8:	0959      	lsrs	r1, r3, #5
 8000aaa:	460b      	mov	r3, r1
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	1a5b      	subs	r3, r3, r1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <fsm_alarm+0x43c>)
 8000ab8:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 8000aba:	4b57      	ldr	r3, [pc, #348]	; (8000c18 <fsm_alarm+0x440>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000ac0:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <fsm_alarm+0x44c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
            break;
 8000ac6:	bf00      	nop
        }
        switch (statusMIN_ALARM_3)
 8000ac8:	4b57      	ldr	r3, [pc, #348]	; (8000c28 <fsm_alarm+0x450>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <fsm_alarm+0x2fe>
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d004      	beq.n	8000ade <fsm_alarm+0x306>
            {
                ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
            }
            break;
        default:
            break;
 8000ad4:	e011      	b.n	8000afa <fsm_alarm+0x322>
            statusMIN_ALARM_3 = NORMAL;
 8000ad6:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <fsm_alarm+0x450>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
            break;
 8000adc:	e00d      	b.n	8000afa <fsm_alarm+0x322>
            if (button_count[12] == 1)
 8000ade:	4b4c      	ldr	r3, [pc, #304]	; (8000c10 <fsm_alarm+0x438>)
 8000ae0:	8b1b      	ldrh	r3, [r3, #24]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d108      	bne.n	8000af8 <fsm_alarm+0x320>
                ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <fsm_alarm+0x43c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2008      	movs	r0, #8
 8000aee:	f7ff fdc1 	bl	8000674 <ds3231_Write>
            break;
 8000af2:	e001      	b.n	8000af8 <fsm_alarm+0x320>
        }
    }
 8000af4:	bf00      	nop
 8000af6:	e000      	b.n	8000afa <fsm_alarm+0x322>
            break;
 8000af8:	bf00      	nop

    switch (mode_alarm)
 8000afa:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <fsm_alarm+0x454>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b0c      	cmp	r3, #12
 8000b00:	d046      	beq.n	8000b90 <fsm_alarm+0x3b8>
 8000b02:	2b0c      	cmp	r3, #12
 8000b04:	dc79      	bgt.n	8000bfa <fsm_alarm+0x422>
 8000b06:	2b0a      	cmp	r3, #10
 8000b08:	d002      	beq.n	8000b10 <fsm_alarm+0x338>
 8000b0a:	2b0b      	cmp	r3, #11
 8000b0c:	d015      	beq.n	8000b3a <fsm_alarm+0x362>
            uart_Rs232SendString("\n");
            save_AlarmSettings();
        }
        break;
    default:
        break;
 8000b0e:	e074      	b.n	8000bfa <fsm_alarm+0x422>
        if (button_count[4] == 1)
 8000b10:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <fsm_alarm+0x438>)
 8000b12:	891b      	ldrh	r3, [r3, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d172      	bne.n	8000bfe <fsm_alarm+0x426>
            mode_alarm = ALARM_MODE2;
 8000b18:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <fsm_alarm+0x454>)
 8000b1a:	220b      	movs	r2, #11
 8000b1c:	601a      	str	r2, [r3, #0]
            init_counter_alarm();
 8000b1e:	f001 fa0b 	bl	8001f38 <init_counter_alarm>
            isSendStr = 0;
 8000b22:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <fsm_alarm+0x458>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
            lcd_Fill(0, 20, 240, 40, BLACK);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2328      	movs	r3, #40	; 0x28
 8000b2e:	22f0      	movs	r2, #240	; 0xf0
 8000b30:	2114      	movs	r1, #20
 8000b32:	2000      	movs	r0, #0
 8000b34:	f001 ffce 	bl	8002ad4 <lcd_Fill>
        break;
 8000b38:	e061      	b.n	8000bfe <fsm_alarm+0x426>
        if (button_count[4] == 1 || auto_change_mode == 1)
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <fsm_alarm+0x438>)
 8000b3c:	891b      	ldrh	r3, [r3, #8]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d003      	beq.n	8000b4a <fsm_alarm+0x372>
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <fsm_alarm+0x44c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d15b      	bne.n	8000c02 <fsm_alarm+0x42a>
            mode_alarm = ALARM_MODE3;
 8000b4a:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <fsm_alarm+0x454>)
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <fsm_alarm+0x458>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8000b56:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <fsm_alarm+0x44c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 200, counterHour_Alarm, 2, BLUE, BLACK, 24);
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <fsm_alarm+0x45c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2318      	movs	r3, #24
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2300      	movs	r3, #0
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	231f      	movs	r3, #31
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2302      	movs	r3, #2
 8000b70:	21c8      	movs	r1, #200	; 0xc8
 8000b72:	2046      	movs	r0, #70	; 0x46
 8000b74:	f002 f8e8 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2314      	movs	r3, #20
 8000b7e:	22f0      	movs	r2, #240	; 0xf0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2000      	movs	r0, #0
 8000b84:	f001 ffa6 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 8000b88:	482b      	ldr	r0, [pc, #172]	; (8000c38 <fsm_alarm+0x460>)
 8000b8a:	f002 fefd 	bl	8003988 <uart_Rs232SendString>
        break;
 8000b8e:	e038      	b.n	8000c02 <fsm_alarm+0x42a>
        if (button_count[4] == 1 || auto_change_mode == 1)
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <fsm_alarm+0x438>)
 8000b92:	891b      	ldrh	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d003      	beq.n	8000ba0 <fsm_alarm+0x3c8>
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <fsm_alarm+0x44c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d132      	bne.n	8000c06 <fsm_alarm+0x42e>
            mode_alarm = ALARM_MODE1;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <fsm_alarm+0x454>)
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <fsm_alarm+0x458>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <fsm_alarm+0x44c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 200, counterMin_Alarm, 2, BLUE, BLACK, 24);
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <fsm_alarm+0x43c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2318      	movs	r3, #24
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	231f      	movs	r3, #31
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	21c8      	movs	r1, #200	; 0xc8
 8000bc8:	206e      	movs	r0, #110	; 0x6e
 8000bca:	f002 f8bd 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	22f0      	movs	r2, #240	; 0xf0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f001 ff7b 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8000bde:	2300      	movs	r3, #0
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2328      	movs	r3, #40	; 0x28
 8000be4:	22f0      	movs	r2, #240	; 0xf0
 8000be6:	2114      	movs	r1, #20
 8000be8:	2000      	movs	r0, #0
 8000bea:	f001 ff73 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 8000bee:	4812      	ldr	r0, [pc, #72]	; (8000c38 <fsm_alarm+0x460>)
 8000bf0:	f002 feca 	bl	8003988 <uart_Rs232SendString>
            save_AlarmSettings();
 8000bf4:	f001 fcc4 	bl	8002580 <save_AlarmSettings>
        break;
 8000bf8:	e005      	b.n	8000c06 <fsm_alarm+0x42e>
        break;
 8000bfa:	bf00      	nop
 8000bfc:	e004      	b.n	8000c08 <fsm_alarm+0x430>
        break;
 8000bfe:	bf00      	nop
 8000c00:	e002      	b.n	8000c08 <fsm_alarm+0x430>
        break;
 8000c02:	bf00      	nop
 8000c04:	e000      	b.n	8000c08 <fsm_alarm+0x430>
        break;
 8000c06:	bf00      	nop
    }
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000098 	.word	0x20000098
 8000c14:	200001ac 	.word	0x200001ac
 8000c18:	200001b8 	.word	0x200001b8
 8000c1c:	200001d0 	.word	0x200001d0
 8000c20:	88888889 	.word	0x88888889
 8000c24:	200001bc 	.word	0x200001bc
 8000c28:	20000198 	.word	0x20000198
 8000c2c:	200001a0 	.word	0x200001a0
 8000c30:	200001b4 	.word	0x200001b4
 8000c34:	200001ab 	.word	0x200001ab
 8000c38:	0800911c 	.word	0x0800911c

08000c3c <fsm_clock>:
 */

#include "fsm_clock.h"

void fsm_clock()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af04      	add	r7, sp, #16
    if (mode == MODE1)
 8000c42:	4b8a      	ldr	r3, [pc, #552]	; (8000e6c <fsm_clock+0x230>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d120      	bne.n	8000c8c <fsm_clock+0x50>
    {
        switch (statusNORMAL_1)
 8000c4a:	4b89      	ldr	r3, [pc, #548]	; (8000e70 <fsm_clock+0x234>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <fsm_clock+0x1c>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d004      	beq.n	8000c60 <fsm_clock+0x24>
            displayTime();
            if (mode_alarm == ALARM_MODE1)
                lcd_StrCenter(0, 20, "MODE NORMAL", YELLOW, BLACK, 16, 1);
            break;
        default:
            break;
 8000c56:	e01c      	b.n	8000c92 <fsm_clock+0x56>
            statusNORMAL_1 = NORMAL;
 8000c58:	4b85      	ldr	r3, [pc, #532]	; (8000e70 <fsm_clock+0x234>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
            break;
 8000c5e:	e018      	b.n	8000c92 <fsm_clock+0x56>
            ds3231_ReadTime();
 8000c60:	f7ff fd2a 	bl	80006b8 <ds3231_ReadTime>
            displayTime();
 8000c64:	f001 fb46 	bl	80022f4 <displayTime>
            if (mode_alarm == ALARM_MODE1)
 8000c68:	4b82      	ldr	r3, [pc, #520]	; (8000e74 <fsm_clock+0x238>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b0a      	cmp	r3, #10
 8000c6e:	d10f      	bne.n	8000c90 <fsm_clock+0x54>
                lcd_StrCenter(0, 20, "MODE NORMAL", YELLOW, BLACK, 16, 1);
 8000c70:	2301      	movs	r3, #1
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	2310      	movs	r3, #16
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c80:	4a7d      	ldr	r2, [pc, #500]	; (8000e78 <fsm_clock+0x23c>)
 8000c82:	2114      	movs	r1, #20
 8000c84:	2000      	movs	r0, #0
 8000c86:	f002 fac5 	bl	8003214 <lcd_StrCenter>
            break;
 8000c8a:	e001      	b.n	8000c90 <fsm_clock+0x54>
        }
    }
 8000c8c:	bf00      	nop
 8000c8e:	e000      	b.n	8000c92 <fsm_clock+0x56>
            break;
 8000c90:	bf00      	nop
    if (mode == MODE2)
 8000c92:	4b76      	ldr	r3, [pc, #472]	; (8000e6c <fsm_clock+0x230>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	f040 809e 	bne.w	8000dd8 <fsm_clock+0x19c>
    {
        switch (statusHOUR_1) // Status blink digit and request uart input
 8000c9c:	4b77      	ldr	r3, [pc, #476]	; (8000e7c <fsm_clock+0x240>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <fsm_clock+0x6e>
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d004      	beq.n	8000cb2 <fsm_clock+0x76>
            }
            uart_Flag("Request hours: ");
            blinky(HOUR);
            break;
        default:
            break;
 8000ca8:	e02e      	b.n	8000d08 <fsm_clock+0xcc>
            statusHOUR_1 = NORMAL;
 8000caa:	4b74      	ldr	r3, [pc, #464]	; (8000e7c <fsm_clock+0x240>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
            break;
 8000cb0:	e02a      	b.n	8000d08 <fsm_clock+0xcc>
            lcd_StrCenter(0, 2, "UPDATING HOURS...", GREEN, BLACK, 16, 1);
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cc2:	4a6f      	ldr	r2, [pc, #444]	; (8000e80 <fsm_clock+0x244>)
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f002 faa4 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000cdc:	4a69      	ldr	r2, [pc, #420]	; (8000e84 <fsm_clock+0x248>)
 8000cde:	2114      	movs	r1, #20
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f002 fa97 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 8000ce6:	4b68      	ldr	r3, [pc, #416]	; (8000e88 <fsm_clock+0x24c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d105      	bne.n	8000cfa <fsm_clock+0xbe>
                uart_Rs232SendString("Request hours: ");
 8000cee:	4867      	ldr	r0, [pc, #412]	; (8000e8c <fsm_clock+0x250>)
 8000cf0:	f002 fe4a 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <fsm_clock+0x24c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
            uart_Flag("Request hours: ");
 8000cfa:	4864      	ldr	r0, [pc, #400]	; (8000e8c <fsm_clock+0x250>)
 8000cfc:	f001 fc92 	bl	8002624 <uart_Flag>
            blinky(HOUR);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f001 f931 	bl	8001f68 <blinky>
            break;
 8000d06:	bf00      	nop
        }
        switch (statusHOUR_2) // Status to control the input digit from both the MCU and the uart
 8000d08:	4b61      	ldr	r3, [pc, #388]	; (8000e90 <fsm_clock+0x254>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <fsm_clock+0xda>
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d004      	beq.n	8000d1e <fsm_clock+0xe2>
                flag_Error = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 8000d14:	e04a      	b.n	8000dac <fsm_clock+0x170>
            statusHOUR_2 = NORMAL;
 8000d16:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <fsm_clock+0x254>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
            break;
 8000d1c:	e046      	b.n	8000dac <fsm_clock+0x170>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <fsm_clock+0x258>)
 8000d20:	88db      	ldrh	r3, [r3, #6]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d00a      	beq.n	8000d3c <fsm_clock+0x100>
 8000d26:	4b5b      	ldr	r3, [pc, #364]	; (8000e94 <fsm_clock+0x258>)
 8000d28:	88db      	ldrh	r3, [r3, #6]
 8000d2a:	2b28      	cmp	r3, #40	; 0x28
 8000d2c:	d913      	bls.n	8000d56 <fsm_clock+0x11a>
 8000d2e:	4b59      	ldr	r3, [pc, #356]	; (8000e94 <fsm_clock+0x258>)
 8000d30:	88db      	ldrh	r3, [r3, #6]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10c      	bne.n	8000d56 <fsm_clock+0x11a>
                counterHour++;
 8000d3c:	4b56      	ldr	r3, [pc, #344]	; (8000e98 <fsm_clock+0x25c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b54      	ldr	r3, [pc, #336]	; (8000e98 <fsm_clock+0x25c>)
 8000d46:	701a      	strb	r2, [r3, #0]
                if (counterHour >= 24)
 8000d48:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <fsm_clock+0x25c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b17      	cmp	r3, #23
 8000d4e:	d902      	bls.n	8000d56 <fsm_clock+0x11a>
                    counterHour = 0;
 8000d50:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <fsm_clock+0x25c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 8000d56:	4b51      	ldr	r3, [pc, #324]	; (8000e9c <fsm_clock+0x260>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d125      	bne.n	8000daa <fsm_clock+0x16e>
                counterHour = number;
 8000d5e:	4b50      	ldr	r3, [pc, #320]	; (8000ea0 <fsm_clock+0x264>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b4c      	ldr	r3, [pc, #304]	; (8000e98 <fsm_clock+0x25c>)
 8000d66:	701a      	strb	r2, [r3, #0]
                if (counterHour >= 24)
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <fsm_clock+0x25c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b17      	cmp	r3, #23
 8000d6e:	d90d      	bls.n	8000d8c <fsm_clock+0x150>
                    counterHour = counterHour % 24;
 8000d70:	4b49      	ldr	r3, [pc, #292]	; (8000e98 <fsm_clock+0x25c>)
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <fsm_clock+0x268>)
 8000d76:	fba3 1302 	umull	r1, r3, r3, r2
 8000d7a:	0919      	lsrs	r1, r3, #4
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	440b      	add	r3, r1
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <fsm_clock+0x25c>)
 8000d8a:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <fsm_clock+0x260>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000d92:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <fsm_clock+0x26c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
                counterTimeOut = 0;
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <fsm_clock+0x270>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
                flag_Error = 0;
 8000d9e:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <fsm_clock+0x274>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 8000da4:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <fsm_clock+0x278>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
            break;
 8000daa:	bf00      	nop
        }
        switch (statusHOUR_3) // Status to save the settings, only applicable for lab 4. For lab 5, it is not necessary
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <fsm_clock+0x27c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <fsm_clock+0x17e>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d004      	beq.n	8000dc2 <fsm_clock+0x186>
            {
                ds3231_Write(ADDRESS_HOUR, counterHour);
            }
            break;
        default:
            break;
 8000db8:	e011      	b.n	8000dde <fsm_clock+0x1a2>
            statusHOUR_3 = NORMAL;
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <fsm_clock+0x27c>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
            break;
 8000dc0:	e00d      	b.n	8000dde <fsm_clock+0x1a2>
            if (button_count[12] == 1)
 8000dc2:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <fsm_clock+0x258>)
 8000dc4:	8b1b      	ldrh	r3, [r3, #24]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d108      	bne.n	8000ddc <fsm_clock+0x1a0>
                ds3231_Write(ADDRESS_HOUR, counterHour);
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <fsm_clock+0x25c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff fc4f 	bl	8000674 <ds3231_Write>
            break;
 8000dd6:	e001      	b.n	8000ddc <fsm_clock+0x1a0>
        }
    }
 8000dd8:	bf00      	nop
 8000dda:	e000      	b.n	8000dde <fsm_clock+0x1a2>
            break;
 8000ddc:	bf00      	nop
    if (mode == MODE3) // MODE MINS
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <fsm_clock+0x230>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	f040 80cf 	bne.w	8000f86 <fsm_clock+0x34a>
    {
        switch (statusMIN_1)
 8000de8:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <fsm_clock+0x280>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <fsm_clock+0x1ba>
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d004      	beq.n	8000dfe <fsm_clock+0x1c2>
            }
            uart_Flag("Request mins: ");
            blinky(MIN);
            break;
        default:
            break;
 8000df4:	e02e      	b.n	8000e54 <fsm_clock+0x218>
            statusMIN_1 = NORMAL;
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <fsm_clock+0x280>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
            break;
 8000dfc:	e02a      	b.n	8000e54 <fsm_clock+0x218>
            lcd_StrCenter(0, 2, "UPDATING MINS...", GREEN, BLACK, 16, 1);
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	2310      	movs	r3, #16
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2300      	movs	r3, #0
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ec0 <fsm_clock+0x284>)
 8000e10:	2102      	movs	r1, #2
 8000e12:	2000      	movs	r0, #0
 8000e14:	f002 f9fe 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	2300      	movs	r3, #0
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e28:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <fsm_clock+0x248>)
 8000e2a:	2114      	movs	r1, #20
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f002 f9f1 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <fsm_clock+0x24c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d105      	bne.n	8000e46 <fsm_clock+0x20a>
                uart_Rs232SendString("Request mins: ");
 8000e3a:	4822      	ldr	r0, [pc, #136]	; (8000ec4 <fsm_clock+0x288>)
 8000e3c:	f002 fda4 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <fsm_clock+0x24c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
            uart_Flag("Request mins: ");
 8000e46:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <fsm_clock+0x288>)
 8000e48:	f001 fbec 	bl	8002624 <uart_Flag>
            blinky(MIN);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f001 f88b 	bl	8001f68 <blinky>
            break;
 8000e52:	bf00      	nop
        }
        switch (statusMIN_2)
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <fsm_clock+0x28c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <fsm_clock+0x226>
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d035      	beq.n	8000ecc <fsm_clock+0x290>
                flag_Error = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 8000e60:	e07b      	b.n	8000f5a <fsm_clock+0x31e>
            statusMIN_2 = NORMAL;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <fsm_clock+0x28c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
            break;
 8000e68:	e077      	b.n	8000f5a <fsm_clock+0x31e>
 8000e6a:	bf00      	nop
 8000e6c:	2000019c 	.word	0x2000019c
 8000e70:	20000124 	.word	0x20000124
 8000e74:	200001a0 	.word	0x200001a0
 8000e78:	08009120 	.word	0x08009120
 8000e7c:	20000144 	.word	0x20000144
 8000e80:	0800912c 	.word	0x0800912c
 8000e84:	08009140 	.word	0x08009140
 8000e88:	200001b4 	.word	0x200001b4
 8000e8c:	0800914c 	.word	0x0800914c
 8000e90:	20000148 	.word	0x20000148
 8000e94:	20000098 	.word	0x20000098
 8000e98:	200001a6 	.word	0x200001a6
 8000e9c:	200001b8 	.word	0x200001b8
 8000ea0:	200001cc 	.word	0x200001cc
 8000ea4:	aaaaaaab 	.word	0xaaaaaaab
 8000ea8:	200001bc 	.word	0x200001bc
 8000eac:	200001c0 	.word	0x200001c0
 8000eb0:	200001c8 	.word	0x200001c8
 8000eb4:	200001c4 	.word	0x200001c4
 8000eb8:	2000014c 	.word	0x2000014c
 8000ebc:	20000138 	.word	0x20000138
 8000ec0:	0800915c 	.word	0x0800915c
 8000ec4:	08009170 	.word	0x08009170
 8000ec8:	2000013c 	.word	0x2000013c
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000ecc:	4b8a      	ldr	r3, [pc, #552]	; (80010f8 <fsm_clock+0x4bc>)
 8000ece:	88db      	ldrh	r3, [r3, #6]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d00a      	beq.n	8000eea <fsm_clock+0x2ae>
 8000ed4:	4b88      	ldr	r3, [pc, #544]	; (80010f8 <fsm_clock+0x4bc>)
 8000ed6:	88db      	ldrh	r3, [r3, #6]
 8000ed8:	2b28      	cmp	r3, #40	; 0x28
 8000eda:	d913      	bls.n	8000f04 <fsm_clock+0x2c8>
 8000edc:	4b86      	ldr	r3, [pc, #536]	; (80010f8 <fsm_clock+0x4bc>)
 8000ede:	88db      	ldrh	r3, [r3, #6]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10c      	bne.n	8000f04 <fsm_clock+0x2c8>
                counterMin++;
 8000eea:	4b84      	ldr	r3, [pc, #528]	; (80010fc <fsm_clock+0x4c0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b82      	ldr	r3, [pc, #520]	; (80010fc <fsm_clock+0x4c0>)
 8000ef4:	701a      	strb	r2, [r3, #0]
                if (counterMin >= 60)
 8000ef6:	4b81      	ldr	r3, [pc, #516]	; (80010fc <fsm_clock+0x4c0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b3b      	cmp	r3, #59	; 0x3b
 8000efc:	d902      	bls.n	8000f04 <fsm_clock+0x2c8>
                    counterMin = 0;
 8000efe:	4b7f      	ldr	r3, [pc, #508]	; (80010fc <fsm_clock+0x4c0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 8000f04:	4b7e      	ldr	r3, [pc, #504]	; (8001100 <fsm_clock+0x4c4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d125      	bne.n	8000f58 <fsm_clock+0x31c>
                counterMin = number;
 8000f0c:	4b7d      	ldr	r3, [pc, #500]	; (8001104 <fsm_clock+0x4c8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b7a      	ldr	r3, [pc, #488]	; (80010fc <fsm_clock+0x4c0>)
 8000f14:	701a      	strb	r2, [r3, #0]
                if (counterMin >= 60)
 8000f16:	4b79      	ldr	r3, [pc, #484]	; (80010fc <fsm_clock+0x4c0>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f1c:	d90d      	bls.n	8000f3a <fsm_clock+0x2fe>
                    counterMin = counterMin % 60;
 8000f1e:	4b77      	ldr	r3, [pc, #476]	; (80010fc <fsm_clock+0x4c0>)
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	4b79      	ldr	r3, [pc, #484]	; (8001108 <fsm_clock+0x4cc>)
 8000f24:	fba3 1302 	umull	r1, r3, r3, r2
 8000f28:	0959      	lsrs	r1, r3, #5
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	1a5b      	subs	r3, r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b71      	ldr	r3, [pc, #452]	; (80010fc <fsm_clock+0x4c0>)
 8000f38:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 8000f3a:	4b71      	ldr	r3, [pc, #452]	; (8001100 <fsm_clock+0x4c4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000f40:	4b72      	ldr	r3, [pc, #456]	; (800110c <fsm_clock+0x4d0>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
                counterTimeOut = 0;
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <fsm_clock+0x4d4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
                flag_Error = 0;
 8000f4c:	4b71      	ldr	r3, [pc, #452]	; (8001114 <fsm_clock+0x4d8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 8000f52:	4b71      	ldr	r3, [pc, #452]	; (8001118 <fsm_clock+0x4dc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
            break;
 8000f58:	bf00      	nop
        }
        switch (statusMIN_3)
 8000f5a:	4b70      	ldr	r3, [pc, #448]	; (800111c <fsm_clock+0x4e0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <fsm_clock+0x32c>
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d004      	beq.n	8000f70 <fsm_clock+0x334>
            {
                ds3231_Write(ADDRESS_MIN, counterMin);
            }
            break;
        default:
            break;
 8000f66:	e011      	b.n	8000f8c <fsm_clock+0x350>
            statusMIN_3 = NORMAL;
 8000f68:	4b6c      	ldr	r3, [pc, #432]	; (800111c <fsm_clock+0x4e0>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
            break;
 8000f6e:	e00d      	b.n	8000f8c <fsm_clock+0x350>
            if (button_count[12] == 1)
 8000f70:	4b61      	ldr	r3, [pc, #388]	; (80010f8 <fsm_clock+0x4bc>)
 8000f72:	8b1b      	ldrh	r3, [r3, #24]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <fsm_clock+0x34e>
                ds3231_Write(ADDRESS_MIN, counterMin);
 8000f78:	4b60      	ldr	r3, [pc, #384]	; (80010fc <fsm_clock+0x4c0>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fb78 	bl	8000674 <ds3231_Write>
            break;
 8000f84:	e001      	b.n	8000f8a <fsm_clock+0x34e>
        }
    }
 8000f86:	bf00      	nop
 8000f88:	e000      	b.n	8000f8c <fsm_clock+0x350>
            break;
 8000f8a:	bf00      	nop
    if (mode == MODE4)
 8000f8c:	4b64      	ldr	r3, [pc, #400]	; (8001120 <fsm_clock+0x4e4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	f040 809e 	bne.w	80010d2 <fsm_clock+0x496>
    {
        switch (statusSEC_1)
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <fsm_clock+0x4e8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <fsm_clock+0x368>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d004      	beq.n	8000fac <fsm_clock+0x370>
            }
            uart_Flag("Request secs: ");
            blinky(SEC);
            break;
        default:
            break;
 8000fa2:	e02e      	b.n	8001002 <fsm_clock+0x3c6>
            statusSEC_1 = NORMAL;
 8000fa4:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <fsm_clock+0x4e8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
            break;
 8000faa:	e02a      	b.n	8001002 <fsm_clock+0x3c6>
            lcd_StrCenter(0, 2, "UPDATING SECONDS...", GREEN, BLACK, 16, 1);
 8000fac:	2301      	movs	r3, #1
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000fbc:	4a5a      	ldr	r2, [pc, #360]	; (8001128 <fsm_clock+0x4ec>)
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f002 f927 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2310      	movs	r3, #16
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fd6:	4a55      	ldr	r2, [pc, #340]	; (800112c <fsm_clock+0x4f0>)
 8000fd8:	2114      	movs	r1, #20
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f002 f91a 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <fsm_clock+0x4f4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <fsm_clock+0x3b8>
                uart_Rs232SendString("Request secs: ");
 8000fe8:	4852      	ldr	r0, [pc, #328]	; (8001134 <fsm_clock+0x4f8>)
 8000fea:	f002 fccd 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <fsm_clock+0x4f4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
            uart_Flag("Request secs: ");
 8000ff4:	484f      	ldr	r0, [pc, #316]	; (8001134 <fsm_clock+0x4f8>)
 8000ff6:	f001 fb15 	bl	8002624 <uart_Flag>
            blinky(SEC);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 ffb4 	bl	8001f68 <blinky>
            break;
 8001000:	bf00      	nop
        }
        switch (statusSEC_2)
 8001002:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <fsm_clock+0x4fc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <fsm_clock+0x3d4>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d004      	beq.n	8001018 <fsm_clock+0x3dc>
                flag_Error = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 800100e:	e04a      	b.n	80010a6 <fsm_clock+0x46a>
            statusSEC_2 = NORMAL;
 8001010:	4b49      	ldr	r3, [pc, #292]	; (8001138 <fsm_clock+0x4fc>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
            break;
 8001016:	e046      	b.n	80010a6 <fsm_clock+0x46a>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <fsm_clock+0x4bc>)
 800101a:	88db      	ldrh	r3, [r3, #6]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d00a      	beq.n	8001036 <fsm_clock+0x3fa>
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <fsm_clock+0x4bc>)
 8001022:	88db      	ldrh	r3, [r3, #6]
 8001024:	2b28      	cmp	r3, #40	; 0x28
 8001026:	d913      	bls.n	8001050 <fsm_clock+0x414>
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <fsm_clock+0x4bc>)
 800102a:	88db      	ldrh	r3, [r3, #6]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	b29b      	uxth	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <fsm_clock+0x414>
                counterSec++;
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <fsm_clock+0x500>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b3f      	ldr	r3, [pc, #252]	; (800113c <fsm_clock+0x500>)
 8001040:	701a      	strb	r2, [r3, #0]
                if (counterSec >= 60)
 8001042:	4b3e      	ldr	r3, [pc, #248]	; (800113c <fsm_clock+0x500>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b3b      	cmp	r3, #59	; 0x3b
 8001048:	d902      	bls.n	8001050 <fsm_clock+0x414>
                    counterSec = 0;
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <fsm_clock+0x500>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <fsm_clock+0x4c4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d125      	bne.n	80010a4 <fsm_clock+0x468>
                counterSec = number;
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <fsm_clock+0x4c8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <fsm_clock+0x500>)
 8001060:	701a      	strb	r2, [r3, #0]
                if (counterSec >= 60)
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <fsm_clock+0x500>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b3b      	cmp	r3, #59	; 0x3b
 8001068:	d90d      	bls.n	8001086 <fsm_clock+0x44a>
                    counterSec = counterSec % 60;
 800106a:	4b34      	ldr	r3, [pc, #208]	; (800113c <fsm_clock+0x500>)
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <fsm_clock+0x4cc>)
 8001070:	fba3 1302 	umull	r1, r3, r3, r2
 8001074:	0959      	lsrs	r1, r3, #5
 8001076:	460b      	mov	r3, r1
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	1a5b      	subs	r3, r3, r1
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <fsm_clock+0x500>)
 8001084:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <fsm_clock+0x4c4>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <fsm_clock+0x4d0>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
                counterTimeOut = 0;
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <fsm_clock+0x4d4>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
                flag_Error = 0;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <fsm_clock+0x4d8>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <fsm_clock+0x4dc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
            break;
 80010a4:	bf00      	nop
        }
        switch (statusSEC_3)
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <fsm_clock+0x504>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <fsm_clock+0x478>
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d004      	beq.n	80010bc <fsm_clock+0x480>
            {
                ds3231_Write(ADDRESS_SEC, counterSec);
            }
            break;
        default:
            break;
 80010b2:	e011      	b.n	80010d8 <fsm_clock+0x49c>
            statusSEC_3 = NORMAL;
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <fsm_clock+0x504>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]
            break;
 80010ba:	e00d      	b.n	80010d8 <fsm_clock+0x49c>
            if (button_count[12] == 1)
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <fsm_clock+0x4bc>)
 80010be:	8b1b      	ldrh	r3, [r3, #24]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <fsm_clock+0x49a>
                ds3231_Write(ADDRESS_SEC, counterSec);
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <fsm_clock+0x500>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fad2 	bl	8000674 <ds3231_Write>
            break;
 80010d0:	e001      	b.n	80010d6 <fsm_clock+0x49a>
        }
    }
 80010d2:	bf00      	nop
 80010d4:	e000      	b.n	80010d8 <fsm_clock+0x49c>
            break;
 80010d6:	bf00      	nop
    if (mode == MODE5)
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <fsm_clock+0x4e4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	f040 80c6 	bne.w	800126e <fsm_clock+0x632>
    {
        switch (statusDAY_1)
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <fsm_clock+0x508>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <fsm_clock+0x4b4>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d02c      	beq.n	8001148 <fsm_clock+0x50c>
            }
            uart_Flag("Request days: ");
            blinky(DAY);
            break;
        default:
            break;
 80010ee:	e056      	b.n	800119e <fsm_clock+0x562>
            statusDAY_1 = NORMAL;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <fsm_clock+0x508>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
            break;
 80010f6:	e052      	b.n	800119e <fsm_clock+0x562>
 80010f8:	20000098 	.word	0x20000098
 80010fc:	200001a5 	.word	0x200001a5
 8001100:	200001b8 	.word	0x200001b8
 8001104:	200001cc 	.word	0x200001cc
 8001108:	88888889 	.word	0x88888889
 800110c:	200001bc 	.word	0x200001bc
 8001110:	200001c0 	.word	0x200001c0
 8001114:	200001c8 	.word	0x200001c8
 8001118:	200001c4 	.word	0x200001c4
 800111c:	20000140 	.word	0x20000140
 8001120:	2000019c 	.word	0x2000019c
 8001124:	2000012c 	.word	0x2000012c
 8001128:	08009180 	.word	0x08009180
 800112c:	08009140 	.word	0x08009140
 8001130:	200001b4 	.word	0x200001b4
 8001134:	08009194 	.word	0x08009194
 8001138:	20000130 	.word	0x20000130
 800113c:	200001a4 	.word	0x200001a4
 8001140:	20000134 	.word	0x20000134
 8001144:	20000150 	.word	0x20000150
            lcd_StrCenter(0, 2, "UPDATING DAYS...", GREEN, BLACK, 16, 1);
 8001148:	2301      	movs	r3, #1
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2310      	movs	r3, #16
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001158:	4a98      	ldr	r2, [pc, #608]	; (80013bc <fsm_clock+0x780>)
 800115a:	2102      	movs	r1, #2
 800115c:	2000      	movs	r0, #0
 800115e:	f002 f859 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8001162:	2301      	movs	r3, #1
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2310      	movs	r3, #16
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2300      	movs	r3, #0
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001172:	4a93      	ldr	r2, [pc, #588]	; (80013c0 <fsm_clock+0x784>)
 8001174:	2114      	movs	r1, #20
 8001176:	2000      	movs	r0, #0
 8001178:	f002 f84c 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 800117c:	4b91      	ldr	r3, [pc, #580]	; (80013c4 <fsm_clock+0x788>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <fsm_clock+0x554>
                uart_Rs232SendString("Request days: ");
 8001184:	4890      	ldr	r0, [pc, #576]	; (80013c8 <fsm_clock+0x78c>)
 8001186:	f002 fbff 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 800118a:	4b8e      	ldr	r3, [pc, #568]	; (80013c4 <fsm_clock+0x788>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
            uart_Flag("Request days: ");
 8001190:	488d      	ldr	r0, [pc, #564]	; (80013c8 <fsm_clock+0x78c>)
 8001192:	f001 fa47 	bl	8002624 <uart_Flag>
            blinky(DAY);
 8001196:	2004      	movs	r0, #4
 8001198:	f000 fee6 	bl	8001f68 <blinky>
            break;
 800119c:	bf00      	nop
        }
        switch (statusDAY_2)
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <fsm_clock+0x790>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <fsm_clock+0x570>
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d004      	beq.n	80011b4 <fsm_clock+0x578>
                flag_Error = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 80011aa:	e04a      	b.n	8001242 <fsm_clock+0x606>
            statusDAY_2 = NORMAL;
 80011ac:	4b87      	ldr	r3, [pc, #540]	; (80013cc <fsm_clock+0x790>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
            break;
 80011b2:	e046      	b.n	8001242 <fsm_clock+0x606>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80011b4:	4b86      	ldr	r3, [pc, #536]	; (80013d0 <fsm_clock+0x794>)
 80011b6:	88db      	ldrh	r3, [r3, #6]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d00a      	beq.n	80011d2 <fsm_clock+0x596>
 80011bc:	4b84      	ldr	r3, [pc, #528]	; (80013d0 <fsm_clock+0x794>)
 80011be:	88db      	ldrh	r3, [r3, #6]
 80011c0:	2b28      	cmp	r3, #40	; 0x28
 80011c2:	d913      	bls.n	80011ec <fsm_clock+0x5b0>
 80011c4:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <fsm_clock+0x794>)
 80011c6:	88db      	ldrh	r3, [r3, #6]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10c      	bne.n	80011ec <fsm_clock+0x5b0>
                counterDay++;
 80011d2:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <fsm_clock+0x798>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <fsm_clock+0x798>)
 80011dc:	701a      	strb	r2, [r3, #0]
                if (counterDay >= 8)
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <fsm_clock+0x798>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	d902      	bls.n	80011ec <fsm_clock+0x5b0>
                    counterDay = 1;
 80011e6:	4b7b      	ldr	r3, [pc, #492]	; (80013d4 <fsm_clock+0x798>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 80011ec:	4b7a      	ldr	r3, [pc, #488]	; (80013d8 <fsm_clock+0x79c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d125      	bne.n	8001240 <fsm_clock+0x604>
                counterDay = number;
 80011f4:	4b79      	ldr	r3, [pc, #484]	; (80013dc <fsm_clock+0x7a0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <fsm_clock+0x798>)
 80011fc:	701a      	strb	r2, [r3, #0]
                if (counterDay >= 8)
 80011fe:	4b75      	ldr	r3, [pc, #468]	; (80013d4 <fsm_clock+0x798>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d90d      	bls.n	8001222 <fsm_clock+0x5e6>
                    if (counterDay == 8)
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <fsm_clock+0x798>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b08      	cmp	r3, #8
 800120c:	d102      	bne.n	8001214 <fsm_clock+0x5d8>
                        counterDay = 1;
 800120e:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <fsm_clock+0x798>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
                    counterDay = counterDay % 8;
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <fsm_clock+0x798>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b6d      	ldr	r3, [pc, #436]	; (80013d4 <fsm_clock+0x798>)
 8001220:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 8001222:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <fsm_clock+0x79c>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8001228:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <fsm_clock+0x7a4>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
                counterTimeOut = 0;
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <fsm_clock+0x7a8>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
                flag_Error = 0;
 8001234:	4b6c      	ldr	r3, [pc, #432]	; (80013e8 <fsm_clock+0x7ac>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <fsm_clock+0x7b0>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
            break;
 8001240:	bf00      	nop
        }
        switch (statusDAY_3)
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <fsm_clock+0x7b4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <fsm_clock+0x614>
 800124a:	2b01      	cmp	r3, #1
 800124c:	d004      	beq.n	8001258 <fsm_clock+0x61c>
            {
                ds3231_Write(ADDRESS_DAY, counterDay);
            }
            break;
        default:
            break;
 800124e:	e011      	b.n	8001274 <fsm_clock+0x638>
            statusDAY_3 = NORMAL;
 8001250:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <fsm_clock+0x7b4>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
            break;
 8001256:	e00d      	b.n	8001274 <fsm_clock+0x638>
            if (button_count[12] == 1)
 8001258:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <fsm_clock+0x794>)
 800125a:	8b1b      	ldrh	r3, [r3, #24]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d108      	bne.n	8001272 <fsm_clock+0x636>
                ds3231_Write(ADDRESS_DAY, counterDay);
 8001260:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <fsm_clock+0x798>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	2003      	movs	r0, #3
 8001268:	f7ff fa04 	bl	8000674 <ds3231_Write>
            break;
 800126c:	e001      	b.n	8001272 <fsm_clock+0x636>
        }
    }
 800126e:	bf00      	nop
 8001270:	e000      	b.n	8001274 <fsm_clock+0x638>
            break;
 8001272:	bf00      	nop
    if (mode == MODE6)
 8001274:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <fsm_clock+0x7b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b06      	cmp	r3, #6
 800127a:	f040 80c9 	bne.w	8001410 <fsm_clock+0x7d4>
    {
        switch (statusDATE_1)
 800127e:	4b5e      	ldr	r3, [pc, #376]	; (80013f8 <fsm_clock+0x7bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <fsm_clock+0x650>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d004      	beq.n	8001294 <fsm_clock+0x658>
            }
            uart_Flag("Request dates: ");
            blinky(DATE);
            break;
        default:
            break;
 800128a:	e02e      	b.n	80012ea <fsm_clock+0x6ae>
            statusDATE_1 = NORMAL;
 800128c:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <fsm_clock+0x7bc>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
            break;
 8001292:	e02a      	b.n	80012ea <fsm_clock+0x6ae>
            lcd_StrCenter(0, 2, "UPDATING DATES...", GREEN, BLACK, 16, 1);
 8001294:	2301      	movs	r3, #1
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2310      	movs	r3, #16
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	2300      	movs	r3, #0
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012a4:	4a55      	ldr	r2, [pc, #340]	; (80013fc <fsm_clock+0x7c0>)
 80012a6:	2102      	movs	r1, #2
 80012a8:	2000      	movs	r0, #0
 80012aa:	f001 ffb3 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 80012ae:	2301      	movs	r3, #1
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2310      	movs	r3, #16
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012be:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <fsm_clock+0x784>)
 80012c0:	2114      	movs	r1, #20
 80012c2:	2000      	movs	r0, #0
 80012c4:	f001 ffa6 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <fsm_clock+0x788>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d105      	bne.n	80012dc <fsm_clock+0x6a0>
                uart_Rs232SendString("Request dates: ");
 80012d0:	484b      	ldr	r0, [pc, #300]	; (8001400 <fsm_clock+0x7c4>)
 80012d2:	f002 fb59 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <fsm_clock+0x788>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
            uart_Flag("Request dates: ");
 80012dc:	4848      	ldr	r0, [pc, #288]	; (8001400 <fsm_clock+0x7c4>)
 80012de:	f001 f9a1 	bl	8002624 <uart_Flag>
            blinky(DATE);
 80012e2:	2005      	movs	r0, #5
 80012e4:	f000 fe40 	bl	8001f68 <blinky>
            break;
 80012e8:	bf00      	nop
        }
        switch (statusDATE_2)
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <fsm_clock+0x7c8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <fsm_clock+0x6bc>
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d004      	beq.n	8001300 <fsm_clock+0x6c4>
                flag_Error = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 80012f6:	e04a      	b.n	800138e <fsm_clock+0x752>
            statusDATE_2 = NORMAL;
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <fsm_clock+0x7c8>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
            break;
 80012fe:	e046      	b.n	800138e <fsm_clock+0x752>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <fsm_clock+0x794>)
 8001302:	88db      	ldrh	r3, [r3, #6]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d00a      	beq.n	800131e <fsm_clock+0x6e2>
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <fsm_clock+0x794>)
 800130a:	88db      	ldrh	r3, [r3, #6]
 800130c:	2b28      	cmp	r3, #40	; 0x28
 800130e:	d913      	bls.n	8001338 <fsm_clock+0x6fc>
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <fsm_clock+0x794>)
 8001312:	88db      	ldrh	r3, [r3, #6]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	b29b      	uxth	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <fsm_clock+0x6fc>
                counterDate++;
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <fsm_clock+0x7cc>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <fsm_clock+0x7cc>)
 8001328:	701a      	strb	r2, [r3, #0]
                if (counterDate >= 32)
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <fsm_clock+0x7cc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b1f      	cmp	r3, #31
 8001330:	d902      	bls.n	8001338 <fsm_clock+0x6fc>
                    counterDate = 1;
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <fsm_clock+0x7cc>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <fsm_clock+0x79c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d125      	bne.n	800138c <fsm_clock+0x750>
                counterDate = number;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <fsm_clock+0x7a0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <fsm_clock+0x7cc>)
 8001348:	701a      	strb	r2, [r3, #0]
                if (counterDate >= 32)
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <fsm_clock+0x7cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b1f      	cmp	r3, #31
 8001350:	d90d      	bls.n	800136e <fsm_clock+0x732>
                    if (counterDate == 32)
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <fsm_clock+0x7cc>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b20      	cmp	r3, #32
 8001358:	d102      	bne.n	8001360 <fsm_clock+0x724>
                        counterDate = 1;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <fsm_clock+0x7cc>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
                    counterDate = counterDate % 32;
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <fsm_clock+0x7cc>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <fsm_clock+0x7cc>)
 800136c:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <fsm_clock+0x79c>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <fsm_clock+0x7a4>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
                counterTimeOut = 0;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <fsm_clock+0x7a8>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
                flag_Error = 0;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <fsm_clock+0x7ac>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <fsm_clock+0x7b0>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
            break;
 800138c:	bf00      	nop
        }
        switch (statusDATE_3)
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <fsm_clock+0x7d0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <fsm_clock+0x760>
 8001396:	2b01      	cmp	r3, #1
 8001398:	d004      	beq.n	80013a4 <fsm_clock+0x768>
            {
                ds3231_Write(ADDRESS_DATE, counterDate);
            }
            break;
        default:
            break;
 800139a:	e03c      	b.n	8001416 <fsm_clock+0x7da>
            statusDATE_3 = NORMAL;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <fsm_clock+0x7d0>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
            break;
 80013a2:	e038      	b.n	8001416 <fsm_clock+0x7da>
            if (button_count[12] == 1)
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <fsm_clock+0x794>)
 80013a6:	8b1b      	ldrh	r3, [r3, #24]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d133      	bne.n	8001414 <fsm_clock+0x7d8>
                ds3231_Write(ADDRESS_DATE, counterDate);
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <fsm_clock+0x7cc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	2004      	movs	r0, #4
 80013b4:	f7ff f95e 	bl	8000674 <ds3231_Write>
            break;
 80013b8:	e02c      	b.n	8001414 <fsm_clock+0x7d8>
 80013ba:	bf00      	nop
 80013bc:	080091a4 	.word	0x080091a4
 80013c0:	08009140 	.word	0x08009140
 80013c4:	200001b4 	.word	0x200001b4
 80013c8:	080091b8 	.word	0x080091b8
 80013cc:	20000154 	.word	0x20000154
 80013d0:	20000098 	.word	0x20000098
 80013d4:	200001a7 	.word	0x200001a7
 80013d8:	200001b8 	.word	0x200001b8
 80013dc:	200001cc 	.word	0x200001cc
 80013e0:	200001bc 	.word	0x200001bc
 80013e4:	200001c0 	.word	0x200001c0
 80013e8:	200001c8 	.word	0x200001c8
 80013ec:	200001c4 	.word	0x200001c4
 80013f0:	20000158 	.word	0x20000158
 80013f4:	2000019c 	.word	0x2000019c
 80013f8:	2000015c 	.word	0x2000015c
 80013fc:	080091c8 	.word	0x080091c8
 8001400:	080091dc 	.word	0x080091dc
 8001404:	20000160 	.word	0x20000160
 8001408:	200001a8 	.word	0x200001a8
 800140c:	20000164 	.word	0x20000164
        }
    }
 8001410:	bf00      	nop
 8001412:	e000      	b.n	8001416 <fsm_clock+0x7da>
            break;
 8001414:	bf00      	nop
    if (mode == MODE7)
 8001416:	4b91      	ldr	r3, [pc, #580]	; (800165c <fsm_clock+0xa20>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b07      	cmp	r3, #7
 800141c:	f040 80a6 	bne.w	800156c <fsm_clock+0x930>
    {
        switch (statusMONTH_1)
 8001420:	4b8f      	ldr	r3, [pc, #572]	; (8001660 <fsm_clock+0xa24>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <fsm_clock+0x7f2>
 8001428:	2b01      	cmp	r3, #1
 800142a:	d004      	beq.n	8001436 <fsm_clock+0x7fa>
            }
            uart_Flag("Request months: ");
            blinky(MONTH);
            break;
        default:
            break;
 800142c:	e02e      	b.n	800148c <fsm_clock+0x850>
            statusMONTH_1 = NORMAL;
 800142e:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <fsm_clock+0xa24>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
            break;
 8001434:	e02a      	b.n	800148c <fsm_clock+0x850>
            lcd_StrCenter(0, 2, "UPDATING MONTHS...", GREEN, BLACK, 16, 1);
 8001436:	2301      	movs	r3, #1
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2310      	movs	r3, #16
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	2300      	movs	r3, #0
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001446:	4a87      	ldr	r2, [pc, #540]	; (8001664 <fsm_clock+0xa28>)
 8001448:	2102      	movs	r1, #2
 800144a:	2000      	movs	r0, #0
 800144c:	f001 fee2 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8001450:	2301      	movs	r3, #1
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2310      	movs	r3, #16
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	2300      	movs	r3, #0
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001460:	4a81      	ldr	r2, [pc, #516]	; (8001668 <fsm_clock+0xa2c>)
 8001462:	2114      	movs	r1, #20
 8001464:	2000      	movs	r0, #0
 8001466:	f001 fed5 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 800146a:	4b80      	ldr	r3, [pc, #512]	; (800166c <fsm_clock+0xa30>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d105      	bne.n	800147e <fsm_clock+0x842>
                uart_Rs232SendString("Request months: ");
 8001472:	487f      	ldr	r0, [pc, #508]	; (8001670 <fsm_clock+0xa34>)
 8001474:	f002 fa88 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 8001478:	4b7c      	ldr	r3, [pc, #496]	; (800166c <fsm_clock+0xa30>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]
            uart_Flag("Request months: ");
 800147e:	487c      	ldr	r0, [pc, #496]	; (8001670 <fsm_clock+0xa34>)
 8001480:	f001 f8d0 	bl	8002624 <uart_Flag>
            blinky(MONTH);
 8001484:	2006      	movs	r0, #6
 8001486:	f000 fd6f 	bl	8001f68 <blinky>
            break;
 800148a:	bf00      	nop
        }
        switch (statusMONTH_2)
 800148c:	4b79      	ldr	r3, [pc, #484]	; (8001674 <fsm_clock+0xa38>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <fsm_clock+0x85e>
 8001494:	2b01      	cmp	r3, #1
 8001496:	d004      	beq.n	80014a2 <fsm_clock+0x866>
                flag_Error = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 8001498:	e052      	b.n	8001540 <fsm_clock+0x904>
            statusMONTH_2 = NORMAL;
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <fsm_clock+0xa38>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]
            break;
 80014a0:	e04e      	b.n	8001540 <fsm_clock+0x904>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80014a2:	4b75      	ldr	r3, [pc, #468]	; (8001678 <fsm_clock+0xa3c>)
 80014a4:	88db      	ldrh	r3, [r3, #6]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d00a      	beq.n	80014c0 <fsm_clock+0x884>
 80014aa:	4b73      	ldr	r3, [pc, #460]	; (8001678 <fsm_clock+0xa3c>)
 80014ac:	88db      	ldrh	r3, [r3, #6]
 80014ae:	2b28      	cmp	r3, #40	; 0x28
 80014b0:	d913      	bls.n	80014da <fsm_clock+0x89e>
 80014b2:	4b71      	ldr	r3, [pc, #452]	; (8001678 <fsm_clock+0xa3c>)
 80014b4:	88db      	ldrh	r3, [r3, #6]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10c      	bne.n	80014da <fsm_clock+0x89e>
                counterMonth++;
 80014c0:	4b6e      	ldr	r3, [pc, #440]	; (800167c <fsm_clock+0xa40>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b6c      	ldr	r3, [pc, #432]	; (800167c <fsm_clock+0xa40>)
 80014ca:	701a      	strb	r2, [r3, #0]
                if (counterMonth >= 13)
 80014cc:	4b6b      	ldr	r3, [pc, #428]	; (800167c <fsm_clock+0xa40>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b0c      	cmp	r3, #12
 80014d2:	d902      	bls.n	80014da <fsm_clock+0x89e>
                    counterMonth = 1;
 80014d4:	4b69      	ldr	r3, [pc, #420]	; (800167c <fsm_clock+0xa40>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 80014da:	4b69      	ldr	r3, [pc, #420]	; (8001680 <fsm_clock+0xa44>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d12d      	bne.n	800153e <fsm_clock+0x902>
                counterMonth = number;
 80014e2:	4b68      	ldr	r3, [pc, #416]	; (8001684 <fsm_clock+0xa48>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b64      	ldr	r3, [pc, #400]	; (800167c <fsm_clock+0xa40>)
 80014ea:	701a      	strb	r2, [r3, #0]
                if (counterMonth >= 13)
 80014ec:	4b63      	ldr	r3, [pc, #396]	; (800167c <fsm_clock+0xa40>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d915      	bls.n	8001520 <fsm_clock+0x8e4>
                    if (counterMonth == 13)
 80014f4:	4b61      	ldr	r3, [pc, #388]	; (800167c <fsm_clock+0xa40>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b0d      	cmp	r3, #13
 80014fa:	d102      	bne.n	8001502 <fsm_clock+0x8c6>
                        counterMonth = 1;
 80014fc:	4b5f      	ldr	r3, [pc, #380]	; (800167c <fsm_clock+0xa40>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
                    counterMonth = counterMonth % 13;
 8001502:	4b5e      	ldr	r3, [pc, #376]	; (800167c <fsm_clock+0xa40>)
 8001504:	7819      	ldrb	r1, [r3, #0]
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <fsm_clock+0xa4c>)
 8001508:	fba3 2301 	umull	r2, r3, r3, r1
 800150c:	089a      	lsrs	r2, r3, #2
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	1acb      	subs	r3, r1, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <fsm_clock+0xa40>)
 800151e:	701a      	strb	r2, [r3, #0]
                uart_input = 0;
 8001520:	4b57      	ldr	r3, [pc, #348]	; (8001680 <fsm_clock+0xa44>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <fsm_clock+0xa50>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
                counterTimeOut = 0;
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <fsm_clock+0xa54>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
                flag_Error = 0;
 8001532:	4b58      	ldr	r3, [pc, #352]	; (8001694 <fsm_clock+0xa58>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 8001538:	4b57      	ldr	r3, [pc, #348]	; (8001698 <fsm_clock+0xa5c>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
            break;
 800153e:	bf00      	nop
        }
        switch (statusMONTH_3)
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <fsm_clock+0xa60>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <fsm_clock+0x912>
 8001548:	2b01      	cmp	r3, #1
 800154a:	d004      	beq.n	8001556 <fsm_clock+0x91a>
            {
                ds3231_Write(ADDRESS_MONTH, counterMonth);
            }
            break;
        default:
            break;
 800154c:	e011      	b.n	8001572 <fsm_clock+0x936>
            statusMONTH_3 = NORMAL;
 800154e:	4b53      	ldr	r3, [pc, #332]	; (800169c <fsm_clock+0xa60>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]
            break;
 8001554:	e00d      	b.n	8001572 <fsm_clock+0x936>
            if (button_count[12] == 1)
 8001556:	4b48      	ldr	r3, [pc, #288]	; (8001678 <fsm_clock+0xa3c>)
 8001558:	8b1b      	ldrh	r3, [r3, #24]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <fsm_clock+0x934>
                ds3231_Write(ADDRESS_MONTH, counterMonth);
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <fsm_clock+0xa40>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	2005      	movs	r0, #5
 8001566:	f7ff f885 	bl	8000674 <ds3231_Write>
            break;
 800156a:	e001      	b.n	8001570 <fsm_clock+0x934>
        }
    }
 800156c:	bf00      	nop
 800156e:	e000      	b.n	8001572 <fsm_clock+0x936>
            break;
 8001570:	bf00      	nop
    if (mode == MODE8)
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <fsm_clock+0xa20>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b08      	cmp	r3, #8
 8001578:	f040 80d6 	bne.w	8001728 <fsm_clock+0xaec>
    {
        switch (statusYEAR_1)
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <fsm_clock+0xa64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <fsm_clock+0x94e>
 8001584:	2b01      	cmp	r3, #1
 8001586:	d004      	beq.n	8001592 <fsm_clock+0x956>
                isSendStr = 1;
            }
            blinky(YEAR);
            break;
        default:
            break;
 8001588:	e02b      	b.n	80015e2 <fsm_clock+0x9a6>
            statusYEAR_1 = NORMAL;
 800158a:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <fsm_clock+0xa64>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
            break;
 8001590:	e027      	b.n	80015e2 <fsm_clock+0x9a6>
            lcd_StrCenter(0, 2, "UPDATING YEARS...", GREEN, BLACK, 16, 1);
 8001592:	2301      	movs	r3, #1
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2310      	movs	r3, #16
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015a2:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <fsm_clock+0xa68>)
 80015a4:	2102      	movs	r1, #2
 80015a6:	2000      	movs	r0, #0
 80015a8:	f001 fe34 	bl	8003214 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 80015ac:	2301      	movs	r3, #1
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2310      	movs	r3, #16
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015bc:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <fsm_clock+0xa2c>)
 80015be:	2114      	movs	r1, #20
 80015c0:	2000      	movs	r0, #0
 80015c2:	f001 fe27 	bl	8003214 <lcd_StrCenter>
            if (isSendStr == 0)
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <fsm_clock+0xa30>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <fsm_clock+0x99e>
                uart_Rs232SendString("Request years: ");
 80015ce:	4836      	ldr	r0, [pc, #216]	; (80016a8 <fsm_clock+0xa6c>)
 80015d0:	f002 f9da 	bl	8003988 <uart_Rs232SendString>
                isSendStr = 1;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <fsm_clock+0xa30>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
            blinky(YEAR);
 80015da:	2007      	movs	r0, #7
 80015dc:	f000 fcc4 	bl	8001f68 <blinky>
            break;
 80015e0:	bf00      	nop
        }
        switch (statusYEAR_2)
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <fsm_clock+0xa70>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <fsm_clock+0x9b4>
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d004      	beq.n	80015f8 <fsm_clock+0x9bc>
                    flag_TimeOut = 0;
                }
            }
            break;
        default:
            break;
 80015ee:	e085      	b.n	80016fc <fsm_clock+0xac0>
            statusYEAR_2 = NORMAL;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <fsm_clock+0xa70>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
            break;
 80015f6:	e081      	b.n	80016fc <fsm_clock+0xac0>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <fsm_clock+0xa3c>)
 80015fa:	88db      	ldrh	r3, [r3, #6]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d00a      	beq.n	8001616 <fsm_clock+0x9da>
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <fsm_clock+0xa3c>)
 8001602:	88db      	ldrh	r3, [r3, #6]
 8001604:	2b28      	cmp	r3, #40	; 0x28
 8001606:	d913      	bls.n	8001630 <fsm_clock+0x9f4>
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <fsm_clock+0xa3c>)
 800160a:	88db      	ldrh	r3, [r3, #6]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	b29b      	uxth	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <fsm_clock+0x9f4>
                counterYear++;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <fsm_clock+0xa74>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <fsm_clock+0xa74>)
 8001620:	701a      	strb	r2, [r3, #0]
                if (counterYear >= 100)
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <fsm_clock+0xa74>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b63      	cmp	r3, #99	; 0x63
 8001628:	d902      	bls.n	8001630 <fsm_clock+0x9f4>
                    counterYear = 0;
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <fsm_clock+0xa74>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
            if (uart_input == 1)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <fsm_clock+0xa44>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d160      	bne.n	80016fa <fsm_clock+0xabe>
                if (number < 0)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <fsm_clock+0xa48>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da3b      	bge.n	80016b8 <fsm_clock+0xa7c>
                    lcd_StrCenter(0, 250, "INVALID VALUE!!!", GREEN, BLACK, 16, 1);
 8001640:	2301      	movs	r3, #1
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2310      	movs	r3, #16
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2300      	movs	r3, #0
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <fsm_clock+0xa78>)
 8001652:	21fa      	movs	r1, #250	; 0xfa
 8001654:	2000      	movs	r0, #0
 8001656:	f001 fddd 	bl	8003214 <lcd_StrCenter>
            break;
 800165a:	e04e      	b.n	80016fa <fsm_clock+0xabe>
 800165c:	2000019c 	.word	0x2000019c
 8001660:	20000168 	.word	0x20000168
 8001664:	080091ec 	.word	0x080091ec
 8001668:	08009140 	.word	0x08009140
 800166c:	200001b4 	.word	0x200001b4
 8001670:	08009200 	.word	0x08009200
 8001674:	2000016c 	.word	0x2000016c
 8001678:	20000098 	.word	0x20000098
 800167c:	200001a9 	.word	0x200001a9
 8001680:	200001b8 	.word	0x200001b8
 8001684:	200001cc 	.word	0x200001cc
 8001688:	4ec4ec4f 	.word	0x4ec4ec4f
 800168c:	200001bc 	.word	0x200001bc
 8001690:	200001c0 	.word	0x200001c0
 8001694:	200001c8 	.word	0x200001c8
 8001698:	200001c4 	.word	0x200001c4
 800169c:	20000170 	.word	0x20000170
 80016a0:	20000174 	.word	0x20000174
 80016a4:	08009214 	.word	0x08009214
 80016a8:	08009228 	.word	0x08009228
 80016ac:	20000178 	.word	0x20000178
 80016b0:	200001aa 	.word	0x200001aa
 80016b4:	08009238 	.word	0x08009238
                    counterYear = number;
 80016b8:	4ba3      	ldr	r3, [pc, #652]	; (8001948 <fsm_clock+0xd0c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4ba3      	ldr	r3, [pc, #652]	; (800194c <fsm_clock+0xd10>)
 80016c0:	701a      	strb	r2, [r3, #0]
                    counterYear = counterYear % 100;
 80016c2:	4ba2      	ldr	r3, [pc, #648]	; (800194c <fsm_clock+0xd10>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4aa2      	ldr	r2, [pc, #648]	; (8001950 <fsm_clock+0xd14>)
 80016c8:	fba2 1203 	umull	r1, r2, r2, r3
 80016cc:	0952      	lsrs	r2, r2, #5
 80016ce:	2164      	movs	r1, #100	; 0x64
 80016d0:	fb01 f202 	mul.w	r2, r1, r2
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b9c      	ldr	r3, [pc, #624]	; (800194c <fsm_clock+0xd10>)
 80016da:	701a      	strb	r2, [r3, #0]
                    uart_input = 0;
 80016dc:	4b9d      	ldr	r3, [pc, #628]	; (8001954 <fsm_clock+0xd18>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
                    auto_change_mode = 1;
 80016e2:	4b9d      	ldr	r3, [pc, #628]	; (8001958 <fsm_clock+0xd1c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
                    counterTimeOut = 0;
 80016e8:	4b9c      	ldr	r3, [pc, #624]	; (800195c <fsm_clock+0xd20>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
                    flag_Error = 0;
 80016ee:	4b9c      	ldr	r3, [pc, #624]	; (8001960 <fsm_clock+0xd24>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
                    flag_TimeOut = 0;
 80016f4:	4b9b      	ldr	r3, [pc, #620]	; (8001964 <fsm_clock+0xd28>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
            break;
 80016fa:	bf00      	nop
        }
        switch (statusYEAR_3)
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <fsm_clock+0xd2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <fsm_clock+0xace>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d004      	beq.n	8001712 <fsm_clock+0xad6>
            {
                ds3231_Write(ADDRESS_YEAR, counterYear);
            }
            break;
        default:
            break;
 8001708:	e011      	b.n	800172e <fsm_clock+0xaf2>
            statusYEAR_3 = NORMAL;
 800170a:	4b97      	ldr	r3, [pc, #604]	; (8001968 <fsm_clock+0xd2c>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
            break;
 8001710:	e00d      	b.n	800172e <fsm_clock+0xaf2>
            if (button_count[12] == 1)
 8001712:	4b96      	ldr	r3, [pc, #600]	; (800196c <fsm_clock+0xd30>)
 8001714:	8b1b      	ldrh	r3, [r3, #24]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <fsm_clock+0xaf0>
                ds3231_Write(ADDRESS_YEAR, counterYear);
 800171a:	4b8c      	ldr	r3, [pc, #560]	; (800194c <fsm_clock+0xd10>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	2006      	movs	r0, #6
 8001722:	f7fe ffa7 	bl	8000674 <ds3231_Write>
            break;
 8001726:	e001      	b.n	800172c <fsm_clock+0xaf0>
        }
    }
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <fsm_clock+0xaf2>
            break;
 800172c:	bf00      	nop

    switch (mode)
 800172e:	4b90      	ldr	r3, [pc, #576]	; (8001970 <fsm_clock+0xd34>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3b01      	subs	r3, #1
 8001734:	2b07      	cmp	r3, #7
 8001736:	f200 81c8 	bhi.w	8001aca <fsm_clock+0xe8e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <fsm_clock+0xb04>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001761 	.word	0x08001761
 8001744:	0800178d 	.word	0x0800178d
 8001748:	0800180b 	.word	0x0800180b
 800174c:	08001875 	.word	0x08001875
 8001750:	080018df 	.word	0x080018df
 8001754:	0800198d 	.word	0x0800198d
 8001758:	080019f7 	.word	0x080019f7
 800175c:	08001a5f 	.word	0x08001a5f
    {
    case MODE1:
        if (button_count[0] == 1)
 8001760:	4b82      	ldr	r3, [pc, #520]	; (800196c <fsm_clock+0xd30>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	f040 81b2 	bne.w	8001ace <fsm_clock+0xe92>
        {
            mode = MODE2;
 800176a:	4b81      	ldr	r3, [pc, #516]	; (8001970 <fsm_clock+0xd34>)
 800176c:	2202      	movs	r2, #2
 800176e:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001770:	4b80      	ldr	r3, [pc, #512]	; (8001974 <fsm_clock+0xd38>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
            init_counter();
 8001776:	f000 fb9f 	bl	8001eb8 <init_counter>
            lcd_Fill(0, 20, 240, 40, BLACK); // Clear "MODE NORMAL" on the LCD
 800177a:	2300      	movs	r3, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2328      	movs	r3, #40	; 0x28
 8001780:	22f0      	movs	r2, #240	; 0xf0
 8001782:	2114      	movs	r1, #20
 8001784:	2000      	movs	r0, #0
 8001786:	f001 f9a5 	bl	8002ad4 <lcd_Fill>
        }
        break;
 800178a:	e1a0      	b.n	8001ace <fsm_clock+0xe92>
    case MODE2:
        if (button_count[0] == 1 || auto_change_mode == 1)
 800178c:	4b77      	ldr	r3, [pc, #476]	; (800196c <fsm_clock+0xd30>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d004      	beq.n	800179e <fsm_clock+0xb62>
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <fsm_clock+0xd1c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	f040 819a 	bne.w	8001ad2 <fsm_clock+0xe96>
        {
            mode = MODE3;
 800179e:	4b74      	ldr	r3, [pc, #464]	; (8001970 <fsm_clock+0xd34>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 80017a4:	4b73      	ldr	r3, [pc, #460]	; (8001974 <fsm_clock+0xd38>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 80017aa:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <fsm_clock+0xd1c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 100, counterHour, 2, GREEN, BLACK, 24);
 80017b0:	4b71      	ldr	r3, [pc, #452]	; (8001978 <fsm_clock+0xd3c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	2318      	movs	r3, #24
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2302      	movs	r3, #2
 80017c6:	2164      	movs	r1, #100	; 0x64
 80017c8:	2046      	movs	r0, #70	; 0x46
 80017ca:	f001 fabd 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK); // Clear "UPDATING HOURS..."
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2314      	movs	r3, #20
 80017d4:	22f0      	movs	r2, #240	; 0xf0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2000      	movs	r0, #0
 80017da:	f001 f97b 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK); // Clear "MODE LOCK"
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2328      	movs	r3, #40	; 0x28
 80017e4:	22f0      	movs	r2, #240	; 0xf0
 80017e6:	2114      	movs	r1, #20
 80017e8:	2000      	movs	r0, #0
 80017ea:	f001 f973 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 270, 240, 290, BLACK); 
 80017ee:	2300      	movs	r3, #0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	f44f 7391 	mov.w	r3, #290	; 0x122
 80017f6:	22f0      	movs	r2, #240	; 0xf0
 80017f8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80017fc:	2000      	movs	r0, #0
 80017fe:	f001 f969 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001802:	485e      	ldr	r0, [pc, #376]	; (800197c <fsm_clock+0xd40>)
 8001804:	f002 f8c0 	bl	8003988 <uart_Rs232SendString>
        }
        break;
 8001808:	e163      	b.n	8001ad2 <fsm_clock+0xe96>
    case MODE3:
        if (button_count[0] == 1 || auto_change_mode == 1)
 800180a:	4b58      	ldr	r3, [pc, #352]	; (800196c <fsm_clock+0xd30>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d004      	beq.n	800181c <fsm_clock+0xbe0>
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <fsm_clock+0xd1c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	f040 815d 	bne.w	8001ad6 <fsm_clock+0xe9a>
        {
            mode = MODE4;
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <fsm_clock+0xd34>)
 800181e:	2204      	movs	r2, #4
 8001820:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001822:	4b54      	ldr	r3, [pc, #336]	; (8001974 <fsm_clock+0xd38>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001828:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <fsm_clock+0xd1c>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 100, counterMin, 2, GREEN, BLACK, 24);
 800182e:	4b54      	ldr	r3, [pc, #336]	; (8001980 <fsm_clock+0xd44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b29a      	uxth	r2, r3
 8001834:	2318      	movs	r3, #24
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2302      	movs	r3, #2
 8001844:	2164      	movs	r1, #100	; 0x64
 8001846:	206e      	movs	r0, #110	; 0x6e
 8001848:	f001 fa7e 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2314      	movs	r3, #20
 8001852:	22f0      	movs	r2, #240	; 0xf0
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f001 f93c 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 800185c:	2300      	movs	r3, #0
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2328      	movs	r3, #40	; 0x28
 8001862:	22f0      	movs	r2, #240	; 0xf0
 8001864:	2114      	movs	r1, #20
 8001866:	2000      	movs	r0, #0
 8001868:	f001 f934 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 800186c:	4843      	ldr	r0, [pc, #268]	; (800197c <fsm_clock+0xd40>)
 800186e:	f002 f88b 	bl	8003988 <uart_Rs232SendString>
        }
        break;
 8001872:	e130      	b.n	8001ad6 <fsm_clock+0xe9a>
    case MODE4:
        if (button_count[0] == 1 || auto_change_mode == 1)
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <fsm_clock+0xd30>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d004      	beq.n	8001886 <fsm_clock+0xc4a>
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <fsm_clock+0xd1c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	f040 812a 	bne.w	8001ada <fsm_clock+0xe9e>
        {
            mode = MODE5;
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <fsm_clock+0xd34>)
 8001888:	2205      	movs	r2, #5
 800188a:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <fsm_clock+0xd38>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <fsm_clock+0xd1c>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(150, 100, counterSec, 2, GREEN, BLACK, 24);
 8001898:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <fsm_clock+0xd48>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	2318      	movs	r3, #24
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	2300      	movs	r3, #0
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2302      	movs	r3, #2
 80018ae:	2164      	movs	r1, #100	; 0x64
 80018b0:	2096      	movs	r0, #150	; 0x96
 80018b2:	f001 fa49 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 80018b6:	2300      	movs	r3, #0
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2314      	movs	r3, #20
 80018bc:	22f0      	movs	r2, #240	; 0xf0
 80018be:	2100      	movs	r1, #0
 80018c0:	2000      	movs	r0, #0
 80018c2:	f001 f907 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 80018c6:	2300      	movs	r3, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2328      	movs	r3, #40	; 0x28
 80018cc:	22f0      	movs	r2, #240	; 0xf0
 80018ce:	2114      	movs	r1, #20
 80018d0:	2000      	movs	r0, #0
 80018d2:	f001 f8ff 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 80018d6:	4829      	ldr	r0, [pc, #164]	; (800197c <fsm_clock+0xd40>)
 80018d8:	f002 f856 	bl	8003988 <uart_Rs232SendString>
        }
        break;
 80018dc:	e0fd      	b.n	8001ada <fsm_clock+0xe9e>
    case MODE5:
        if (button_count[0] == 1 || auto_change_mode == 1)
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <fsm_clock+0xd30>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d004      	beq.n	80018f0 <fsm_clock+0xcb4>
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <fsm_clock+0xd1c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	f040 80f7 	bne.w	8001ade <fsm_clock+0xea2>
        {
            mode = MODE6;
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <fsm_clock+0xd34>)
 80018f2:	2206      	movs	r2, #6
 80018f4:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <fsm_clock+0xd38>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <fsm_clock+0xd1c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(20, 130, counterDay, 2, YELLOW, BLACK, 24);
 8001902:	4b21      	ldr	r3, [pc, #132]	; (8001988 <fsm_clock+0xd4c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b29a      	uxth	r2, r3
 8001908:	2318      	movs	r3, #24
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2300      	movs	r3, #0
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2302      	movs	r3, #2
 8001918:	2182      	movs	r1, #130	; 0x82
 800191a:	2014      	movs	r0, #20
 800191c:	f001 fa14 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2314      	movs	r3, #20
 8001926:	22f0      	movs	r2, #240	; 0xf0
 8001928:	2100      	movs	r1, #0
 800192a:	2000      	movs	r0, #0
 800192c:	f001 f8d2 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2328      	movs	r3, #40	; 0x28
 8001936:	22f0      	movs	r2, #240	; 0xf0
 8001938:	2114      	movs	r1, #20
 800193a:	2000      	movs	r0, #0
 800193c:	f001 f8ca 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001940:	480e      	ldr	r0, [pc, #56]	; (800197c <fsm_clock+0xd40>)
 8001942:	f002 f821 	bl	8003988 <uart_Rs232SendString>
        }
        break;
 8001946:	e0ca      	b.n	8001ade <fsm_clock+0xea2>
 8001948:	200001cc 	.word	0x200001cc
 800194c:	200001aa 	.word	0x200001aa
 8001950:	51eb851f 	.word	0x51eb851f
 8001954:	200001b8 	.word	0x200001b8
 8001958:	200001bc 	.word	0x200001bc
 800195c:	200001c0 	.word	0x200001c0
 8001960:	200001c8 	.word	0x200001c8
 8001964:	200001c4 	.word	0x200001c4
 8001968:	2000017c 	.word	0x2000017c
 800196c:	20000098 	.word	0x20000098
 8001970:	2000019c 	.word	0x2000019c
 8001974:	200001b4 	.word	0x200001b4
 8001978:	200001a6 	.word	0x200001a6
 800197c:	0800924c 	.word	0x0800924c
 8001980:	200001a5 	.word	0x200001a5
 8001984:	200001a4 	.word	0x200001a4
 8001988:	200001a7 	.word	0x200001a7
    case MODE6:
        if (button_count[0] == 1 || auto_change_mode == 1)
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <fsm_clock+0xf14>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d004      	beq.n	800199e <fsm_clock+0xd62>
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <fsm_clock+0xf18>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 80a2 	bne.w	8001ae2 <fsm_clock+0xea6>
        {
            mode = MODE7;
 800199e:	4b6e      	ldr	r3, [pc, #440]	; (8001b58 <fsm_clock+0xf1c>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 80019a4:	4b6d      	ldr	r3, [pc, #436]	; (8001b5c <fsm_clock+0xf20>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 80019aa:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <fsm_clock+0xf18>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 130, counterDate, 2, YELLOW, BLACK, 24);
 80019b0:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <fsm_clock+0xf24>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	2318      	movs	r3, #24
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2300      	movs	r3, #0
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2302      	movs	r3, #2
 80019c6:	2182      	movs	r1, #130	; 0x82
 80019c8:	2046      	movs	r0, #70	; 0x46
 80019ca:	f001 f9bd 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2314      	movs	r3, #20
 80019d4:	22f0      	movs	r2, #240	; 0xf0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f001 f87b 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2328      	movs	r3, #40	; 0x28
 80019e4:	22f0      	movs	r2, #240	; 0xf0
 80019e6:	2114      	movs	r1, #20
 80019e8:	2000      	movs	r0, #0
 80019ea:	f001 f873 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 80019ee:	485d      	ldr	r0, [pc, #372]	; (8001b64 <fsm_clock+0xf28>)
 80019f0:	f001 ffca 	bl	8003988 <uart_Rs232SendString>
        }
        break;
 80019f4:	e075      	b.n	8001ae2 <fsm_clock+0xea6>
    case MODE7:
        if (button_count[0] == 1 || auto_change_mode == 1)
 80019f6:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <fsm_clock+0xf14>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <fsm_clock+0xdca>
 80019fe:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <fsm_clock+0xf18>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d16f      	bne.n	8001ae6 <fsm_clock+0xeaa>
        {
            mode = MODE8;
 8001a06:	4b54      	ldr	r3, [pc, #336]	; (8001b58 <fsm_clock+0xf1c>)
 8001a08:	2208      	movs	r2, #8
 8001a0a:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <fsm_clock+0xf20>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001a12:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <fsm_clock+0xf18>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 130, counterMonth, 2, YELLOW, BLACK, 24);
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <fsm_clock+0xf2c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	2318      	movs	r3, #24
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	2182      	movs	r1, #130	; 0x82
 8001a30:	206e      	movs	r0, #110	; 0x6e
 8001a32:	f001 f989 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8001a36:	2300      	movs	r3, #0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2314      	movs	r3, #20
 8001a3c:	22f0      	movs	r2, #240	; 0xf0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2000      	movs	r0, #0
 8001a42:	f001 f847 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8001a46:	2300      	movs	r3, #0
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2328      	movs	r3, #40	; 0x28
 8001a4c:	22f0      	movs	r2, #240	; 0xf0
 8001a4e:	2114      	movs	r1, #20
 8001a50:	2000      	movs	r0, #0
 8001a52:	f001 f83f 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001a56:	4843      	ldr	r0, [pc, #268]	; (8001b64 <fsm_clock+0xf28>)
 8001a58:	f001 ff96 	bl	8003988 <uart_Rs232SendString>
        }
        break;
 8001a5c:	e043      	b.n	8001ae6 <fsm_clock+0xeaa>
    case MODE8:
        if (button_count[0] == 1 || auto_change_mode == 1)
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <fsm_clock+0xf14>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d003      	beq.n	8001a6e <fsm_clock+0xe32>
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <fsm_clock+0xf18>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d13d      	bne.n	8001aea <fsm_clock+0xeae>
        {
            mode = MODE1;
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <fsm_clock+0xf1c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001a74:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <fsm_clock+0xf20>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <fsm_clock+0xf18>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(150, 130, counterYear, 2, YELLOW, BLACK, 24);
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <fsm_clock+0xf30>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	2318      	movs	r3, #24
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2302      	movs	r3, #2
 8001a96:	2182      	movs	r1, #130	; 0x82
 8001a98:	2096      	movs	r0, #150	; 0x96
 8001a9a:	f001 f955 	bl	8002d48 <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2314      	movs	r3, #20
 8001aa4:	22f0      	movs	r2, #240	; 0xf0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f001 f813 	bl	8002ad4 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2328      	movs	r3, #40	; 0x28
 8001ab4:	22f0      	movs	r2, #240	; 0xf0
 8001ab6:	2114      	movs	r1, #20
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f001 f80b 	bl	8002ad4 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001abe:	4829      	ldr	r0, [pc, #164]	; (8001b64 <fsm_clock+0xf28>)
 8001ac0:	f001 ff62 	bl	8003988 <uart_Rs232SendString>
            save_ClockSettings();
 8001ac4:	f000 fd20 	bl	8002508 <save_ClockSettings>
        }
        break;
 8001ac8:	e00f      	b.n	8001aea <fsm_clock+0xeae>
    default:
        break;
 8001aca:	bf00      	nop
 8001acc:	e00e      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001ace:	bf00      	nop
 8001ad0:	e00c      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001ad2:	bf00      	nop
 8001ad4:	e00a      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001ad6:	bf00      	nop
 8001ad8:	e008      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001ada:	bf00      	nop
 8001adc:	e006      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001ade:	bf00      	nop
 8001ae0:	e004      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001ae2:	bf00      	nop
 8001ae4:	e002      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <fsm_clock+0xeb0>
        break;
 8001aea:	bf00      	nop
    }

    if (flag_Error == 2)
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <fsm_clock+0xf34>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d12a      	bne.n	8001b4a <fsm_clock+0xf0e>
    {
        mode = MODE1;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <fsm_clock+0xf1c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
        isSendStr = 0;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <fsm_clock+0xf20>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
        auto_change_mode = 0;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <fsm_clock+0xf18>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
        flag_TimeOut = 0;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <fsm_clock+0xf38>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
        flag_Error = 0;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <fsm_clock+0xf34>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
        save_ClockSettings();
 8001b12:	f000 fcf9 	bl	8002508 <save_ClockSettings>
        lcd_Fill(0, 0, 240, 20, BLACK); 
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2314      	movs	r3, #20
 8001b1c:	22f0      	movs	r2, #240	; 0xf0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2000      	movs	r0, #0
 8001b22:	f000 ffd7 	bl	8002ad4 <lcd_Fill>
        lcd_Fill(0, 20, 240, 40, BLACK);
 8001b26:	2300      	movs	r3, #0
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2328      	movs	r3, #40	; 0x28
 8001b2c:	22f0      	movs	r2, #240	; 0xf0
 8001b2e:	2114      	movs	r1, #20
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 ffcf 	bl	8002ad4 <lcd_Fill>
        lcd_Fill(0, 270, 240, 290, BLACK);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001b3e:	22f0      	movs	r2, #240	; 0xf0
 8001b40:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001b44:	2000      	movs	r0, #0
 8001b46:	f000 ffc5 	bl	8002ad4 <lcd_Fill>
    }
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000098 	.word	0x20000098
 8001b54:	200001bc 	.word	0x200001bc
 8001b58:	2000019c 	.word	0x2000019c
 8001b5c:	200001b4 	.word	0x200001b4
 8001b60:	200001a8 	.word	0x200001a8
 8001b64:	0800924c 	.word	0x0800924c
 8001b68:	200001a9 	.word	0x200001a9
 8001b6c:	200001aa 	.word	0x200001aa
 8001b70:	200001c8 	.word	0x200001c8
 8001b74:	200001c4 	.word	0x200001c4

08001b78 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	; 0x38
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001b92:	463b      	mov	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001ba6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001baa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bae:	4a2e      	ldr	r2, [pc, #184]	; (8001c68 <MX_FSMC_Init+0xf0>)
 8001bb0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001c0e:	230f      	movs	r3, #15
 8001c10:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001c12:	233c      	movs	r3, #60	; 0x3c
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001c1e:	2311      	movs	r3, #17
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001c26:	2308      	movs	r3, #8
 8001c28:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001c2e:	2309      	movs	r3, #9
 8001c30:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001c36:	2310      	movs	r3, #16
 8001c38:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001c3a:	2311      	movs	r3, #17
 8001c3c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001c42:	463a      	mov	r2, r7
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <MX_FSMC_Init+0xec>)
 8001c4c:	f004 fee0 	bl	8006a10 <HAL_SRAM_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001c56:	f001 fc95 	bl	8003584 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3738      	adds	r7, #56	; 0x38
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200000d0 	.word	0x200000d0
 8001c68:	a0000104 	.word	0xa0000104

08001c6c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_FSMC_MspInit+0x88>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d131      	bne.n	8001cec <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_FSMC_MspInit+0x88>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_FSMC_MspInit+0x8c>)
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <HAL_FSMC_MspInit+0x8c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6393      	str	r3, [r2, #56]	; 0x38
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_FSMC_MspInit+0x8c>)
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001caa:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001cae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <HAL_FSMC_MspInit+0x90>)
 8001cc6:	f002 fad3 	bl	8004270 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001cca:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001cce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4806      	ldr	r0, [pc, #24]	; (8001d00 <HAL_FSMC_MspInit+0x94>)
 8001ce6:	f002 fac3 	bl	8004270 <HAL_GPIO_Init>
 8001cea:	e000      	b.n	8001cee <HAL_FSMC_MspInit+0x82>
    return;
 8001cec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000120 	.word	0x20000120
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40020c00 	.word	0x40020c00

08001d04 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001d0c:	f7ff ffae 	bl	8001c6c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <init_value>:
int number = 0;

uint8_t tempUart[MAX_BUFFER_SIZE] = {0};

void init_value(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
    mode = MODE1;
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <init_value+0x100>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
    mode_alarm = ALARM_MODE1;
 8001d22:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <init_value+0x104>)
 8001d24:	220a      	movs	r2, #10
 8001d26:	601a      	str	r2, [r3, #0]

    statusNORMAL_1 = INIT;
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <init_value+0x108>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
    statusNORMAL_2 = INIT;
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <init_value+0x10c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    statusSEC_1 = INIT;
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <init_value+0x110>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
    statusSEC_2 = INIT;
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <init_value+0x114>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    statusSEC_3 = INIT;
 8001d40:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <init_value+0x118>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

    statusMIN_1 = INIT;
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <init_value+0x11c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
    statusMIN_2 = INIT;
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <init_value+0x120>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    statusMIN_3 = INIT;
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <init_value+0x124>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

    statusHOUR_1 = INIT;
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <init_value+0x128>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    statusHOUR_2 = INIT;
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <init_value+0x12c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
    statusHOUR_3 = INIT;
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <init_value+0x130>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

    statusDAY_1 = INIT;
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <init_value+0x134>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
    statusDAY_2 = INIT;
 8001d70:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <init_value+0x138>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    statusDAY_3 = INIT;
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <init_value+0x13c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

    statusDATE_1 = INIT;
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <init_value+0x140>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
    statusDATE_2 = INIT;
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <init_value+0x144>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
    statusDATE_3 = INIT;
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <init_value+0x148>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

    statusMONTH_1 = INIT;
 8001d8e:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <init_value+0x14c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
    statusMONTH_2 = INIT;
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <init_value+0x150>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
    statusMONTH_3 = INIT;
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <init_value+0x154>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

    statusYEAR_1 = INIT;
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <init_value+0x158>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    statusYEAR_2 = INIT;
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <init_value+0x15c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
    statusYEAR_3 = INIT;
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <init_value+0x160>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

    statusHOUR_ALARM_1 = INIT;
 8001db2:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <init_value+0x164>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    statusHOUR_ALARM_2 = INIT;
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <init_value+0x168>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
    statusHOUR_ALARM_3 = INIT;
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <init_value+0x16c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

    statusMIN_ALARM_1 = INIT;
 8001dc4:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <init_value+0x170>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    statusMIN_ALARM_2 = INIT;
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <init_value+0x174>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
    statusMIN_ALARM_3 = INIT;
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <init_value+0x178>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

    counter_blink1 = INIT;
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <init_value+0x17c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
    counter_blink2 = INIT;
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <init_value+0x180>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]

    counter_alert1 = INIT;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <init_value+0x184>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    counter_alert2 = INIT;
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <init_value+0x188>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]

    counter_uartAlert = 0;
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <init_value+0x18c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
    counterTimeOut = 0;
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <init_value+0x190>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    flag_TimeOut = 0;
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <init_value+0x194>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

    isSendStr = 0;
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <init_value+0x198>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
    flag_Error = 0;
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <init_value+0x19c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000019c 	.word	0x2000019c
 8001e1c:	200001a0 	.word	0x200001a0
 8001e20:	20000124 	.word	0x20000124
 8001e24:	20000128 	.word	0x20000128
 8001e28:	2000012c 	.word	0x2000012c
 8001e2c:	20000130 	.word	0x20000130
 8001e30:	20000134 	.word	0x20000134
 8001e34:	20000138 	.word	0x20000138
 8001e38:	2000013c 	.word	0x2000013c
 8001e3c:	20000140 	.word	0x20000140
 8001e40:	20000144 	.word	0x20000144
 8001e44:	20000148 	.word	0x20000148
 8001e48:	2000014c 	.word	0x2000014c
 8001e4c:	20000150 	.word	0x20000150
 8001e50:	20000154 	.word	0x20000154
 8001e54:	20000158 	.word	0x20000158
 8001e58:	2000015c 	.word	0x2000015c
 8001e5c:	20000160 	.word	0x20000160
 8001e60:	20000164 	.word	0x20000164
 8001e64:	20000168 	.word	0x20000168
 8001e68:	2000016c 	.word	0x2000016c
 8001e6c:	20000170 	.word	0x20000170
 8001e70:	20000174 	.word	0x20000174
 8001e74:	20000178 	.word	0x20000178
 8001e78:	2000017c 	.word	0x2000017c
 8001e7c:	20000184 	.word	0x20000184
 8001e80:	20000188 	.word	0x20000188
 8001e84:	2000018c 	.word	0x2000018c
 8001e88:	20000190 	.word	0x20000190
 8001e8c:	20000194 	.word	0x20000194
 8001e90:	20000198 	.word	0x20000198
 8001e94:	200001ad 	.word	0x200001ad
 8001e98:	200001ae 	.word	0x200001ae
 8001e9c:	200001af 	.word	0x200001af
 8001ea0:	200001b0 	.word	0x200001b0
 8001ea4:	200001c1 	.word	0x200001c1
 8001ea8:	200001c0 	.word	0x200001c0
 8001eac:	200001c4 	.word	0x200001c4
 8001eb0:	200001b4 	.word	0x200001b4
 8001eb4:	200001c8 	.word	0x200001c8

08001eb8 <init_counter>:

void init_counter(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
    counterSec = ds3231_sec;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <init_counter+0x48>)
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <init_counter+0x4c>)
 8001ec2:	701a      	strb	r2, [r3, #0]
    counterMin = ds3231_min;
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <init_counter+0x50>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <init_counter+0x54>)
 8001eca:	701a      	strb	r2, [r3, #0]
    counterHour = ds3231_hours;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <init_counter+0x58>)
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <init_counter+0x5c>)
 8001ed2:	701a      	strb	r2, [r3, #0]
    counterDay = ds3231_day;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <init_counter+0x60>)
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <init_counter+0x64>)
 8001eda:	701a      	strb	r2, [r3, #0]
    counterDate = ds3231_date;
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <init_counter+0x68>)
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <init_counter+0x6c>)
 8001ee2:	701a      	strb	r2, [r3, #0]
    counterMonth = ds3231_month;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <init_counter+0x70>)
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <init_counter+0x74>)
 8001eea:	701a      	strb	r2, [r3, #0]
    counterYear = ds3231_year;
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <init_counter+0x78>)
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <init_counter+0x7c>)
 8001ef2:	701a      	strb	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	200000c8 	.word	0x200000c8
 8001f04:	200001a4 	.word	0x200001a4
 8001f08:	200000c7 	.word	0x200000c7
 8001f0c:	200001a5 	.word	0x200001a5
 8001f10:	200000c6 	.word	0x200000c6
 8001f14:	200001a6 	.word	0x200001a6
 8001f18:	200000ca 	.word	0x200000ca
 8001f1c:	200001a7 	.word	0x200001a7
 8001f20:	200000c9 	.word	0x200000c9
 8001f24:	200001a8 	.word	0x200001a8
 8001f28:	200000cb 	.word	0x200000cb
 8001f2c:	200001a9 	.word	0x200001a9
 8001f30:	200000cc 	.word	0x200000cc
 8001f34:	200001aa 	.word	0x200001aa

08001f38 <init_counter_alarm>:

void init_counter_alarm(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
    counterHour_Alarm = ds3231_alarm_hour;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <init_counter_alarm+0x20>)
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <init_counter_alarm+0x24>)
 8001f42:	701a      	strb	r2, [r3, #0]
    counterMin_Alarm = ds3231_alarm_min;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <init_counter_alarm+0x28>)
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <init_counter_alarm+0x2c>)
 8001f4a:	701a      	strb	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	200000cd 	.word	0x200000cd
 8001f5c:	200001ab 	.word	0x200001ab
 8001f60:	200000ce 	.word	0x200000ce
 8001f64:	200001ac 	.word	0x200001ac

08001f68 <blinky>:

void blinky(int unit)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af04      	add	r7, sp, #16
 8001f6e:	6078      	str	r0, [r7, #4]

    counter_blink1 = (counter_blink1 + 1) % 5;
 8001f70:	4b97      	ldr	r3, [pc, #604]	; (80021d0 <blinky+0x268>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	4b97      	ldr	r3, [pc, #604]	; (80021d4 <blinky+0x26c>)
 8001f78:	fb83 1302 	smull	r1, r3, r3, r2
 8001f7c:	1059      	asrs	r1, r3, #1
 8001f7e:	17d3      	asrs	r3, r2, #31
 8001f80:	1ac9      	subs	r1, r1, r3
 8001f82:	460b      	mov	r3, r1
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	1ad1      	subs	r1, r2, r3
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	4b90      	ldr	r3, [pc, #576]	; (80021d0 <blinky+0x268>)
 8001f8e:	701a      	strb	r2, [r3, #0]
    counter_blink2 = (counter_blink2 + 1) % 10;
 8001f90:	4b91      	ldr	r3, [pc, #580]	; (80021d8 <blinky+0x270>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	4b8f      	ldr	r3, [pc, #572]	; (80021d4 <blinky+0x26c>)
 8001f98:	fb83 1302 	smull	r1, r3, r3, r2
 8001f9c:	1099      	asrs	r1, r3, #2
 8001f9e:	17d3      	asrs	r3, r2, #31
 8001fa0:	1ac9      	subs	r1, r1, r3
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	1ad1      	subs	r1, r2, r3
 8001fac:	b2ca      	uxtb	r2, r1
 8001fae:	4b8a      	ldr	r3, [pc, #552]	; (80021d8 <blinky+0x270>)
 8001fb0:	701a      	strb	r2, [r3, #0]
    if (unit == HOUR)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d122      	bne.n	8001ffe <blinky+0x96>
    {
        if (counter_blink1 == 0)
 8001fb8:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <blinky+0x268>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10e      	bne.n	8001fde <blinky+0x76>
        {
            lcd_ShowIntNum(70, 100, counterHour, 2, GREEN, BLACK, 24);
 8001fc0:	4b86      	ldr	r3, [pc, #536]	; (80021dc <blinky+0x274>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	2318      	movs	r3, #24
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	2164      	movs	r1, #100	; 0x64
 8001fd8:	2046      	movs	r0, #70	; 0x46
 8001fda:	f000 feb5 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 8001fde:	4b7e      	ldr	r3, [pc, #504]	; (80021d8 <blinky+0x270>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <blinky+0x96>
        {
            lcd_ShowIntNum(70, 100, 0, 2, BLACK, BLACK, 24);
 8001fe6:	2318      	movs	r3, #24
 8001fe8:	9302      	str	r3, [sp, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2164      	movs	r1, #100	; 0x64
 8001ff8:	2046      	movs	r0, #70	; 0x46
 8001ffa:	f000 fea5 	bl	8002d48 <lcd_ShowIntNum>
            // lcd_Clear(BLACK);
        }
    }
    if (unit == MIN)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d122      	bne.n	800204a <blinky+0xe2>
    {
        if (counter_blink1 == 0)
 8002004:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <blinky+0x268>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10e      	bne.n	800202a <blinky+0xc2>
        {
            lcd_ShowIntNum(110, 100, counterMin, 2, GREEN, BLACK, 24);
 800200c:	4b74      	ldr	r3, [pc, #464]	; (80021e0 <blinky+0x278>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b29a      	uxth	r2, r3
 8002012:	2318      	movs	r3, #24
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2300      	movs	r3, #0
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2302      	movs	r3, #2
 8002022:	2164      	movs	r1, #100	; 0x64
 8002024:	206e      	movs	r0, #110	; 0x6e
 8002026:	f000 fe8f 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 800202a:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <blinky+0x270>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10b      	bne.n	800204a <blinky+0xe2>
        {
            lcd_ShowIntNum(110, 100, 0, 2, BLACK, BLACK, 24);
 8002032:	2318      	movs	r3, #24
 8002034:	9302      	str	r3, [sp, #8]
 8002036:	2300      	movs	r3, #0
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2302      	movs	r3, #2
 8002040:	2200      	movs	r2, #0
 8002042:	2164      	movs	r1, #100	; 0x64
 8002044:	206e      	movs	r0, #110	; 0x6e
 8002046:	f000 fe7f 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
    if (unit == SEC)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d122      	bne.n	8002096 <blinky+0x12e>
    {
        if (counter_blink1 == 0)
 8002050:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <blinky+0x268>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10e      	bne.n	8002076 <blinky+0x10e>
        {
            lcd_ShowIntNum(150, 100, counterSec, 2, GREEN, BLACK, 24);
 8002058:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <blinky+0x27c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b29a      	uxth	r2, r3
 800205e:	2318      	movs	r3, #24
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	2300      	movs	r3, #0
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2302      	movs	r3, #2
 800206e:	2164      	movs	r1, #100	; 0x64
 8002070:	2096      	movs	r0, #150	; 0x96
 8002072:	f000 fe69 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 8002076:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <blinky+0x270>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <blinky+0x12e>
        {
            lcd_ShowIntNum(150, 100, 0, 2, BLACK, BLACK, 24);
 800207e:	2318      	movs	r3, #24
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	2300      	movs	r3, #0
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2302      	movs	r3, #2
 800208c:	2200      	movs	r2, #0
 800208e:	2164      	movs	r1, #100	; 0x64
 8002090:	2096      	movs	r0, #150	; 0x96
 8002092:	f000 fe59 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
    if (unit == DAY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d122      	bne.n	80020e2 <blinky+0x17a>
    {
        if (counter_blink1 == 0)
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <blinky+0x268>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10e      	bne.n	80020c2 <blinky+0x15a>
        {
            lcd_ShowIntNum(20, 130, counterDay, 2, YELLOW, BLACK, 24);
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <blinky+0x280>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	2318      	movs	r3, #24
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2302      	movs	r3, #2
 80020ba:	2182      	movs	r1, #130	; 0x82
 80020bc:	2014      	movs	r0, #20
 80020be:	f000 fe43 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 80020c2:	4b45      	ldr	r3, [pc, #276]	; (80021d8 <blinky+0x270>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10b      	bne.n	80020e2 <blinky+0x17a>
        {
            lcd_ShowIntNum(20, 130, 0, 2, BLACK, BLACK, 24);
 80020ca:	2318      	movs	r3, #24
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2302      	movs	r3, #2
 80020d8:	2200      	movs	r2, #0
 80020da:	2182      	movs	r1, #130	; 0x82
 80020dc:	2014      	movs	r0, #20
 80020de:	f000 fe33 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
    if (unit == DATE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d122      	bne.n	800212e <blinky+0x1c6>
    {
        if (counter_blink1 == 0)
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <blinky+0x268>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10e      	bne.n	800210e <blinky+0x1a6>
        {
            lcd_ShowIntNum(70, 130, counterDate, 2, YELLOW, BLACK, 24);
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <blinky+0x284>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	2318      	movs	r3, #24
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2302      	movs	r3, #2
 8002106:	2182      	movs	r1, #130	; 0x82
 8002108:	2046      	movs	r0, #70	; 0x46
 800210a:	f000 fe1d 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <blinky+0x270>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <blinky+0x1c6>
        {
            lcd_ShowIntNum(70, 130, 0, 2, BLACK, BLACK, 24);
 8002116:	2318      	movs	r3, #24
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	2300      	movs	r3, #0
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	2300      	movs	r3, #0
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2302      	movs	r3, #2
 8002124:	2200      	movs	r2, #0
 8002126:	2182      	movs	r1, #130	; 0x82
 8002128:	2046      	movs	r0, #70	; 0x46
 800212a:	f000 fe0d 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
    if (unit == MONTH)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d122      	bne.n	800217a <blinky+0x212>
    {
        if (counter_blink1 == 0)
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <blinky+0x268>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10e      	bne.n	800215a <blinky+0x1f2>
        {
            lcd_ShowIntNum(110, 130, counterMonth, 2, YELLOW, BLACK, 24);
 800213c:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <blinky+0x288>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b29a      	uxth	r2, r3
 8002142:	2318      	movs	r3, #24
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2300      	movs	r3, #0
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2302      	movs	r3, #2
 8002152:	2182      	movs	r1, #130	; 0x82
 8002154:	206e      	movs	r0, #110	; 0x6e
 8002156:	f000 fdf7 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <blinky+0x270>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10b      	bne.n	800217a <blinky+0x212>
        {
            lcd_ShowIntNum(110, 130, 0, 2, BLACK, BLACK, 24);
 8002162:	2318      	movs	r3, #24
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	2300      	movs	r3, #0
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2302      	movs	r3, #2
 8002170:	2200      	movs	r2, #0
 8002172:	2182      	movs	r1, #130	; 0x82
 8002174:	206e      	movs	r0, #110	; 0x6e
 8002176:	f000 fde7 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
    if (unit == YEAR)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b07      	cmp	r3, #7
 800217e:	d122      	bne.n	80021c6 <blinky+0x25e>
    {
        if (counter_blink1 == 0)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <blinky+0x268>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <blinky+0x23e>
        {
            lcd_ShowIntNum(150, 130, counterYear, 2, YELLOW, BLACK, 24);
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <blinky+0x28c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b29a      	uxth	r2, r3
 800218e:	2318      	movs	r3, #24
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	2300      	movs	r3, #0
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2302      	movs	r3, #2
 800219e:	2182      	movs	r1, #130	; 0x82
 80021a0:	2096      	movs	r0, #150	; 0x96
 80021a2:	f000 fdd1 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <blinky+0x270>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10b      	bne.n	80021c6 <blinky+0x25e>
        {
            lcd_ShowIntNum(150, 130, 0, 2, BLACK, BLACK, 24);
 80021ae:	2318      	movs	r3, #24
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2300      	movs	r3, #0
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2302      	movs	r3, #2
 80021bc:	2200      	movs	r2, #0
 80021be:	2182      	movs	r1, #130	; 0x82
 80021c0:	2096      	movs	r0, #150	; 0x96
 80021c2:	f000 fdc1 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200001ad 	.word	0x200001ad
 80021d4:	66666667 	.word	0x66666667
 80021d8:	200001ae 	.word	0x200001ae
 80021dc:	200001a6 	.word	0x200001a6
 80021e0:	200001a5 	.word	0x200001a5
 80021e4:	200001a4 	.word	0x200001a4
 80021e8:	200001a7 	.word	0x200001a7
 80021ec:	200001a8 	.word	0x200001a8
 80021f0:	200001a9 	.word	0x200001a9
 80021f4:	200001aa 	.word	0x200001aa

080021f8 <blinkyAlarm>:

void blinkyAlarm(int unit)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	6078      	str	r0, [r7, #4]
    counter_alert1 = (counter_alert1 + 1) % 5;
 8002200:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <blinkyAlarm+0xe8>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <blinkyAlarm+0xec>)
 8002208:	fb83 1302 	smull	r1, r3, r3, r2
 800220c:	1059      	asrs	r1, r3, #1
 800220e:	17d3      	asrs	r3, r2, #31
 8002210:	1ac9      	subs	r1, r1, r3
 8002212:	460b      	mov	r3, r1
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	1ad1      	subs	r1, r2, r3
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <blinkyAlarm+0xe8>)
 800221e:	701a      	strb	r2, [r3, #0]
    counter_alert2 = (counter_alert2 + 1) % 10;
 8002220:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <blinkyAlarm+0xf0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <blinkyAlarm+0xec>)
 8002228:	fb83 1302 	smull	r1, r3, r3, r2
 800222c:	1099      	asrs	r1, r3, #2
 800222e:	17d3      	asrs	r3, r2, #31
 8002230:	1ac9      	subs	r1, r1, r3
 8002232:	460b      	mov	r3, r1
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	1ad1      	subs	r1, r2, r3
 800223c:	b2ca      	uxtb	r2, r1
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <blinkyAlarm+0xf0>)
 8002240:	701a      	strb	r2, [r3, #0]
    if (unit == HOUR_A)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0a      	cmp	r3, #10
 8002246:	d121      	bne.n	800228c <blinkyAlarm+0x94>
    {
        if (counter_alert1 == 0)
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <blinkyAlarm+0xe8>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10d      	bne.n	800226c <blinkyAlarm+0x74>
        {
            lcd_ShowIntNum(70, 200, counterHour_Alarm, 2, BLUE, BLACK, 24);
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <blinkyAlarm+0xf4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	2318      	movs	r3, #24
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	2300      	movs	r3, #0
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	231f      	movs	r3, #31
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2302      	movs	r3, #2
 8002264:	21c8      	movs	r1, #200	; 0xc8
 8002266:	2046      	movs	r0, #70	; 0x46
 8002268:	f000 fd6e 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_alert2 == 0)
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <blinkyAlarm+0xf0>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <blinkyAlarm+0x94>
        {
            lcd_ShowIntNum(70, 200, 0, 2, BLACK, BLACK, 24);
 8002274:	2318      	movs	r3, #24
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2300      	movs	r3, #0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2302      	movs	r3, #2
 8002282:	2200      	movs	r2, #0
 8002284:	21c8      	movs	r1, #200	; 0xc8
 8002286:	2046      	movs	r0, #70	; 0x46
 8002288:	f000 fd5e 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
    if (unit == MIN_A)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b0b      	cmp	r3, #11
 8002290:	d121      	bne.n	80022d6 <blinkyAlarm+0xde>
    {
        if (counter_alert1 == 0)
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <blinkyAlarm+0xe8>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <blinkyAlarm+0xbe>
        {
            lcd_ShowIntNum(110, 200, counterMin_Alarm, 2, BLUE, BLACK, 24);
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <blinkyAlarm+0xf8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2318      	movs	r3, #24
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2300      	movs	r3, #0
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	231f      	movs	r3, #31
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2302      	movs	r3, #2
 80022ae:	21c8      	movs	r1, #200	; 0xc8
 80022b0:	206e      	movs	r0, #110	; 0x6e
 80022b2:	f000 fd49 	bl	8002d48 <lcd_ShowIntNum>
        }
        if (counter_alert2 == 0)
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <blinkyAlarm+0xf0>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <blinkyAlarm+0xde>
        {
            lcd_ShowIntNum(110, 200, 0, 2, BLACK, BLACK, 24);
 80022be:	2318      	movs	r3, #24
 80022c0:	9302      	str	r3, [sp, #8]
 80022c2:	2300      	movs	r3, #0
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	2300      	movs	r3, #0
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2302      	movs	r3, #2
 80022cc:	2200      	movs	r2, #0
 80022ce:	21c8      	movs	r1, #200	; 0xc8
 80022d0:	206e      	movs	r0, #110	; 0x6e
 80022d2:	f000 fd39 	bl	8002d48 <lcd_ShowIntNum>
        }
    }
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200001af 	.word	0x200001af
 80022e4:	66666667 	.word	0x66666667
 80022e8:	200001b0 	.word	0x200001b0
 80022ec:	200001ab 	.word	0x200001ab
 80022f0:	200001ac 	.word	0x200001ac

080022f4 <displayTime>:

void displayTime()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af04      	add	r7, sp, #16
    lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80022fa:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <displayTime+0xe0>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2318      	movs	r3, #24
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2300      	movs	r3, #0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2302      	movs	r3, #2
 8002310:	2164      	movs	r1, #100	; 0x64
 8002312:	2046      	movs	r0, #70	; 0x46
 8002314:	f000 fd18 	bl	8002d48 <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <displayTime+0xe4>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b29a      	uxth	r2, r3
 800231e:	2318      	movs	r3, #24
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	2300      	movs	r3, #0
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2302      	movs	r3, #2
 800232e:	2164      	movs	r1, #100	; 0x64
 8002330:	206e      	movs	r0, #110	; 0x6e
 8002332:	f000 fd09 	bl	8002d48 <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002336:	4b29      	ldr	r3, [pc, #164]	; (80023dc <displayTime+0xe8>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2318      	movs	r3, #24
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2300      	movs	r3, #0
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2302      	movs	r3, #2
 800234c:	2164      	movs	r1, #100	; 0x64
 800234e:	2096      	movs	r0, #150	; 0x96
 8002350:	f000 fcfa 	bl	8002d48 <lcd_ShowIntNum>
    lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <displayTime+0xec>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	b29a      	uxth	r2, r3
 800235a:	2318      	movs	r3, #24
 800235c:	9302      	str	r3, [sp, #8]
 800235e:	2300      	movs	r3, #0
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2302      	movs	r3, #2
 800236a:	2182      	movs	r1, #130	; 0x82
 800236c:	2014      	movs	r0, #20
 800236e:	f000 fceb 	bl	8002d48 <lcd_ShowIntNum>
    lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <displayTime+0xf0>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b29a      	uxth	r2, r3
 8002378:	2318      	movs	r3, #24
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2300      	movs	r3, #0
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2302      	movs	r3, #2
 8002388:	2182      	movs	r1, #130	; 0x82
 800238a:	2046      	movs	r0, #70	; 0x46
 800238c:	f000 fcdc 	bl	8002d48 <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <displayTime+0xf4>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b29a      	uxth	r2, r3
 8002396:	2318      	movs	r3, #24
 8002398:	9302      	str	r3, [sp, #8]
 800239a:	2300      	movs	r3, #0
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2302      	movs	r3, #2
 80023a6:	2182      	movs	r1, #130	; 0x82
 80023a8:	206e      	movs	r0, #110	; 0x6e
 80023aa:	f000 fccd 	bl	8002d48 <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <displayTime+0xf8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2318      	movs	r3, #24
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2302      	movs	r3, #2
 80023c4:	2182      	movs	r1, #130	; 0x82
 80023c6:	2096      	movs	r0, #150	; 0x96
 80023c8:	f000 fcbe 	bl	8002d48 <lcd_ShowIntNum>
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200000c6 	.word	0x200000c6
 80023d8:	200000c7 	.word	0x200000c7
 80023dc:	200000c8 	.word	0x200000c8
 80023e0:	200000ca 	.word	0x200000ca
 80023e4:	200000c9 	.word	0x200000c9
 80023e8:	200000cb 	.word	0x200000cb
 80023ec:	200000cc 	.word	0x200000cc

080023f0 <updateTime>:

void updateTime()
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_YEAR, 23);
 80023f4:	2117      	movs	r1, #23
 80023f6:	2006      	movs	r0, #6
 80023f8:	f7fe f93c 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MONTH, 10);
 80023fc:	210a      	movs	r1, #10
 80023fe:	2005      	movs	r0, #5
 8002400:	f7fe f938 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DATE, 15);
 8002404:	210f      	movs	r1, #15
 8002406:	2004      	movs	r0, #4
 8002408:	f7fe f934 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DAY, 6);
 800240c:	2106      	movs	r1, #6
 800240e:	2003      	movs	r0, #3
 8002410:	f7fe f930 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_HOUR, 15);
 8002414:	210f      	movs	r1, #15
 8002416:	2002      	movs	r0, #2
 8002418:	f7fe f92c 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN, 30);
 800241c:	211e      	movs	r1, #30
 800241e:	2001      	movs	r0, #1
 8002420:	f7fe f928 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_SEC, 35);
 8002424:	2123      	movs	r1, #35	; 0x23
 8002426:	2000      	movs	r0, #0
 8002428:	f7fe f924 	bl	8000674 <ds3231_Write>
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <displayAlarm>:

void displayAlarm(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af04      	add	r7, sp, #16
    lcd_ShowIntNum(70, 200, ds3231_alarm_hour, 2, BLUE, BLACK, 24);
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <displayAlarm+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b29a      	uxth	r2, r3
 800243c:	2318      	movs	r3, #24
 800243e:	9302      	str	r3, [sp, #8]
 8002440:	2300      	movs	r3, #0
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	231f      	movs	r3, #31
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2302      	movs	r3, #2
 800244a:	21c8      	movs	r1, #200	; 0xc8
 800244c:	2046      	movs	r0, #70	; 0x46
 800244e:	f000 fc7b 	bl	8002d48 <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 200, ds3231_alarm_min, 2, BLUE, BLACK, 24);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <displayAlarm+0x48>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b29a      	uxth	r2, r3
 8002458:	2318      	movs	r3, #24
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	231f      	movs	r3, #31
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2302      	movs	r3, #2
 8002466:	21c8      	movs	r1, #200	; 0xc8
 8002468:	206e      	movs	r0, #110	; 0x6e
 800246a:	f000 fc6d 	bl	8002d48 <lcd_ShowIntNum>
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200000cd 	.word	0x200000cd
 8002478:	200000ce 	.word	0x200000ce

0800247c <updateAlarm>:

void updateAlarm(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_HOUR_ALARM, 0);
 8002480:	2100      	movs	r1, #0
 8002482:	2009      	movs	r0, #9
 8002484:	f7fe f8f6 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN_ALARM, 0);
 8002488:	2100      	movs	r1, #0
 800248a:	2008      	movs	r0, #8
 800248c:	f7fe f8f2 	bl	8000674 <ds3231_Write>
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <alert>:

void alert(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
    counter_alert1 = (counter_alert1 + 1) % 5;
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <alert+0x68>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <alert+0x6c>)
 80024a0:	fb83 1302 	smull	r1, r3, r3, r2
 80024a4:	1059      	asrs	r1, r3, #1
 80024a6:	17d3      	asrs	r3, r2, #31
 80024a8:	1ac9      	subs	r1, r1, r3
 80024aa:	460b      	mov	r3, r1
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	1ad1      	subs	r1, r2, r3
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <alert+0x68>)
 80024b6:	701a      	strb	r2, [r3, #0]
    counter_alert2 = (counter_alert2 + 1) % 10;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <alert+0x70>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <alert+0x6c>)
 80024c0:	fb83 1302 	smull	r1, r3, r3, r2
 80024c4:	1099      	asrs	r1, r3, #2
 80024c6:	17d3      	asrs	r3, r2, #31
 80024c8:	1ac9      	subs	r1, r1, r3
 80024ca:	460b      	mov	r3, r1
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	1ad1      	subs	r1, r2, r3
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <alert+0x70>)
 80024d8:	701a      	strb	r2, [r3, #0]
    if (counter_alert1 == 0)
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <alert+0x68>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <alert+0x56>
    {
        lcd_Clear(RED);
 80024e2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80024e6:	f000 fabb 	bl	8002a60 <lcd_Clear>
    }
    if (counter_alert2 == 0)
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <alert+0x70>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <alert+0x64>
    {
        lcd_Clear(BLACK);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 fab4 	bl	8002a60 <lcd_Clear>
    }
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200001af 	.word	0x200001af
 8002500:	66666667 	.word	0x66666667
 8002504:	200001b0 	.word	0x200001b0

08002508 <save_ClockSettings>:

void save_ClockSettings(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_YEAR, counterYear);
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <save_ClockSettings+0x5c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	2006      	movs	r0, #6
 8002514:	f7fe f8ae 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MONTH, counterMonth);
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <save_ClockSettings+0x60>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	2005      	movs	r0, #5
 8002520:	f7fe f8a8 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DATE, counterDate);
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <save_ClockSettings+0x64>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	2004      	movs	r0, #4
 800252c:	f7fe f8a2 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DAY, counterDay);
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <save_ClockSettings+0x68>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	2003      	movs	r0, #3
 8002538:	f7fe f89c 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_SEC, counterSec);
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <save_ClockSettings+0x6c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe f896 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN, counterMin);
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <save_ClockSettings+0x70>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	2001      	movs	r0, #1
 8002550:	f7fe f890 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_HOUR, counterHour);
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <save_ClockSettings+0x74>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	2002      	movs	r0, #2
 800255c:	f7fe f88a 	bl	8000674 <ds3231_Write>
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200001aa 	.word	0x200001aa
 8002568:	200001a9 	.word	0x200001a9
 800256c:	200001a8 	.word	0x200001a8
 8002570:	200001a7 	.word	0x200001a7
 8002574:	200001a4 	.word	0x200001a4
 8002578:	200001a5 	.word	0x200001a5
 800257c:	200001a6 	.word	0x200001a6

08002580 <save_AlarmSettings>:

void save_AlarmSettings(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <save_AlarmSettings+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	2009      	movs	r0, #9
 800258c:	f7fe f872 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <save_AlarmSettings+0x24>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	2008      	movs	r0, #8
 8002598:	f7fe f86c 	bl	8000674 <ds3231_Write>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200001ab 	.word	0x200001ab
 80025a4:	200001ac 	.word	0x200001ac

080025a8 <error_Input>:

void error_Input(int flag_num)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	6078      	str	r0, [r7, #4]
    if (flag_num != 1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d027      	beq.n	8002606 <error_Input+0x5e>
    {
        lcd_StrCenter(0, 270, "ERROR!!!", GREEN, BLACK, 16, 1);
 80025b6:	2301      	movs	r3, #1
 80025b8:	9302      	str	r3, [sp, #8]
 80025ba:	2310      	movs	r3, #16
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <error_Input+0x6c>)
 80025c8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80025cc:	2000      	movs	r0, #0
 80025ce:	f000 fe21 	bl	8003214 <lcd_StrCenter>
        counter_uartAlert = (counter_uartAlert + 1) % 60;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <error_Input+0x70>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <error_Input+0x74>)
 80025da:	fb83 1302 	smull	r1, r3, r3, r2
 80025de:	4413      	add	r3, r2
 80025e0:	1159      	asrs	r1, r3, #5
 80025e2:	17d3      	asrs	r3, r2, #31
 80025e4:	1ac9      	subs	r1, r1, r3
 80025e6:	460b      	mov	r3, r1
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a5b      	subs	r3, r3, r1
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	1ad1      	subs	r1, r2, r3
 80025f0:	b2ca      	uxtb	r2, r1
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <error_Input+0x70>)
 80025f4:	701a      	strb	r2, [r3, #0]
        if (counter_uartAlert == 0)
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <error_Input+0x70>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <error_Input+0x64>
        {
            flag_Error = flag_num;
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <error_Input+0x78>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6013      	str	r3, [r2, #0]
            return;
 8002604:	e002      	b.n	800260c <error_Input+0x64>
        }
    }
    else
        flag_Error = flag_num;
 8002606:	4a06      	ldr	r2, [pc, #24]	; (8002620 <error_Input+0x78>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	08009250 	.word	0x08009250
 8002618:	200001c1 	.word	0x200001c1
 800261c:	88888889 	.word	0x88888889
 8002620:	200001c8 	.word	0x200001c8

08002624 <uart_Flag>:

void uart_Flag(char *str)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    counterTimeOut = (counterTimeOut + 1) % 200;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <uart_Flag+0x58>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	4a13      	ldr	r2, [pc, #76]	; (8002680 <uart_Flag+0x5c>)
 8002634:	fb82 1203 	smull	r1, r2, r2, r3
 8002638:	1191      	asrs	r1, r2, #6
 800263a:	17da      	asrs	r2, r3, #31
 800263c:	1a8a      	subs	r2, r1, r2
 800263e:	21c8      	movs	r1, #200	; 0xc8
 8002640:	fb01 f202 	mul.w	r2, r1, r2
 8002644:	1a9a      	subs	r2, r3, r2
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <uart_Flag+0x58>)
 800264a:	701a      	strb	r2, [r3, #0]
    if (counterTimeOut == 0)
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <uart_Flag+0x58>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <uart_Flag+0x40>
    {
        flag_TimeOut++;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <uart_Flag+0x60>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <uart_Flag+0x60>)
 800265c:	6013      	str	r3, [r2, #0]
        uart_Rs232SendString(str);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f001 f992 	bl	8003988 <uart_Rs232SendString>
    }
    if (flag_TimeOut == 3)
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <uart_Flag+0x60>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d102      	bne.n	8002672 <uart_Flag+0x4e>
    {
        error_Input(2);
 800266c:	2002      	movs	r0, #2
 800266e:	f7ff ff9b 	bl	80025a8 <error_Input>
    }
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001c0 	.word	0x200001c0
 8002680:	51eb851f 	.word	0x51eb851f
 8002684:	200001c4 	.word	0x200001c4

08002688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026a8:	f043 0310 	orr.w	r3, r3, #16
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	4b68      	ldr	r3, [pc, #416]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a67      	ldr	r2, [pc, #412]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a60      	ldr	r2, [pc, #384]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b5a      	ldr	r3, [pc, #360]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a59      	ldr	r2, [pc, #356]	; (8002860 <MX_GPIO_Init+0x1d8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b57      	ldr	r3, [pc, #348]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a52      	ldr	r2, [pc, #328]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b50      	ldr	r3, [pc, #320]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <MX_GPIO_Init+0x1d8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	4b45      	ldr	r3, [pc, #276]	; (8002860 <MX_GPIO_Init+0x1d8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a44      	ldr	r2, [pc, #272]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b42      	ldr	r3, [pc, #264]	; (8002860 <MX_GPIO_Init+0x1d8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	2170      	movs	r1, #112	; 0x70
 8002766:	483f      	ldr	r0, [pc, #252]	; (8002864 <MX_GPIO_Init+0x1dc>)
 8002768:	f001 ff1e 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002772:	483d      	ldr	r0, [pc, #244]	; (8002868 <MX_GPIO_Init+0x1e0>)
 8002774:	f001 ff18 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	483b      	ldr	r0, [pc, #236]	; (800286c <MX_GPIO_Init+0x1e4>)
 800277e:	f001 ff13 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002788:	4839      	ldr	r0, [pc, #228]	; (8002870 <MX_GPIO_Init+0x1e8>)
 800278a:	f001 ff0d 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800278e:	2200      	movs	r2, #0
 8002790:	2108      	movs	r1, #8
 8002792:	4838      	ldr	r0, [pc, #224]	; (8002874 <MX_GPIO_Init+0x1ec>)
 8002794:	f001 ff08 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8002798:	2370      	movs	r3, #112	; 0x70
 800279a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279c:	2301      	movs	r3, #1
 800279e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	482d      	ldr	r0, [pc, #180]	; (8002864 <MX_GPIO_Init+0x1dc>)
 80027b0:	f001 fd5e 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80027b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ba:	2301      	movs	r3, #1
 80027bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	4826      	ldr	r0, [pc, #152]	; (8002868 <MX_GPIO_Init+0x1e0>)
 80027ce:	f001 fd4f 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80027d2:	23c0      	movs	r3, #192	; 0xc0
 80027d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	4822      	ldr	r0, [pc, #136]	; (8002870 <MX_GPIO_Init+0x1e8>)
 80027e6:	f001 fd43 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80027ea:	2330      	movs	r3, #48	; 0x30
 80027ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	481a      	ldr	r0, [pc, #104]	; (8002868 <MX_GPIO_Init+0x1e0>)
 80027fe:	f001 fd37 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8002802:	2340      	movs	r3, #64	; 0x40
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	2301      	movs	r3, #1
 8002808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	4814      	ldr	r0, [pc, #80]	; (800286c <MX_GPIO_Init+0x1e4>)
 800281a:	f001 fd29 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	2301      	movs	r3, #1
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	480e      	ldr	r0, [pc, #56]	; (8002870 <MX_GPIO_Init+0x1e8>)
 8002838:	f001 fd1a 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800283c:	2308      	movs	r3, #8
 800283e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002840:	2301      	movs	r3, #1
 8002842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	4808      	ldr	r0, [pc, #32]	; (8002874 <MX_GPIO_Init+0x1ec>)
 8002854:	f001 fd0c 	bl	8004270 <HAL_GPIO_Init>

}
 8002858:	bf00      	nop
 800285a:	3730      	adds	r7, #48	; 0x30
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	40021000 	.word	0x40021000
 8002868:	40020800 	.word	0x40020800
 800286c:	40021800 	.word	0x40021800
 8002870:	40020000 	.word	0x40020000
 8002874:	40020c00 	.word	0x40020c00

08002878 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <MX_I2C1_Init+0x50>)
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <MX_I2C1_Init+0x54>)
 8002880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <MX_I2C1_Init+0x50>)
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <MX_I2C1_Init+0x58>)
 8002886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <MX_I2C1_Init+0x50>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <MX_I2C1_Init+0x50>)
 8002890:	2200      	movs	r2, #0
 8002892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_I2C1_Init+0x50>)
 8002896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800289a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <MX_I2C1_Init+0x50>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_I2C1_Init+0x50>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <MX_I2C1_Init+0x50>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MX_I2C1_Init+0x50>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028b4:	4804      	ldr	r0, [pc, #16]	; (80028c8 <MX_I2C1_Init+0x50>)
 80028b6:	f001 feab 	bl	8004610 <HAL_I2C_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028c0:	f000 fe60 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	200001f0 	.word	0x200001f0
 80028cc:	40005400 	.word	0x40005400
 80028d0:	000186a0 	.word	0x000186a0

080028d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_I2C_MspInit+0x84>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d12b      	bne.n	800294e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_I2C_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_I2C_MspInit+0x88>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_I2C_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002912:	23c0      	movs	r3, #192	; 0xc0
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002916:	2312      	movs	r3, #18
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002922:	2304      	movs	r3, #4
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <HAL_I2C_MspInit+0x8c>)
 800292e:	f001 fc9f 	bl	8004270 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_I2C_MspInit+0x88>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <HAL_I2C_MspInit+0x88>)
 800293c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_I2C_MspInit+0x88>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800294e:	bf00      	nop
 8002950:	3728      	adds	r7, #40	; 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40005400 	.word	0x40005400
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400

08002964 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <LCD_WR_REG+0x1c>)
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	8013      	strh	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	600ffffe 	.word	0x600ffffe

08002984 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <LCD_WR_DATA+0x1c>)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	8053      	strh	r3, [r2, #2]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	600ffffe 	.word	0x600ffffe

080029a4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <LCD_RD_DATA+0x20>)
 80029ac:	885b      	ldrh	r3, [r3, #2]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	b29b      	uxth	r3, r3
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	600ffffe 	.word	0x600ffffe

080029c8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4604      	mov	r4, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	80fb      	strh	r3, [r7, #6]
 80029da:	4603      	mov	r3, r0
 80029dc:	80bb      	strh	r3, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]
 80029e2:	4613      	mov	r3, r2
 80029e4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80029e6:	202a      	movs	r0, #42	; 0x2a
 80029e8:	f7ff ffbc 	bl	8002964 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ffc6 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ffc0 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ffba 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ffb4 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8002a1c:	202b      	movs	r0, #43	; 0x2b
 8002a1e:	f7ff ffa1 	bl	8002964 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ffab 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8002a2e:	88bb      	ldrh	r3, [r7, #4]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ffa5 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8002a3a:	883b      	ldrh	r3, [r7, #0]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff9f 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002a46:	883b      	ldrh	r3, [r7, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff99 	bl	8002984 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002a52:	202c      	movs	r0, #44	; 0x2c
 8002a54:	f7ff ff86 	bl	8002964 <LCD_WR_REG>
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <lcd_Clear+0x70>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <lcd_Clear+0x70>)
 8002a84:	885b      	ldrh	r3, [r3, #2]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7ff ff9b 	bl	80029c8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	81fb      	strh	r3, [r7, #14]
 8002a96:	e011      	b.n	8002abc <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	81bb      	strh	r3, [r7, #12]
 8002a9c:	e006      	b.n	8002aac <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff6f 	bl	8002984 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	81bb      	strh	r3, [r7, #12]
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <lcd_Clear+0x70>)
 8002aae:	885b      	ldrh	r3, [r3, #2]
 8002ab0:	89ba      	ldrh	r2, [r7, #12]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d3f3      	bcc.n	8002a9e <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	81fb      	strh	r3, [r7, #14]
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <lcd_Clear+0x70>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	89fa      	ldrh	r2, [r7, #14]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3e8      	bcc.n	8002a98 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000244 	.word	0x20000244

08002ad4 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4604      	mov	r4, r0
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	80fb      	strh	r3, [r7, #6]
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80bb      	strh	r3, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	807b      	strh	r3, [r7, #2]
 8002aee:	4613      	mov	r3, r2
 8002af0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	883b      	ldrh	r3, [r7, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	88b9      	ldrh	r1, [r7, #4]
 8002b00:	88f8      	ldrh	r0, [r7, #6]
 8002b02:	f7ff ff61 	bl	80029c8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002b06:	88bb      	ldrh	r3, [r7, #4]
 8002b08:	81fb      	strh	r3, [r7, #14]
 8002b0a:	e010      	b.n	8002b2e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	81bb      	strh	r3, [r7, #12]
 8002b10:	e006      	b.n	8002b20 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002b12:	8c3b      	ldrh	r3, [r7, #32]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff35 	bl	8002984 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8002b1a:	89bb      	ldrh	r3, [r7, #12]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	81bb      	strh	r3, [r7, #12]
 8002b20:	89ba      	ldrh	r2, [r7, #12]
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3f4      	bcc.n	8002b12 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002b28:	89fb      	ldrh	r3, [r7, #14]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	81fb      	strh	r3, [r7, #14]
 8002b2e:	89fa      	ldrh	r2, [r7, #14]
 8002b30:	883b      	ldrh	r3, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d3ea      	bcc.n	8002b0c <lcd_Fill+0x38>
		}
	}
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd90      	pop	{r4, r7, pc}

08002b40 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	80bb      	strh	r3, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002b52:	88bb      	ldrh	r3, [r7, #4]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	88b9      	ldrh	r1, [r7, #4]
 8002b58:	88f8      	ldrh	r0, [r7, #6]
 8002b5a:	f7ff ff35 	bl	80029c8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff0f 	bl	8002984 <LCD_WR_DATA>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4604      	mov	r4, r0
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4623      	mov	r3, r4
 8002b80:	80fb      	strh	r3, [r7, #6]
 8002b82:	4603      	mov	r3, r0
 8002b84:	80bb      	strh	r3, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	70fb      	strb	r3, [r7, #3]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002b96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	08db      	lsrs	r3, r3, #3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	fb12 f303 	smulbb	r3, r2, r3
 8002bc6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	3b20      	subs	r3, #32
 8002bcc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29c      	uxth	r4, r3
 8002bdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	88bb      	ldrh	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	88b9      	ldrh	r1, [r7, #4]
 8002bee:	88f8      	ldrh	r0, [r7, #6]
 8002bf0:	4622      	mov	r2, r4
 8002bf2:	f7ff fee9 	bl	80029c8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	827b      	strh	r3, [r7, #18]
 8002bfa:	e07a      	b.n	8002cf2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d028      	beq.n	8002c56 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8002c04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d108      	bne.n	8002c1e <lcd_ShowChar+0xae>
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	8a7b      	ldrh	r3, [r7, #18]
 8002c10:	493c      	ldr	r1, [pc, #240]	; (8002d04 <lcd_ShowChar+0x194>)
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	440a      	add	r2, r1
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	75fb      	strb	r3, [r7, #23]
 8002c1c:	e01b      	b.n	8002c56 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8002c1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c22:	2b18      	cmp	r3, #24
 8002c24:	d10b      	bne.n	8002c3e <lcd_ShowChar+0xce>
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	8a79      	ldrh	r1, [r7, #18]
 8002c2a:	4837      	ldr	r0, [pc, #220]	; (8002d08 <lcd_ShowChar+0x198>)
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	4403      	add	r3, r0
 8002c36:	440b      	add	r3, r1
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	75fb      	strb	r3, [r7, #23]
 8002c3c:	e00b      	b.n	8002c56 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8002c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d15a      	bne.n	8002cfc <lcd_ShowChar+0x18c>
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	8a7b      	ldrh	r3, [r7, #18]
 8002c4a:	4930      	ldr	r1, [pc, #192]	; (8002d0c <lcd_ShowChar+0x19c>)
 8002c4c:	0192      	lsls	r2, r2, #6
 8002c4e:	440a      	add	r2, r1
 8002c50:	4413      	add	r3, r2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	75bb      	strb	r3, [r7, #22]
 8002c5a:	e044      	b.n	8002ce6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002c5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d120      	bne.n	8002ca6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002c64:	7dfa      	ldrb	r2, [r7, #23]
 8002c66:	7dbb      	ldrb	r3, [r7, #22]
 8002c68:	fa42 f303 	asr.w	r3, r2, r3
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <lcd_ShowChar+0x10e>
 8002c74:	883b      	ldrh	r3, [r7, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fe84 	bl	8002984 <LCD_WR_DATA>
 8002c7c:	e003      	b.n	8002c86 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002c7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fe7f 	bl	8002984 <LCD_WR_DATA>
				m++;
 8002c86:	7d7b      	ldrb	r3, [r7, #21]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002c8c:	7d7b      	ldrb	r3, [r7, #21]
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c94:	fb01 f202 	mul.w	r2, r1, r2
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11f      	bne.n	8002ce0 <lcd_ShowChar+0x170>
				{
					m=0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	757b      	strb	r3, [r7, #21]
					break;
 8002ca4:	e022      	b.n	8002cec <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002ca6:	7dfa      	ldrb	r2, [r7, #23]
 8002ca8:	7dbb      	ldrb	r3, [r7, #22]
 8002caa:	fa42 f303 	asr.w	r3, r2, r3
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <lcd_ShowChar+0x152>
 8002cb6:	883a      	ldrh	r2, [r7, #0]
 8002cb8:	88b9      	ldrh	r1, [r7, #4]
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff3f 	bl	8002b40 <lcd_DrawPoint>
				x++;
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	8a3b      	ldrh	r3, [r7, #16]
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d105      	bne.n	8002ce0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002cd4:	8a3b      	ldrh	r3, [r7, #16]
 8002cd6:	80fb      	strh	r3, [r7, #6]
					y++;
 8002cd8:	88bb      	ldrh	r3, [r7, #4]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	80bb      	strh	r3, [r7, #4]
					break;
 8002cde:	e005      	b.n	8002cec <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002ce0:	7dbb      	ldrb	r3, [r7, #22]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	75bb      	strb	r3, [r7, #22]
 8002ce6:	7dbb      	ldrb	r3, [r7, #22]
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d9b7      	bls.n	8002c5c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002cec:	8a7b      	ldrh	r3, [r7, #18]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	827b      	strh	r3, [r7, #18]
 8002cf2:	8a7a      	ldrh	r2, [r7, #18]
 8002cf4:	89bb      	ldrh	r3, [r7, #12]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d380      	bcc.n	8002bfc <lcd_ShowChar+0x8c>
 8002cfa:	e000      	b.n	8002cfe <lcd_ShowChar+0x18e>
		else return;
 8002cfc:	bf00      	nop
				}
			}
		}
	}
}
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	08009278 	.word	0x08009278
 8002d08:	08009868 	.word	0x08009868
 8002d0c:	0800aa38 	.word	0x0800aa38

08002d10 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	460a      	mov	r2, r1
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002d20:	2301      	movs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002d24:	e004      	b.n	8002d30 <mypow+0x20>
 8002d26:	79fa      	ldrb	r2, [r7, #7]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	79bb      	ldrb	r3, [r7, #6]
 8002d32:	1e5a      	subs	r2, r3, #1
 8002d34:	71ba      	strb	r2, [r7, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f5      	bne.n	8002d26 <mypow+0x16>
	return result;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af04      	add	r7, sp, #16
 8002d4e:	4604      	mov	r4, r0
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	80fb      	strh	r3, [r7, #6]
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80bb      	strh	r3, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	807b      	strh	r3, [r7, #2]
 8002d62:	4613      	mov	r3, r2
 8002d64:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e059      	b.n	8002e2c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002d78:	887c      	ldrh	r4, [r7, #2]
 8002d7a:	787a      	ldrb	r2, [r7, #1]
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	200a      	movs	r0, #10
 8002d8a:	f7ff ffc1 	bl	8002d10 <mypow>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	fbb4 f1f3 	udiv	r1, r4, r3
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <lcd_ShowIntNum+0xf8>)
 8002d96:	fba3 2301 	umull	r2, r3, r3, r1
 8002d9a:	08da      	lsrs	r2, r3, #3
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	1aca      	subs	r2, r1, r3
 8002da6:	4613      	mov	r3, r2
 8002da8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d121      	bne.n	8002df4 <lcd_ShowIntNum+0xac>
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	787b      	ldrb	r3, [r7, #1]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	429a      	cmp	r2, r3
 8002db8:	da1c      	bge.n	8002df4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002dba:	7b3b      	ldrb	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d117      	bne.n	8002df0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	7b7b      	ldrb	r3, [r7, #13]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	fb12 f303 	smulbb	r3, r2, r3
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b298      	uxth	r0, r3
 8002dd4:	8c3a      	ldrh	r2, [r7, #32]
 8002dd6:	88b9      	ldrh	r1, [r7, #4]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	2220      	movs	r2, #32
 8002dea:	f7ff fec1 	bl	8002b70 <lcd_ShowChar>
				continue;
 8002dee:	e01a      	b.n	8002e26 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	7b7b      	ldrb	r3, [r7, #13]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	fb12 f303 	smulbb	r3, r2, r3
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	4413      	add	r3, r2
 8002e06:	b298      	uxth	r0, r3
 8002e08:	7b3b      	ldrb	r3, [r7, #12]
 8002e0a:	3330      	adds	r3, #48	; 0x30
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	8c3c      	ldrh	r4, [r7, #32]
 8002e10:	88b9      	ldrh	r1, [r7, #4]
 8002e12:	2300      	movs	r3, #0
 8002e14:	9302      	str	r3, [sp, #8]
 8002e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4623      	mov	r3, r4
 8002e22:	f7ff fea5 	bl	8002b70 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	787b      	ldrb	r3, [r7, #1]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d3a1      	bcc.n	8002d78 <lcd_ShowIntNum+0x30>
	}
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	cccccccd 	.word	0xcccccccd

08002e44 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <lcd_SetDir+0x44>)
 8002e60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e64:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <lcd_SetDir+0x44>)
 8002e68:	22f0      	movs	r2, #240	; 0xf0
 8002e6a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002e6c:	e006      	b.n	8002e7c <lcd_SetDir+0x38>
		lcddev.width=240;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <lcd_SetDir+0x44>)
 8002e70:	22f0      	movs	r2, #240	; 0xf0
 8002e72:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <lcd_SetDir+0x44>)
 8002e76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e7a:	805a      	strh	r2, [r3, #2]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	20000244 	.word	0x20000244

08002e8c <lcd_init>:


void lcd_init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e96:	48aa      	ldr	r0, [pc, #680]	; (8003140 <lcd_init+0x2b4>)
 8002e98:	f001 fb86 	bl	80045a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ea0:	f001 f81e 	bl	8003ee0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eaa:	48a5      	ldr	r0, [pc, #660]	; (8003140 <lcd_init+0x2b4>)
 8002eac:	f001 fb7c 	bl	80045a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eb4:	f001 f814 	bl	8003ee0 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7ff ffc3 	bl	8002e44 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002ebe:	20d3      	movs	r0, #211	; 0xd3
 8002ec0:	f7ff fd50 	bl	8002964 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002ec4:	f7ff fd6e 	bl	80029a4 <LCD_RD_DATA>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b9d      	ldr	r3, [pc, #628]	; (8003144 <lcd_init+0x2b8>)
 8002ece:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002ed0:	f7ff fd68 	bl	80029a4 <LCD_RD_DATA>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b9a      	ldr	r3, [pc, #616]	; (8003144 <lcd_init+0x2b8>)
 8002eda:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002edc:	f7ff fd62 	bl	80029a4 <LCD_RD_DATA>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b97      	ldr	r3, [pc, #604]	; (8003144 <lcd_init+0x2b8>)
 8002ee6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002ee8:	4b96      	ldr	r3, [pc, #600]	; (8003144 <lcd_init+0x2b8>)
 8002eea:	889b      	ldrh	r3, [r3, #4]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b94      	ldr	r3, [pc, #592]	; (8003144 <lcd_init+0x2b8>)
 8002ef2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002ef4:	f7ff fd56 	bl	80029a4 <LCD_RD_DATA>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b91      	ldr	r3, [pc, #580]	; (8003144 <lcd_init+0x2b8>)
 8002efe:	889b      	ldrh	r3, [r3, #4]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	4b8f      	ldr	r3, [pc, #572]	; (8003144 <lcd_init+0x2b8>)
 8002f06:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002f08:	20cf      	movs	r0, #207	; 0xcf
 8002f0a:	f7ff fd2b 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7ff fd38 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002f14:	20c1      	movs	r0, #193	; 0xc1
 8002f16:	f7ff fd35 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002f1a:	2030      	movs	r0, #48	; 0x30
 8002f1c:	f7ff fd32 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002f20:	20ed      	movs	r0, #237	; 0xed
 8002f22:	f7ff fd1f 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002f26:	2064      	movs	r0, #100	; 0x64
 8002f28:	f7ff fd2c 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f7ff fd29 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002f32:	2012      	movs	r0, #18
 8002f34:	f7ff fd26 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002f38:	2081      	movs	r0, #129	; 0x81
 8002f3a:	f7ff fd23 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002f3e:	20e8      	movs	r0, #232	; 0xe8
 8002f40:	f7ff fd10 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002f44:	2085      	movs	r0, #133	; 0x85
 8002f46:	f7ff fd1d 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002f4a:	2010      	movs	r0, #16
 8002f4c:	f7ff fd1a 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002f50:	207a      	movs	r0, #122	; 0x7a
 8002f52:	f7ff fd17 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002f56:	20cb      	movs	r0, #203	; 0xcb
 8002f58:	f7ff fd04 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002f5c:	2039      	movs	r0, #57	; 0x39
 8002f5e:	f7ff fd11 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002f62:	202c      	movs	r0, #44	; 0x2c
 8002f64:	f7ff fd0e 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7ff fd0b 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002f6e:	2034      	movs	r0, #52	; 0x34
 8002f70:	f7ff fd08 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002f74:	2002      	movs	r0, #2
 8002f76:	f7ff fd05 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002f7a:	20f7      	movs	r0, #247	; 0xf7
 8002f7c:	f7ff fcf2 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002f80:	2020      	movs	r0, #32
 8002f82:	f7ff fcff 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002f86:	20ea      	movs	r0, #234	; 0xea
 8002f88:	f7ff fcec 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7ff fcf9 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7ff fcf6 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002f98:	20c0      	movs	r0, #192	; 0xc0
 8002f9a:	f7ff fce3 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002f9e:	201b      	movs	r0, #27
 8002fa0:	f7ff fcf0 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002fa4:	20c1      	movs	r0, #193	; 0xc1
 8002fa6:	f7ff fcdd 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7ff fcea 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002fb0:	20c5      	movs	r0, #197	; 0xc5
 8002fb2:	f7ff fcd7 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002fb6:	2030      	movs	r0, #48	; 0x30
 8002fb8:	f7ff fce4 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002fbc:	2030      	movs	r0, #48	; 0x30
 8002fbe:	f7ff fce1 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002fc2:	20c7      	movs	r0, #199	; 0xc7
 8002fc4:	f7ff fcce 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002fc8:	20b7      	movs	r0, #183	; 0xb7
 8002fca:	f7ff fcdb 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002fce:	2036      	movs	r0, #54	; 0x36
 8002fd0:	f7ff fcc8 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002fd4:	2008      	movs	r0, #8
 8002fd6:	f7ff fcd5 	bl	8002984 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8002fda:	203a      	movs	r0, #58	; 0x3a
 8002fdc:	f7ff fcc2 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002fe0:	2055      	movs	r0, #85	; 0x55
 8002fe2:	f7ff fccf 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002fe6:	20b1      	movs	r0, #177	; 0xb1
 8002fe8:	f7ff fcbc 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7ff fcc9 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002ff2:	201a      	movs	r0, #26
 8002ff4:	f7ff fcc6 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002ff8:	20b6      	movs	r0, #182	; 0xb6
 8002ffa:	f7ff fcb3 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002ffe:	200a      	movs	r0, #10
 8003000:	f7ff fcc0 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8003004:	20a2      	movs	r0, #162	; 0xa2
 8003006:	f7ff fcbd 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800300a:	20f2      	movs	r0, #242	; 0xf2
 800300c:	f7ff fcaa 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7ff fcb7 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8003016:	2026      	movs	r0, #38	; 0x26
 8003018:	f7ff fca4 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800301c:	2001      	movs	r0, #1
 800301e:	f7ff fcb1 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8003022:	20e0      	movs	r0, #224	; 0xe0
 8003024:	f7ff fc9e 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8003028:	200f      	movs	r0, #15
 800302a:	f7ff fcab 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800302e:	202a      	movs	r0, #42	; 0x2a
 8003030:	f7ff fca8 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8003034:	2028      	movs	r0, #40	; 0x28
 8003036:	f7ff fca5 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800303a:	2008      	movs	r0, #8
 800303c:	f7ff fca2 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8003040:	200e      	movs	r0, #14
 8003042:	f7ff fc9f 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003046:	2008      	movs	r0, #8
 8003048:	f7ff fc9c 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800304c:	2054      	movs	r0, #84	; 0x54
 800304e:	f7ff fc99 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8003052:	20a9      	movs	r0, #169	; 0xa9
 8003054:	f7ff fc96 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8003058:	2043      	movs	r0, #67	; 0x43
 800305a:	f7ff fc93 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800305e:	200a      	movs	r0, #10
 8003060:	f7ff fc90 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8003064:	200f      	movs	r0, #15
 8003066:	f7ff fc8d 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7ff fc8a 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003070:	2000      	movs	r0, #0
 8003072:	f7ff fc87 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7ff fc84 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800307c:	2000      	movs	r0, #0
 800307e:	f7ff fc81 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8003082:	20e1      	movs	r0, #225	; 0xe1
 8003084:	f7ff fc6e 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003088:	2000      	movs	r0, #0
 800308a:	f7ff fc7b 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800308e:	2015      	movs	r0, #21
 8003090:	f7ff fc78 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8003094:	2017      	movs	r0, #23
 8003096:	f7ff fc75 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800309a:	2007      	movs	r0, #7
 800309c:	f7ff fc72 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80030a0:	2011      	movs	r0, #17
 80030a2:	f7ff fc6f 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80030a6:	2006      	movs	r0, #6
 80030a8:	f7ff fc6c 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80030ac:	202b      	movs	r0, #43	; 0x2b
 80030ae:	f7ff fc69 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80030b2:	2056      	movs	r0, #86	; 0x56
 80030b4:	f7ff fc66 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80030b8:	203c      	movs	r0, #60	; 0x3c
 80030ba:	f7ff fc63 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80030be:	2005      	movs	r0, #5
 80030c0:	f7ff fc60 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80030c4:	2010      	movs	r0, #16
 80030c6:	f7ff fc5d 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80030ca:	200f      	movs	r0, #15
 80030cc:	f7ff fc5a 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80030d0:	203f      	movs	r0, #63	; 0x3f
 80030d2:	f7ff fc57 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80030d6:	203f      	movs	r0, #63	; 0x3f
 80030d8:	f7ff fc54 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80030dc:	200f      	movs	r0, #15
 80030de:	f7ff fc51 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80030e2:	202b      	movs	r0, #43	; 0x2b
 80030e4:	f7ff fc3e 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7ff fc4b 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff fc48 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7ff fc45 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80030fa:	203f      	movs	r0, #63	; 0x3f
 80030fc:	f7ff fc42 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8003100:	202a      	movs	r0, #42	; 0x2a
 8003102:	f7ff fc2f 	bl	8002964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003106:	2000      	movs	r0, #0
 8003108:	f7ff fc3c 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7ff fc39 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003112:	2000      	movs	r0, #0
 8003114:	f7ff fc36 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8003118:	20ef      	movs	r0, #239	; 0xef
 800311a:	f7ff fc33 	bl	8002984 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800311e:	2011      	movs	r0, #17
 8003120:	f7ff fc20 	bl	8002964 <LCD_WR_REG>
	HAL_Delay(120);
 8003124:	2078      	movs	r0, #120	; 0x78
 8003126:	f000 fedb 	bl	8003ee0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800312a:	2029      	movs	r0, #41	; 0x29
 800312c:	f7ff fc1a 	bl	8002964 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8003130:	2201      	movs	r2, #1
 8003132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003136:	4804      	ldr	r0, [pc, #16]	; (8003148 <lcd_init+0x2bc>)
 8003138:	f001 fa36 	bl	80045a8 <HAL_GPIO_WritePin>
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40020800 	.word	0x40020800
 8003144:	20000244 	.word	0x20000244
 8003148:	40020000 	.word	0x40020000

0800314c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b08b      	sub	sp, #44	; 0x2c
 8003150:	af04      	add	r7, sp, #16
 8003152:	60ba      	str	r2, [r7, #8]
 8003154:	461a      	mov	r2, r3
 8003156:	4603      	mov	r3, r0
 8003158:	81fb      	strh	r3, [r7, #14]
 800315a:	460b      	mov	r3, r1
 800315c:	81bb      	strh	r3, [r7, #12]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800316a:	e048      	b.n	80031fe <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d145      	bne.n	80031fe <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003172:	89fa      	ldrh	r2, [r7, #14]
 8003174:	4b26      	ldr	r3, [pc, #152]	; (8003210 <lcd_ShowStr+0xc4>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	1acb      	subs	r3, r1, r3
 8003184:	429a      	cmp	r2, r3
 8003186:	dc3f      	bgt.n	8003208 <lcd_ShowStr+0xbc>
 8003188:	89ba      	ldrh	r2, [r7, #12]
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <lcd_ShowStr+0xc4>)
 800318c:	885b      	ldrh	r3, [r3, #2]
 800318e:	4619      	mov	r1, r3
 8003190:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003194:	1acb      	subs	r3, r1, r3
 8003196:	429a      	cmp	r2, r3
 8003198:	dc36      	bgt.n	8003208 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b80      	cmp	r3, #128	; 0x80
 80031a0:	d902      	bls.n	80031a8 <lcd_ShowStr+0x5c>
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
 80031a6:	e02a      	b.n	80031fe <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b0d      	cmp	r3, #13
 80031ae:	d10b      	bne.n	80031c8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80031b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	89bb      	ldrh	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80031bc:	8abb      	ldrh	r3, [r7, #20]
 80031be:	81fb      	strh	r3, [r7, #14]
					str++;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	e017      	b.n	80031f8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	88fc      	ldrh	r4, [r7, #6]
 80031ce:	89b9      	ldrh	r1, [r7, #12]
 80031d0:	89f8      	ldrh	r0, [r7, #14]
 80031d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031d6:	9302      	str	r3, [sp, #8]
 80031d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	4623      	mov	r3, r4
 80031e4:	f7ff fcc4 	bl	8002b70 <lcd_ShowChar>
					x+=sizey/2;
 80031e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	89fb      	ldrh	r3, [r7, #14]
 80031f4:	4413      	add	r3, r2
 80031f6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1b2      	bne.n	800316c <lcd_ShowStr+0x20>
 8003206:	e000      	b.n	800320a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003208:	bf00      	nop
			}
		}
	}
}
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	20000244 	.word	0x20000244

08003214 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af04      	add	r7, sp, #16
 800321a:	60ba      	str	r2, [r7, #8]
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	81fb      	strh	r3, [r7, #14]
 8003222:	460b      	mov	r3, r1
 8003224:	81bb      	strh	r3, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800322a:	68b8      	ldr	r0, [r7, #8]
 800322c:	f7fc ffd0 	bl	80001d0 <strlen>
 8003230:	4603      	mov	r3, r0
 8003232:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <lcd_StrCenter+0x60>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	8afb      	ldrh	r3, [r7, #22]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	0fda      	lsrs	r2, r3, #31
 8003242:	4413      	add	r3, r2
 8003244:	105b      	asrs	r3, r3, #1
 8003246:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8003248:	89fa      	ldrh	r2, [r7, #14]
 800324a:	8abb      	ldrh	r3, [r7, #20]
 800324c:	4413      	add	r3, r2
 800324e:	b298      	uxth	r0, r3
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	89b9      	ldrh	r1, [r7, #12]
 8003254:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	8c3b      	ldrh	r3, [r7, #32]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f7ff ff70 	bl	800314c <lcd_ShowStr>
}
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000244 	.word	0x20000244

08003278 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800327c:	2201      	movs	r2, #1
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <led7_init+0x14>)
 8003282:	f001 f991 	bl	80045a8 <HAL_GPIO_WritePin>
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40021800 	.word	0x40021800

08003290 <led7_Scan>:

void led7_Scan(){
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <led7_Scan+0x104>)
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	b29a      	uxth	r2, r3
 800329c:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <led7_Scan+0x104>)
 800329e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80032a0:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <led7_Scan+0x108>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3d      	ldr	r2, [pc, #244]	; (800339c <led7_Scan+0x10c>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <led7_Scan+0x104>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <led7_Scan+0x104>)
 80032ba:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <led7_Scan+0x108>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d847      	bhi.n	8003354 <led7_Scan+0xc4>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <led7_Scan+0x3c>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032fb 	.word	0x080032fb
 80032d4:	08003319 	.word	0x08003319
 80032d8:	08003337 	.word	0x08003337
	case 0:
		spi_buffer |= 0x00b0;
 80032dc:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <led7_Scan+0x104>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <led7_Scan+0x104>)
 80032e8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <led7_Scan+0x104>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <led7_Scan+0x104>)
 80032f6:	801a      	strh	r2, [r3, #0]
		break;
 80032f8:	e02d      	b.n	8003356 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <led7_Scan+0x104>)
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <led7_Scan+0x104>)
 8003306:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <led7_Scan+0x104>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	f023 0320 	bic.w	r3, r3, #32
 8003310:	b29a      	uxth	r2, r3
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <led7_Scan+0x104>)
 8003314:	801a      	strh	r2, [r3, #0]
		break;
 8003316:	e01e      	b.n	8003356 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8003318:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <led7_Scan+0x104>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003320:	b29a      	uxth	r2, r3
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <led7_Scan+0x104>)
 8003324:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <led7_Scan+0x104>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	f023 0310 	bic.w	r3, r3, #16
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <led7_Scan+0x104>)
 8003332:	801a      	strh	r2, [r3, #0]
		break;
 8003334:	e00f      	b.n	8003356 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <led7_Scan+0x104>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800333e:	b29a      	uxth	r2, r3
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <led7_Scan+0x104>)
 8003342:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <led7_Scan+0x104>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <led7_Scan+0x104>)
 8003350:	801a      	strh	r2, [r3, #0]
		break;
 8003352:	e000      	b.n	8003356 <led7_Scan+0xc6>
	default:
		break;
 8003354:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <led7_Scan+0x108>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	425a      	negs	r2, r3
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	f002 0203 	and.w	r2, r2, #3
 8003366:	bf58      	it	pl
 8003368:	4253      	negpl	r3, r2
 800336a:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <led7_Scan+0x108>)
 800336c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2140      	movs	r1, #64	; 0x40
 8003372:	480b      	ldr	r0, [pc, #44]	; (80033a0 <led7_Scan+0x110>)
 8003374:	f001 f918 	bl	80045a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8003378:	2301      	movs	r3, #1
 800337a:	2202      	movs	r2, #2
 800337c:	4905      	ldr	r1, [pc, #20]	; (8003394 <led7_Scan+0x104>)
 800337e:	4809      	ldr	r0, [pc, #36]	; (80033a4 <led7_Scan+0x114>)
 8003380:	f002 fe27 	bl	8005fd2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003384:	2201      	movs	r2, #1
 8003386:	2140      	movs	r1, #64	; 0x40
 8003388:	4805      	ldr	r0, [pc, #20]	; (80033a0 <led7_Scan+0x110>)
 800338a:	f001 f90d 	bl	80045a8 <HAL_GPIO_WritePin>
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000004 	.word	0x20000004
 8003398:	2000024c 	.word	0x2000024c
 800339c:	20000000 	.word	0x20000000
 80033a0:	40021800 	.word	0x40021800
 80033a4:	20000258 	.word	0x20000258

080033a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033ac:	f000 fd26 	bl	8003dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033b0:	f000 f838 	bl	8003424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033b4:	f7ff f968 	bl	8002688 <MX_GPIO_Init>
  MX_TIM2_Init();
 80033b8:	f000 fa66 	bl	8003888 <MX_TIM2_Init>
  MX_SPI1_Init();
 80033bc:	f000 f938 	bl	8003630 <MX_SPI1_Init>
  MX_FSMC_Init();
 80033c0:	f7fe fbda 	bl	8001b78 <MX_FSMC_Init>
  MX_I2C1_Init();
 80033c4:	f7ff fa58 	bl	8002878 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80033c8:	f000 fc36 	bl	8003c38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80033cc:	f000 f894 	bl	80034f8 <system_init>
  /* USER CODE END 2 */
  init_value();
 80033d0:	f7fe fca2 	bl	8001d18 <init_value>
  updateTime();
 80033d4:	f7ff f80c 	bl	80023f0 <updateTime>
  updateAlarm();
 80033d8:	f7ff f850 	bl	800247c <updateAlarm>
  lcd_Clear(BLACK);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7ff fb3f 	bl	8002a60 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (flag_timer2 == 1)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <main+0x74>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10e      	bne.n	8003408 <main+0x60>
    {
      flag_timer2 = 0;
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <main+0x74>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]
      button_Scan();
 80033f0:	f7fd f8d4 	bl	800059c <button_Scan>
      test_LedDebug();
 80033f4:	f000 f8a2 	bl	800353c <test_LedDebug>
      ds3231_ReadTime();
 80033f8:	f7fd f95e 	bl	80006b8 <ds3231_ReadTime>
      // test_Uart();
      uart_communication();
 80033fc:	f000 fbc0 	bl	8003b80 <uart_communication>
      fsm_clock();
 8003400:	f7fd fc1c 	bl	8000c3c <fsm_clock>
      fsm_alarm();
 8003404:	f7fd f9e8 	bl	80007d8 <fsm_alarm>
    }
    if (buffer_flag == 1)
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <main+0x78>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d1e8      	bne.n	80033e2 <main+0x3a>
    {
      buffer_flag = 0;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <main+0x78>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
      comm_parser_fsm();
 8003416:	f000 fb25 	bl	8003a64 <comm_parser_fsm>
    if (flag_timer2 == 1)
 800341a:	e7e2      	b.n	80033e2 <main+0x3a>
 800341c:	20000252 	.word	0x20000252
 8003420:	2000031f 	.word	0x2000031f

08003424 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b094      	sub	sp, #80	; 0x50
 8003428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800342a:	f107 0320 	add.w	r3, r7, #32
 800342e:	2230      	movs	r2, #48	; 0x30
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f005 f924 	bl	8008680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <SystemClock_Config+0xcc>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <SystemClock_Config+0xcc>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <SystemClock_Config+0xcc>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <SystemClock_Config+0xd0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <SystemClock_Config+0xd0>)
 800346e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <SystemClock_Config+0xd0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003480:	2302      	movs	r3, #2
 8003482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003484:	2301      	movs	r3, #1
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003488:	2310      	movs	r3, #16
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800348c:	2302      	movs	r3, #2
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003490:	2300      	movs	r3, #0
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003494:	2308      	movs	r3, #8
 8003496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003498:	23a8      	movs	r3, #168	; 0xa8
 800349a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800349c:	2302      	movs	r3, #2
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034a0:	2304      	movs	r3, #4
 80034a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a4:	f107 0320 	add.w	r3, r7, #32
 80034a8:	4618      	mov	r0, r3
 80034aa:	f002 f871 	bl	8005590 <HAL_RCC_OscConfig>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034b4:	f000 f866 	bl	8003584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034b8:	230f      	movs	r3, #15
 80034ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034bc:	2302      	movs	r3, #2
 80034be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80034ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	2105      	movs	r1, #5
 80034d6:	4618      	mov	r0, r3
 80034d8:	f002 fad2 	bl	8005a80 <HAL_RCC_ClockConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034e2:	f000 f84f 	bl	8003584 <Error_Handler>
  }
}
 80034e6:	bf00      	nop
 80034e8:	3750      	adds	r7, #80	; 0x50
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40007000 	.word	0x40007000

080034f8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2120      	movs	r1, #32
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <system_init+0x40>)
 8003502:	f001 f851 	bl	80045a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2140      	movs	r1, #64	; 0x40
 800350a:	480b      	ldr	r0, [pc, #44]	; (8003538 <system_init+0x40>)
 800350c:	f001 f84c 	bl	80045a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2110      	movs	r1, #16
 8003514:	4808      	ldr	r0, [pc, #32]	; (8003538 <system_init+0x40>)
 8003516:	f001 f847 	bl	80045a8 <HAL_GPIO_WritePin>
  timer_init();
 800351a:	f000 f839 	bl	8003590 <timer_init>
  led7_init();
 800351e:	f7ff feab 	bl	8003278 <led7_init>
  button_init();
 8003522:	f7fd f82f 	bl	8000584 <button_init>
  lcd_init();
 8003526:	f7ff fcb1 	bl	8002e8c <lcd_init>
  uart_init_rs232();
 800352a:	f000 fa1f 	bl	800396c <uart_init_rs232>
  setTimer2(50);
 800352e:	2032      	movs	r0, #50	; 0x32
 8003530:	f000 f838 	bl	80035a4 <setTimer2>
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000

0800353c <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug()
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  count_led_debug = (count_led_debug + 1) % 20;
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <test_LedDebug+0x3c>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <test_LedDebug+0x40>)
 8003548:	fb83 1302 	smull	r1, r3, r3, r2
 800354c:	10d9      	asrs	r1, r3, #3
 800354e:	17d3      	asrs	r3, r2, #31
 8003550:	1ac9      	subs	r1, r1, r3
 8003552:	460b      	mov	r3, r1
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	1ad1      	subs	r1, r2, r3
 800355c:	b28a      	uxth	r2, r1
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <test_LedDebug+0x3c>)
 8003560:	801a      	strh	r2, [r3, #0]
  if (count_led_debug == 0)
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <test_LedDebug+0x3c>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <test_LedDebug+0x36>
  {
    HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800356a:	2110      	movs	r1, #16
 800356c:	4804      	ldr	r0, [pc, #16]	; (8003580 <test_LedDebug+0x44>)
 800356e:	f001 f834 	bl	80045da <HAL_GPIO_TogglePin>
  }
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000250 	.word	0x20000250
 800357c:	66666667 	.word	0x66666667
 8003580:	40021000 	.word	0x40021000

08003584 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003588:	b672      	cpsid	i
}
 800358a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800358c:	e7fe      	b.n	800358c <Error_Handler+0x8>
	...

08003590 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <timer_init+0x10>)
 8003596:	f003 facf 	bl	8006b38 <HAL_TIM_Base_Start_IT>
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200002b4 	.word	0x200002b4

080035a4 <setTimer2>:

void setTimer2(uint16_t duration){
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80035ae:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <setTimer2+0x2c>)
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <setTimer2+0x2c>)
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <setTimer2+0x30>)
 80035ba:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <setTimer2+0x34>)
 80035be:	2200      	movs	r2, #0
 80035c0:	801a      	strh	r2, [r3, #0]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000256 	.word	0x20000256
 80035d4:	20000254 	.word	0x20000254
 80035d8:	20000252 	.word	0x20000252

080035dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d116      	bne.n	800361c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003600:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800360c:	2201      	movs	r2, #1
 800360e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003616:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003618:	f7ff fe3a 	bl	8003290 <led7_Scan>
	}
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000254 	.word	0x20000254
 8003628:	20000252 	.word	0x20000252
 800362c:	20000256 	.word	0x20000256

08003630 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <MX_SPI1_Init+0x64>)
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <MX_SPI1_Init+0x68>)
 8003638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <MX_SPI1_Init+0x64>)
 800363c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <MX_SPI1_Init+0x64>)
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <MX_SPI1_Init+0x64>)
 800364a:	2200      	movs	r2, #0
 800364c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <MX_SPI1_Init+0x64>)
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <MX_SPI1_Init+0x64>)
 8003656:	2200      	movs	r2, #0
 8003658:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <MX_SPI1_Init+0x64>)
 800365c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003660:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <MX_SPI1_Init+0x64>)
 8003664:	2200      	movs	r2, #0
 8003666:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <MX_SPI1_Init+0x64>)
 800366a:	2200      	movs	r2, #0
 800366c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <MX_SPI1_Init+0x64>)
 8003670:	2200      	movs	r2, #0
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <MX_SPI1_Init+0x64>)
 8003676:	2200      	movs	r2, #0
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <MX_SPI1_Init+0x64>)
 800367c:	220a      	movs	r2, #10
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003680:	4804      	ldr	r0, [pc, #16]	; (8003694 <MX_SPI1_Init+0x64>)
 8003682:	f002 fc1d 	bl	8005ec0 <HAL_SPI_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800368c:	f7ff ff7a 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003690:	bf00      	nop
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000258 	.word	0x20000258
 8003698:	40013000 	.word	0x40013000

0800369c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_SPI_MspInit+0x84>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d12b      	bne.n	8003716 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_SPI_MspInit+0x88>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a17      	ldr	r2, [pc, #92]	; (8003724 <HAL_SPI_MspInit+0x88>)
 80036c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_SPI_MspInit+0x88>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_SPI_MspInit+0x88>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <HAL_SPI_MspInit+0x88>)
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_SPI_MspInit+0x88>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80036f6:	2338      	movs	r3, #56	; 0x38
 80036f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003706:	2305      	movs	r3, #5
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	4619      	mov	r1, r3
 8003710:	4805      	ldr	r0, [pc, #20]	; (8003728 <HAL_SPI_MspInit+0x8c>)
 8003712:	f000 fdad 	bl	8004270 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	; 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40013000 	.word	0x40013000
 8003724:	40023800 	.word	0x40023800
 8003728:	40020400 	.word	0x40020400

0800372c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_MspInit+0x4c>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_MspInit+0x4c>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <HAL_MspInit+0x4c>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_MspInit+0x4c>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_MspInit+0x4c>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_MspInit+0x4c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <NMI_Handler+0x4>

08003782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003786:	e7fe      	b.n	8003786 <HardFault_Handler+0x4>

08003788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800378c:	e7fe      	b.n	800378c <MemManage_Handler+0x4>

0800378e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003792:	e7fe      	b.n	8003792 <BusFault_Handler+0x4>

08003794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <UsageFault_Handler+0x4>

0800379a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c8:	f000 fb6a 	bl	8003ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <TIM2_IRQHandler+0x10>)
 80037d6:	f003 fa1f 	bl	8006c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200002b4 	.word	0x200002b4

080037e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <USART1_IRQHandler+0x10>)
 80037ea:	f003 fee7 	bl	80075bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200003c8 	.word	0x200003c8

080037f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <_sbrk+0x5c>)
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <_sbrk+0x60>)
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <_sbrk+0x64>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <_sbrk+0x64>)
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <_sbrk+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <_sbrk+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	d207      	bcs.n	8003838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003828:	f004 ff00 	bl	800862c <__errno>
 800382c:	4603      	mov	r3, r0
 800382e:	220c      	movs	r2, #12
 8003830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e009      	b.n	800384c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <_sbrk+0x64>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <_sbrk+0x64>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <_sbrk+0x64>)
 8003848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20020000 	.word	0x20020000
 8003858:	00000400 	.word	0x00000400
 800385c:	200002b0 	.word	0x200002b0
 8003860:	20000420 	.word	0x20000420

08003864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <SystemInit+0x20>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	4a05      	ldr	r2, [pc, #20]	; (8003884 <SystemInit+0x20>)
 8003870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800389c:	463b      	mov	r3, r7
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <MX_TIM2_Init+0x94>)
 80038a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <MX_TIM2_Init+0x94>)
 80038ae:	f240 3247 	movw	r2, #839	; 0x347
 80038b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <MX_TIM2_Init+0x94>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <MX_TIM2_Init+0x94>)
 80038bc:	2263      	movs	r2, #99	; 0x63
 80038be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <MX_TIM2_Init+0x94>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <MX_TIM2_Init+0x94>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038cc:	4813      	ldr	r0, [pc, #76]	; (800391c <MX_TIM2_Init+0x94>)
 80038ce:	f003 f8e3 	bl	8006a98 <HAL_TIM_Base_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80038d8:	f7ff fe54 	bl	8003584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038e2:	f107 0308 	add.w	r3, r7, #8
 80038e6:	4619      	mov	r1, r3
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <MX_TIM2_Init+0x94>)
 80038ea:	f003 fa9d 	bl	8006e28 <HAL_TIM_ConfigClockSource>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80038f4:	f7ff fe46 	bl	8003584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003900:	463b      	mov	r3, r7
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_TIM2_Init+0x94>)
 8003906:	f003 fcb9 	bl	800727c <HAL_TIMEx_MasterConfigSynchronization>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003910:	f7ff fe38 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200002b4 	.word	0x200002b4

08003920 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003930:	d115      	bne.n	800395e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_TIM_Base_MspInit+0x48>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <HAL_TIM_Base_MspInit+0x48>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_TIM_Base_MspInit+0x48>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	201c      	movs	r0, #28
 8003954:	f000 fbc3 	bl	80040de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003958:	201c      	movs	r0, #28
 800395a:	f000 fbdc 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800

0800396c <uart_init_rs232>:
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
uint8_t msg[100];

void uart_init_rs232()
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &byte_recv, 1);
 8003970:	2201      	movs	r2, #1
 8003972:	4903      	ldr	r1, [pc, #12]	; (8003980 <uart_init_rs232+0x14>)
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <uart_init_rs232+0x18>)
 8003976:	f003 fdf0 	bl	800755a <HAL_UART_Receive_IT>
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200002fc 	.word	0x200002fc
 8003984:	200003c8 	.word	0x200003c8

08003988 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t *str)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (void *)msg, sprintf((void *)msg, "%s", str), 10);
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4907      	ldr	r1, [pc, #28]	; (80039b0 <uart_Rs232SendString+0x28>)
 8003994:	4807      	ldr	r0, [pc, #28]	; (80039b4 <uart_Rs232SendString+0x2c>)
 8003996:	f004 fe7b 	bl	8008690 <siprintf>
 800399a:	4603      	mov	r3, r0
 800399c:	b29a      	uxth	r2, r3
 800399e:	230a      	movs	r3, #10
 80039a0:	4904      	ldr	r1, [pc, #16]	; (80039b4 <uart_Rs232SendString+0x2c>)
 80039a2:	4805      	ldr	r0, [pc, #20]	; (80039b8 <uart_Rs232SendString+0x30>)
 80039a4:	f003 fd47 	bl	8007436 <HAL_UART_Transmit>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	0800925c 	.word	0x0800925c
 80039b4:	20000320 	.word	0x20000320
 80039b8:	200003c8 	.word	0x200003c8

080039bc <HAL_UART_RxCpltCallback>:
    sprintf((void *)msg, "%ld", num % 100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_UART_RxCpltCallback+0x54>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d11b      	bne.n	8003a06 <HAL_UART_RxCpltCallback+0x4a>
    {
        // rs232 isr
        // can be modified
        // HAL_UART_Transmit(&huart1, &byte_recv, 1, 10);
        buffer_byte[index_buffer] = byte_recv;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_UART_RxCpltCallback+0x58>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_UART_RxCpltCallback+0x5c>)
 80039d6:	7819      	ldrb	r1, [r3, #0]
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_UART_RxCpltCallback+0x60>)
 80039da:	5499      	strb	r1, [r3, r2]
        index_buffer++;
 80039dc:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <HAL_UART_RxCpltCallback+0x58>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_UART_RxCpltCallback+0x58>)
 80039e6:	701a      	strb	r2, [r3, #0]
        if (index_buffer == MAX_BUFFER_SIZE)
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_UART_RxCpltCallback+0x58>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b1e      	cmp	r3, #30
 80039ee:	d102      	bne.n	80039f6 <HAL_UART_RxCpltCallback+0x3a>
            index_buffer = 0;
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_UART_RxCpltCallback+0x58>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
        buffer_flag = 1;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_UART_RxCpltCallback+0x64>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
        // turn on the receice interrupt
        HAL_UART_Receive_IT(&huart1, &byte_recv, 1);
 80039fc:	2201      	movs	r2, #1
 80039fe:	4906      	ldr	r1, [pc, #24]	; (8003a18 <HAL_UART_RxCpltCallback+0x5c>)
 8003a00:	4808      	ldr	r0, [pc, #32]	; (8003a24 <HAL_UART_RxCpltCallback+0x68>)
 8003a02:	f003 fdaa 	bl	800755a <HAL_UART_Receive_IT>
    }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40011000 	.word	0x40011000
 8003a14:	2000031e 	.word	0x2000031e
 8003a18:	200002fc 	.word	0x200002fc
 8003a1c:	20000300 	.word	0x20000300
 8003a20:	2000031f 	.word	0x2000031f
 8003a24:	200003c8 	.word	0x200003c8

08003a28 <str_cpy>:
uint8_t index_cmd_data = 0;

uint8_t empty_str[MAX_BUFFER_SIZE] = {0};

void str_cpy(uint8_t *str1, uint8_t *str2)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_BUFFER_SIZE; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e00a      	b.n	8003a4e <str_cpy+0x26>
    {
        str1[i] = str2[i];
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	440b      	add	r3, r1
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_BUFFER_SIZE; i++)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b1d      	cmp	r3, #29
 8003a52:	ddf1      	ble.n	8003a38 <str_cpy+0x10>
    }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <comm_parser_fsm>:

void comm_parser_fsm(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
    switch (command_status)
 8003a68:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <comm_parser_fsm+0xfc>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <comm_parser_fsm+0x12>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d015      	beq.n	8003aa0 <comm_parser_fsm+0x3c>
            command_status = READING;
            command_flag = 0;
        }
        break;
    default:
        break;
 8003a74:	e072      	b.n	8003b5c <comm_parser_fsm+0xf8>
        if (buffer_byte[index_buffer - 1] == '!')
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <comm_parser_fsm+0x100>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	; (8003b68 <comm_parser_fsm+0x104>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	2b21      	cmp	r3, #33	; 0x21
 8003a82:	d109      	bne.n	8003a98 <comm_parser_fsm+0x34>
            command_status = READING;
 8003a84:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <comm_parser_fsm+0xfc>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
            str_cpy(command_data, empty_str);
 8003a8a:	4938      	ldr	r1, [pc, #224]	; (8003b6c <comm_parser_fsm+0x108>)
 8003a8c:	4838      	ldr	r0, [pc, #224]	; (8003b70 <comm_parser_fsm+0x10c>)
 8003a8e:	f7ff ffcb 	bl	8003a28 <str_cpy>
            index_cmd_data = 0;
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <comm_parser_fsm+0x110>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
        command_flag = 0;
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <comm_parser_fsm+0x114>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
        break;
 8003a9e:	e05d      	b.n	8003b5c <comm_parser_fsm+0xf8>
        if (buffer_byte[index_buffer - 1] != '!' && buffer_byte[index_buffer - 1] != '#')
 8003aa0:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <comm_parser_fsm+0x100>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <comm_parser_fsm+0x104>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	2b21      	cmp	r3, #33	; 0x21
 8003aac:	d016      	beq.n	8003adc <comm_parser_fsm+0x78>
 8003aae:	4b2d      	ldr	r3, [pc, #180]	; (8003b64 <comm_parser_fsm+0x100>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <comm_parser_fsm+0x104>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	2b23      	cmp	r3, #35	; 0x23
 8003aba:	d00f      	beq.n	8003adc <comm_parser_fsm+0x78>
            command_data[index_cmd_data] = buffer_byte[index_buffer - 1];
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <comm_parser_fsm+0x100>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	; (8003b74 <comm_parser_fsm+0x110>)
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <comm_parser_fsm+0x104>)
 8003aca:	5cd2      	ldrb	r2, [r2, r3]
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <comm_parser_fsm+0x10c>)
 8003ace:	545a      	strb	r2, [r3, r1]
            index_cmd_data++;
 8003ad0:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <comm_parser_fsm+0x110>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <comm_parser_fsm+0x110>)
 8003ada:	701a      	strb	r2, [r3, #0]
        if (buffer_byte[index_buffer - 1] == '#')
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <comm_parser_fsm+0x100>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <comm_parser_fsm+0x104>)
 8003ae4:	5cd3      	ldrb	r3, [r2, r3]
 8003ae6:	2b23      	cmp	r3, #35	; 0x23
 8003ae8:	d110      	bne.n	8003b0c <comm_parser_fsm+0xa8>
            str_cpy(buffer_byte, empty_str);
 8003aea:	4920      	ldr	r1, [pc, #128]	; (8003b6c <comm_parser_fsm+0x108>)
 8003aec:	481e      	ldr	r0, [pc, #120]	; (8003b68 <comm_parser_fsm+0x104>)
 8003aee:	f7ff ff9b 	bl	8003a28 <str_cpy>
            index_buffer = 0;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <comm_parser_fsm+0x100>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
            uart_status = END_UART;
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <comm_parser_fsm+0x118>)
 8003afa:	2205      	movs	r2, #5
 8003afc:	701a      	strb	r2, [r3, #0]
            command_status = START_COMMAND;
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <comm_parser_fsm+0xfc>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
            command_flag = 1;
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <comm_parser_fsm+0x114>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
        break;
 8003b0a:	e026      	b.n	8003b5a <comm_parser_fsm+0xf6>
        else if (buffer_byte[index_buffer - 1] == '!')
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <comm_parser_fsm+0x100>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <comm_parser_fsm+0x104>)
 8003b14:	5cd3      	ldrb	r3, [r2, r3]
 8003b16:	2b21      	cmp	r3, #33	; 0x21
 8003b18:	d11f      	bne.n	8003b5a <comm_parser_fsm+0xf6>
            str_cpy(buffer_byte, empty_str);
 8003b1a:	4914      	ldr	r1, [pc, #80]	; (8003b6c <comm_parser_fsm+0x108>)
 8003b1c:	4812      	ldr	r0, [pc, #72]	; (8003b68 <comm_parser_fsm+0x104>)
 8003b1e:	f7ff ff83 	bl	8003a28 <str_cpy>
            str_cpy(command_data, empty_str);
 8003b22:	4912      	ldr	r1, [pc, #72]	; (8003b6c <comm_parser_fsm+0x108>)
 8003b24:	4812      	ldr	r0, [pc, #72]	; (8003b70 <comm_parser_fsm+0x10c>)
 8003b26:	f7ff ff7f 	bl	8003a28 <str_cpy>
            index_buffer = 0;
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <comm_parser_fsm+0x100>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
            index_cmd_data = 0;
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <comm_parser_fsm+0x110>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
            buffer_byte[index_buffer] = '!';
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <comm_parser_fsm+0x100>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <comm_parser_fsm+0x104>)
 8003b3e:	2121      	movs	r1, #33	; 0x21
 8003b40:	5499      	strb	r1, [r3, r2]
            index_buffer++;
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <comm_parser_fsm+0x100>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <comm_parser_fsm+0x100>)
 8003b4c:	701a      	strb	r2, [r3, #0]
            command_status = READING;
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <comm_parser_fsm+0xfc>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
            command_flag = 0;
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <comm_parser_fsm+0x114>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
        break;
 8003b5a:	bf00      	nop
    }
}
 8003b5c:	bf00      	nop
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000384 	.word	0x20000384
 8003b64:	2000031e 	.word	0x2000031e
 8003b68:	20000300 	.word	0x20000300
 8003b6c:	200003a8 	.word	0x200003a8
 8003b70:	20000388 	.word	0x20000388
 8003b74:	200003a6 	.word	0x200003a6
 8003b78:	20000385 	.word	0x20000385
 8003b7c:	2000000c 	.word	0x2000000c

08003b80 <uart_communication>:

void uart_communication(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af04      	add	r7, sp, #16
    switch (uart_status)
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <uart_communication+0x98>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d03d      	beq.n	8003c0a <uart_communication+0x8a>
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d000      	beq.n	8003b94 <uart_communication+0x14>
            lcd_ShowStr(140, 50, tempUart, GREEN, BLACK, 16, 1);
            command_flag = 0;
        }
        break;
    default:
        break;
 8003b92:	e03d      	b.n	8003c10 <uart_communication+0x90>
        if (command_flag == 1)
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <uart_communication+0x9c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d138      	bne.n	8003c0e <uart_communication+0x8e>
            str_cpy(tempUart, empty_str);
 8003b9c:	4920      	ldr	r1, [pc, #128]	; (8003c20 <uart_communication+0xa0>)
 8003b9e:	4821      	ldr	r0, [pc, #132]	; (8003c24 <uart_communication+0xa4>)
 8003ba0:	f7ff ff42 	bl	8003a28 <str_cpy>
            str_cpy(tempUart, command_data);
 8003ba4:	4920      	ldr	r1, [pc, #128]	; (8003c28 <uart_communication+0xa8>)
 8003ba6:	481f      	ldr	r0, [pc, #124]	; (8003c24 <uart_communication+0xa4>)
 8003ba8:	f7ff ff3e 	bl	8003a28 <str_cpy>
            lcd_Fill(0, 40, 240, 70, BLACK);
 8003bac:	2300      	movs	r3, #0
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2346      	movs	r3, #70	; 0x46
 8003bb2:	22f0      	movs	r2, #240	; 0xf0
 8003bb4:	2128      	movs	r1, #40	; 0x28
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f7fe ff8c 	bl	8002ad4 <lcd_Fill>
            uart_input = 1;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <uart_communication+0xac>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
            number = atoi((void *)tempUart);
 8003bc2:	4818      	ldr	r0, [pc, #96]	; (8003c24 <uart_communication+0xa4>)
 8003bc4:	f004 fd2e 	bl	8008624 <atoi>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <uart_communication+0xb0>)
 8003bcc:	6013      	str	r3, [r2, #0]
            lcd_ShowStr(70, 50, "INPUT: ", GREEN, BLACK, 16, 1);
 8003bce:	2301      	movs	r3, #1
 8003bd0:	9302      	str	r3, [sp, #8]
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <uart_communication+0xb4>)
 8003be0:	2132      	movs	r1, #50	; 0x32
 8003be2:	2046      	movs	r0, #70	; 0x46
 8003be4:	f7ff fab2 	bl	800314c <lcd_ShowStr>
            lcd_ShowStr(140, 50, tempUart, GREEN, BLACK, 16, 1);
 8003be8:	2301      	movs	r3, #1
 8003bea:	9302      	str	r3, [sp, #8]
 8003bec:	2310      	movs	r3, #16
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <uart_communication+0xa4>)
 8003bfa:	2132      	movs	r1, #50	; 0x32
 8003bfc:	208c      	movs	r0, #140	; 0x8c
 8003bfe:	f7ff faa5 	bl	800314c <lcd_ShowStr>
            command_flag = 0;
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <uart_communication+0x9c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
        break;
 8003c08:	e001      	b.n	8003c0e <uart_communication+0x8e>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <uart_communication+0x90>
        break;
 8003c0e:	bf00      	nop
    }
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	2000000c 	.word	0x2000000c
 8003c1c:	20000385 	.word	0x20000385
 8003c20:	200003a8 	.word	0x200003a8
 8003c24:	200001d0 	.word	0x200001d0
 8003c28:	20000388 	.word	0x20000388
 8003c2c:	200001b8 	.word	0x200001b8
 8003c30:	200001cc 	.word	0x200001cc
 8003c34:	08009270 	.word	0x08009270

08003c38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <MX_USART1_UART_Init+0x50>)
 8003c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c5e:	220c      	movs	r2, #12
 8003c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c6e:	4805      	ldr	r0, [pc, #20]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c70:	f003 fb94 	bl	800739c <HAL_UART_Init>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c7a:	f7ff fc83 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200003c8 	.word	0x200003c8
 8003c88:	40011000 	.word	0x40011000

08003c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_UART_MspInit+0x94>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d134      	bne.n	8003d18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_UART_MspInit+0x98>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_UART_MspInit+0x98>)
 8003cb8:	f043 0310 	orr.w	r3, r3, #16
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_UART_MspInit+0x98>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_UART_MspInit+0x98>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <HAL_UART_MspInit+0x98>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_UART_MspInit+0x98>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cf8:	2307      	movs	r3, #7
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	4619      	mov	r1, r3
 8003d02:	4809      	ldr	r0, [pc, #36]	; (8003d28 <HAL_UART_MspInit+0x9c>)
 8003d04:	f000 fab4 	bl	8004270 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	2025      	movs	r0, #37	; 0x25
 8003d0e:	f000 f9e6 	bl	80040de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d12:	2025      	movs	r0, #37	; 0x25
 8003d14:	f000 f9ff 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40011000 	.word	0x40011000
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40020000 	.word	0x40020000

08003d2c <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	b2db      	uxtb	r3, r3
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <DEC2BCD+0x44>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	08db      	lsrs	r3, r3, #3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	b258      	sxtb	r0, r3
 8003d7a:	79fa      	ldrb	r2, [r7, #7]
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <DEC2BCD+0x44>)
 8003d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d82:	08d9      	lsrs	r1, r3, #3
 8003d84:	460b      	mov	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	4303      	orrs	r3, r0
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	cccccccd 	.word	0xcccccccd

08003da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dac:	480d      	ldr	r0, [pc, #52]	; (8003de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003dae:	490e      	ldr	r1, [pc, #56]	; (8003de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003db0:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003db4:	e002      	b.n	8003dbc <LoopCopyDataInit>

08003db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dba:	3304      	adds	r3, #4

08003dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dc0:	d3f9      	bcc.n	8003db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dc2:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dc4:	4c0b      	ldr	r4, [pc, #44]	; (8003df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc8:	e001      	b.n	8003dce <LoopFillZerobss>

08003dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dcc:	3204      	adds	r2, #4

08003dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dd0:	d3fb      	bcc.n	8003dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dd2:	f7ff fd47 	bl	8003864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dd6:	f004 fc2f 	bl	8008638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dda:	f7ff fae5 	bl	80033a8 <main>
  bx  lr    
 8003dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003dec:	0800c354 	.word	0x0800c354
  ldr r2, =_sbss
 8003df0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003df4:	20000420 	.word	0x20000420

08003df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df8:	e7fe      	b.n	8003df8 <ADC_IRQHandler>
	...

08003dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_Init+0x40>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <HAL_Init+0x40>)
 8003e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_Init+0x40>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_Init+0x40>)
 8003e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_Init+0x40>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_Init+0x40>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e24:	2003      	movs	r0, #3
 8003e26:	f000 f94f 	bl	80040c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e2a:	200f      	movs	r0, #15
 8003e2c:	f000 f808 	bl	8003e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e30:	f7ff fc7c 	bl	800372c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023c00 	.word	0x40023c00

08003e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_InitTick+0x54>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_InitTick+0x58>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f967 	bl	8004132 <HAL_SYSTICK_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00e      	b.n	8003e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b0f      	cmp	r3, #15
 8003e72:	d80a      	bhi.n	8003e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e74:	2200      	movs	r2, #0
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7c:	f000 f92f 	bl	80040de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e80:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <HAL_InitTick+0x5c>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000008 	.word	0x20000008
 8003e98:	20000014 	.word	0x20000014
 8003e9c:	20000010 	.word	0x20000010

08003ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_IncTick+0x20>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_IncTick+0x24>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <HAL_IncTick+0x24>)
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000014 	.word	0x20000014
 8003ec4:	2000040c 	.word	0x2000040c

08003ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return uwTick;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_GetTick+0x14>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	2000040c 	.word	0x2000040c

08003ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff ffee 	bl	8003ec8 <HAL_GetTick>
 8003eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d005      	beq.n	8003f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_Delay+0x44>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f06:	bf00      	nop
 8003f08:	f7ff ffde 	bl	8003ec8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d8f7      	bhi.n	8003f08 <HAL_Delay+0x28>
  {
  }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000014 	.word	0x20000014

08003f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f44:	4013      	ands	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	60d3      	str	r3, [r2, #12]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <__NVIC_GetPriorityGrouping+0x18>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 0307 	and.w	r3, r3, #7
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db0b      	blt.n	8003fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	f003 021f 	and.w	r2, r3, #31
 8003fa4:	4907      	ldr	r1, [pc, #28]	; (8003fc4 <__NVIC_EnableIRQ+0x38>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2001      	movs	r0, #1
 8003fae:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000e100 	.word	0xe000e100

08003fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db0a      	blt.n	8003ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	490c      	ldr	r1, [pc, #48]	; (8004014 <__NVIC_SetPriority+0x4c>)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	440b      	add	r3, r1
 8003fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff0:	e00a      	b.n	8004008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4908      	ldr	r1, [pc, #32]	; (8004018 <__NVIC_SetPriority+0x50>)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3b04      	subs	r3, #4
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	440b      	add	r3, r1
 8004006:	761a      	strb	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	; 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf28      	it	cs
 800403a:	2304      	movcs	r3, #4
 800403c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3304      	adds	r3, #4
 8004042:	2b06      	cmp	r3, #6
 8004044:	d902      	bls.n	800404c <NVIC_EncodePriority+0x30>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3b03      	subs	r3, #3
 800404a:	e000      	b.n	800404e <NVIC_EncodePriority+0x32>
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	401a      	ands	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004064:	f04f 31ff 	mov.w	r1, #4294967295
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43d9      	mvns	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	4313      	orrs	r3, r2
         );
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004094:	d301      	bcc.n	800409a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004096:	2301      	movs	r3, #1
 8004098:	e00f      	b.n	80040ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800409a:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <SysTick_Config+0x40>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3b01      	subs	r3, #1
 80040a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040a2:	210f      	movs	r1, #15
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	f7ff ff8e 	bl	8003fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <SysTick_Config+0x40>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <SysTick_Config+0x40>)
 80040b4:	2207      	movs	r2, #7
 80040b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	e000e010 	.word	0xe000e010

080040c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff29 	bl	8003f28 <__NVIC_SetPriorityGrouping>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	4603      	mov	r3, r0
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040f0:	f7ff ff3e 	bl	8003f70 <__NVIC_GetPriorityGrouping>
 80040f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f7ff ff8e 	bl	800401c <NVIC_EncodePriority>
 8004100:	4602      	mov	r2, r0
 8004102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff5d 	bl	8003fc8 <__NVIC_SetPriority>
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	4603      	mov	r3, r0
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ff31 	bl	8003f8c <__NVIC_EnableIRQ>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff ffa2 	bl	8004084 <SysTick_Config>
 8004140:	4603      	mov	r3, r0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7ff feb6 	bl	8003ec8 <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d008      	beq.n	800417c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e052      	b.n	8004222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0216 	bic.w	r2, r2, #22
 800418a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800419a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <HAL_DMA_Abort+0x62>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0208 	bic.w	r2, r2, #8
 80041ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041cc:	e013      	b.n	80041f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ce:	f7ff fe7b 	bl	8003ec8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b05      	cmp	r3, #5
 80041da:	d90c      	bls.n	80041f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e015      	b.n	8004222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e4      	bne.n	80041ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	223f      	movs	r2, #63	; 0x3f
 800420a:	409a      	lsls	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d004      	beq.n	8004248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e00c      	b.n	8004262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2205      	movs	r2, #5
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e16b      	b.n	8004564 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800428c:	2201      	movs	r2, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	f040 815a 	bne.w	800455e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d005      	beq.n	80042c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d130      	bne.n	8004324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2203      	movs	r2, #3
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f8:	2201      	movs	r2, #1
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 0201 	and.w	r2, r3, #1
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b03      	cmp	r3, #3
 800432e:	d017      	beq.n	8004360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d123      	bne.n	80043b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	08da      	lsrs	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3208      	adds	r2, #8
 8004374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	220f      	movs	r2, #15
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	08da      	lsrs	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3208      	adds	r2, #8
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2203      	movs	r2, #3
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0203 	and.w	r2, r3, #3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80b4 	beq.w	800455e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	4b60      	ldr	r3, [pc, #384]	; (800457c <HAL_GPIO_Init+0x30c>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	4a5f      	ldr	r2, [pc, #380]	; (800457c <HAL_GPIO_Init+0x30c>)
 8004400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004404:	6453      	str	r3, [r2, #68]	; 0x44
 8004406:	4b5d      	ldr	r3, [pc, #372]	; (800457c <HAL_GPIO_Init+0x30c>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004412:	4a5b      	ldr	r2, [pc, #364]	; (8004580 <HAL_GPIO_Init+0x310>)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	220f      	movs	r2, #15
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a52      	ldr	r2, [pc, #328]	; (8004584 <HAL_GPIO_Init+0x314>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d02b      	beq.n	8004496 <HAL_GPIO_Init+0x226>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a51      	ldr	r2, [pc, #324]	; (8004588 <HAL_GPIO_Init+0x318>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d025      	beq.n	8004492 <HAL_GPIO_Init+0x222>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a50      	ldr	r2, [pc, #320]	; (800458c <HAL_GPIO_Init+0x31c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01f      	beq.n	800448e <HAL_GPIO_Init+0x21e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4f      	ldr	r2, [pc, #316]	; (8004590 <HAL_GPIO_Init+0x320>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d019      	beq.n	800448a <HAL_GPIO_Init+0x21a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a4e      	ldr	r2, [pc, #312]	; (8004594 <HAL_GPIO_Init+0x324>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_GPIO_Init+0x216>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4d      	ldr	r2, [pc, #308]	; (8004598 <HAL_GPIO_Init+0x328>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00d      	beq.n	8004482 <HAL_GPIO_Init+0x212>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4c      	ldr	r2, [pc, #304]	; (800459c <HAL_GPIO_Init+0x32c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d007      	beq.n	800447e <HAL_GPIO_Init+0x20e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a4b      	ldr	r2, [pc, #300]	; (80045a0 <HAL_GPIO_Init+0x330>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d101      	bne.n	800447a <HAL_GPIO_Init+0x20a>
 8004476:	2307      	movs	r3, #7
 8004478:	e00e      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800447a:	2308      	movs	r3, #8
 800447c:	e00c      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800447e:	2306      	movs	r3, #6
 8004480:	e00a      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004482:	2305      	movs	r3, #5
 8004484:	e008      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004486:	2304      	movs	r3, #4
 8004488:	e006      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800448a:	2303      	movs	r3, #3
 800448c:	e004      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800448e:	2302      	movs	r3, #2
 8004490:	e002      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004496:	2300      	movs	r3, #0
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	f002 0203 	and.w	r2, r2, #3
 800449e:	0092      	lsls	r2, r2, #2
 80044a0:	4093      	lsls	r3, r2
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044a8:	4935      	ldr	r1, [pc, #212]	; (8004580 <HAL_GPIO_Init+0x310>)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	089b      	lsrs	r3, r3, #2
 80044ae:	3302      	adds	r3, #2
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044b6:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_GPIO_Init+0x334>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044da:	4a32      	ldr	r2, [pc, #200]	; (80045a4 <HAL_GPIO_Init+0x334>)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044e0:	4b30      	ldr	r3, [pc, #192]	; (80045a4 <HAL_GPIO_Init+0x334>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004504:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <HAL_GPIO_Init+0x334>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <HAL_GPIO_Init+0x334>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800452e:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_GPIO_Init+0x334>)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_GPIO_Init+0x334>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004558:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <HAL_GPIO_Init+0x334>)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	f67f ae90 	bls.w	800428c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	3724      	adds	r7, #36	; 0x24
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	40013800 	.word	0x40013800
 8004584:	40020000 	.word	0x40020000
 8004588:	40020400 	.word	0x40020400
 800458c:	40020800 	.word	0x40020800
 8004590:	40020c00 	.word	0x40020c00
 8004594:	40021000 	.word	0x40021000
 8004598:	40021400 	.word	0x40021400
 800459c:	40021800 	.word	0x40021800
 80045a0:	40021c00 	.word	0x40021c00
 80045a4:	40013c00 	.word	0x40013c00

080045a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	807b      	strh	r3, [r7, #2]
 80045b4:	4613      	mov	r3, r2
 80045b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b8:	787b      	ldrb	r3, [r7, #1]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045c4:	e003      	b.n	80045ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	041a      	lsls	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	619a      	str	r2, [r3, #24]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ec:	887a      	ldrh	r2, [r7, #2]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4013      	ands	r3, r2
 80045f2:	041a      	lsls	r2, r3, #16
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43d9      	mvns	r1, r3
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	400b      	ands	r3, r1
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	619a      	str	r2, [r3, #24]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e12b      	b.n	800487a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe f94c 	bl	80028d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004674:	f001 fbfc 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 8004678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4a81      	ldr	r2, [pc, #516]	; (8004884 <HAL_I2C_Init+0x274>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d807      	bhi.n	8004694 <HAL_I2C_Init+0x84>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a80      	ldr	r2, [pc, #512]	; (8004888 <HAL_I2C_Init+0x278>)
 8004688:	4293      	cmp	r3, r2
 800468a:	bf94      	ite	ls
 800468c:	2301      	movls	r3, #1
 800468e:	2300      	movhi	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e006      	b.n	80046a2 <HAL_I2C_Init+0x92>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a7d      	ldr	r2, [pc, #500]	; (800488c <HAL_I2C_Init+0x27c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	bf94      	ite	ls
 800469c:	2301      	movls	r3, #1
 800469e:	2300      	movhi	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0e7      	b.n	800487a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a78      	ldr	r2, [pc, #480]	; (8004890 <HAL_I2C_Init+0x280>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4a6a      	ldr	r2, [pc, #424]	; (8004884 <HAL_I2C_Init+0x274>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d802      	bhi.n	80046e4 <HAL_I2C_Init+0xd4>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3301      	adds	r3, #1
 80046e2:	e009      	b.n	80046f8 <HAL_I2C_Init+0xe8>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	4a69      	ldr	r2, [pc, #420]	; (8004894 <HAL_I2C_Init+0x284>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	3301      	adds	r3, #1
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800470a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	495c      	ldr	r1, [pc, #368]	; (8004884 <HAL_I2C_Init+0x274>)
 8004714:	428b      	cmp	r3, r1
 8004716:	d819      	bhi.n	800474c <HAL_I2C_Init+0x13c>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e59      	subs	r1, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fbb1 f3f3 	udiv	r3, r1, r3
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800472c:	400b      	ands	r3, r1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_I2C_Init+0x138>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1e59      	subs	r1, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	e051      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 8004748:	2304      	movs	r3, #4
 800474a:	e04f      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <HAL_I2C_Init+0x168>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1e58      	subs	r0, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	440b      	add	r3, r1
 8004762:	fbb0 f3f3 	udiv	r3, r0, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e012      	b.n	800479e <HAL_I2C_Init+0x18e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1e58      	subs	r0, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	0099      	lsls	r1, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	fbb0 f3f3 	udiv	r3, r0, r3
 800478e:	3301      	adds	r3, #1
 8004790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Init+0x196>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e022      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10e      	bne.n	80047cc <HAL_I2C_Init+0x1bc>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1e58      	subs	r0, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	440b      	add	r3, r1
 80047bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ca:	e00f      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e58      	subs	r0, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	0099      	lsls	r1, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	6809      	ldr	r1, [r1, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800481a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6911      	ldr	r1, [r2, #16]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	4311      	orrs	r1, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	430b      	orrs	r3, r1
 800482e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	000186a0 	.word	0x000186a0
 8004888:	001e847f 	.word	0x001e847f
 800488c:	003d08ff 	.word	0x003d08ff
 8004890:	431bde83 	.word	0x431bde83
 8004894:	10624dd3 	.word	0x10624dd3

08004898 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	460b      	mov	r3, r1
 80048ac:	813b      	strh	r3, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048b2:	f7ff fb09 	bl	8003ec8 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	f040 80d9 	bne.w	8004a78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2319      	movs	r3, #25
 80048cc:	2201      	movs	r2, #1
 80048ce:	496d      	ldr	r1, [pc, #436]	; (8004a84 <HAL_I2C_Mem_Write+0x1ec>)
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fc7f 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
 80048de:	e0cc      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_I2C_Mem_Write+0x56>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0c5      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d007      	beq.n	8004914 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004922:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a4d      	ldr	r2, [pc, #308]	; (8004a88 <HAL_I2C_Mem_Write+0x1f0>)
 8004954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004956:	88f8      	ldrh	r0, [r7, #6]
 8004958:	893a      	ldrh	r2, [r7, #8]
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	4603      	mov	r3, r0
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fab6 	bl	8004ed8 <I2C_RequestMemoryWrite>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d052      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e081      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fd00 	bl	8005380 <I2C_WaitOnTXEFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	2b04      	cmp	r3, #4
 800498c:	d107      	bne.n	800499e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06b      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11b      	bne.n	8004a18 <HAL_I2C_Mem_Write+0x180>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d017      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1aa      	bne.n	8004976 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fcec 	bl	8005402 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d107      	bne.n	8004a48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e016      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	00100002 	.word	0x00100002
 8004a88:	ffff0000 	.word	0xffff0000

08004a8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08c      	sub	sp, #48	; 0x30
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	4608      	mov	r0, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	817b      	strh	r3, [r7, #10]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	813b      	strh	r3, [r7, #8]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aa6:	f7ff fa0f 	bl	8003ec8 <HAL_GetTick>
 8004aaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 8208 	bne.w	8004eca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2319      	movs	r3, #25
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	497b      	ldr	r1, [pc, #492]	; (8004cb0 <HAL_I2C_Mem_Read+0x224>)
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fb85 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e1fb      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Mem_Read+0x56>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e1f4      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d007      	beq.n	8004b08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2222      	movs	r2, #34	; 0x22
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a5b      	ldr	r2, [pc, #364]	; (8004cb4 <HAL_I2C_Mem_Read+0x228>)
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b4a:	88f8      	ldrh	r0, [r7, #6]
 8004b4c:	893a      	ldrh	r2, [r7, #8]
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fa52 	bl	8005004 <I2C_RequestMemoryRead>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e1b0      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d113      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e184      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d11b      	bne.n	8004bda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e164      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d11b      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	e144      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c30:	e138      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	f200 80f1 	bhi.w	8004e1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d123      	bne.n	8004c8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fc1b 	bl	8005484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e139      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c8a:	e10b      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d14e      	bne.n	8004d32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4906      	ldr	r1, [pc, #24]	; (8004cb8 <HAL_I2C_Mem_Read+0x22c>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fa98 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e10e      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
 8004cae:	bf00      	nop
 8004cb0:	00100002 	.word	0x00100002
 8004cb4:	ffff0000 	.word	0xffff0000
 8004cb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d30:	e0b8      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4966      	ldr	r1, [pc, #408]	; (8004ed4 <HAL_I2C_Mem_Read+0x448>)
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fa49 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0bf      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	2200      	movs	r2, #0
 8004d96:	494f      	ldr	r1, [pc, #316]	; (8004ed4 <HAL_I2C_Mem_Read+0x448>)
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fa1b 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e091      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e1c:	e042      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fb2e 	bl	8005484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e04c      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d118      	bne.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f aec2 	bne.w	8004c32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3728      	adds	r7, #40	; 0x28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	00010004 	.word	0x00010004

08004ed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	817b      	strh	r3, [r7, #10]
 8004eea:	460b      	mov	r3, r1
 8004eec:	813b      	strh	r3, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f960 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f28:	d103      	bne.n	8004f32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e05f      	b.n	8004ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f36:	897b      	ldrh	r3, [r7, #10]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	492d      	ldr	r1, [pc, #180]	; (8005000 <I2C_RequestMemoryWrite+0x128>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f998 	bl	8005282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e04c      	b.n	8004ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6a39      	ldr	r1, [r7, #32]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa02 	bl	8005380 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d107      	bne.n	8004f9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e02b      	b.n	8004ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa4:	893b      	ldrh	r3, [r7, #8]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	611a      	str	r2, [r3, #16]
 8004fae:	e021      	b.n	8004ff4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fb0:	893b      	ldrh	r3, [r7, #8]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc0:	6a39      	ldr	r1, [r7, #32]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f9dc 	bl	8005380 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d107      	bne.n	8004fe6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e005      	b.n	8004ff6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fea:	893b      	ldrh	r3, [r7, #8]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	00010002 	.word	0x00010002

08005004 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	461a      	mov	r2, r3
 8005012:	4603      	mov	r3, r0
 8005014:	817b      	strh	r3, [r7, #10]
 8005016:	460b      	mov	r3, r1
 8005018:	813b      	strh	r3, [r7, #8]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800502c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	2200      	movs	r2, #0
 8005046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f8c2 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00d      	beq.n	8005072 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005064:	d103      	bne.n	800506e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e0aa      	b.n	80051c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	4952      	ldr	r1, [pc, #328]	; (80051d0 <I2C_RequestMemoryRead+0x1cc>)
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f8fa 	bl	8005282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e097      	b.n	80051c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b0:	6a39      	ldr	r1, [r7, #32]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f964 	bl	8005380 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d107      	bne.n	80050d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e076      	b.n	80051c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d105      	bne.n	80050ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050e0:	893b      	ldrh	r3, [r7, #8]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	611a      	str	r2, [r3, #16]
 80050ea:	e021      	b.n	8005130 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050ec:	893b      	ldrh	r3, [r7, #8]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	6a39      	ldr	r1, [r7, #32]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f93e 	bl	8005380 <I2C_WaitOnTXEFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00d      	beq.n	8005126 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	2b04      	cmp	r3, #4
 8005110:	d107      	bne.n	8005122 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e050      	b.n	80051c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005126:	893b      	ldrh	r3, [r7, #8]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005132:	6a39      	ldr	r1, [r7, #32]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f923 	bl	8005380 <I2C_WaitOnTXEFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b04      	cmp	r3, #4
 8005146:	d107      	bne.n	8005158 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005156:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e035      	b.n	80051c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	2200      	movs	r2, #0
 8005174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f82b 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d103      	bne.n	800519c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e013      	b.n	80051c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051a0:	897b      	ldrh	r3, [r7, #10]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	6a3a      	ldr	r2, [r7, #32]
 80051b4:	4906      	ldr	r1, [pc, #24]	; (80051d0 <I2C_RequestMemoryRead+0x1cc>)
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f863 	bl	8005282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	00010002 	.word	0x00010002

080051d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e4:	e025      	b.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d021      	beq.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fe fe6b 	bl	8003ec8 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e023      	b.n	800527a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10d      	bne.n	8005258 <I2C_WaitOnFlagUntilTimeout+0x84>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	e00c      	b.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4013      	ands	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf0c      	ite	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	2300      	movne	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	429a      	cmp	r2, r3
 8005276:	d0b6      	beq.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005290:	e051      	b.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a0:	d123      	bne.n	80052ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e046      	b.n	8005378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d021      	beq.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fe fde9 	bl	8003ec8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d116      	bne.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f043 0220 	orr.w	r2, r3, #32
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e020      	b.n	8005378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10c      	bne.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	43da      	mvns	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e00b      	b.n	8005372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	43da      	mvns	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d18d      	bne.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800538c:	e02d      	b.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f8ce 	bl	8005530 <I2C_IsAcknowledgeFailed>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e02d      	b.n	80053fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d021      	beq.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fe fd8f 	bl	8003ec8 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e007      	b.n	80053fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d1ca      	bne.n	800538e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800540e:	e02d      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f88d 	bl	8005530 <I2C_IsAcknowledgeFailed>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e02d      	b.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d021      	beq.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005428:	f7fe fd4e 	bl	8003ec8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	429a      	cmp	r2, r3
 8005436:	d302      	bcc.n	800543e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d116      	bne.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e007      	b.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d1ca      	bne.n	8005410 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005490:	e042      	b.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b10      	cmp	r3, #16
 800549e:	d119      	bne.n	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0210 	mvn.w	r2, #16
 80054a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e029      	b.n	8005528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d4:	f7fe fcf8 	bl	8003ec8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d302      	bcc.n	80054ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d116      	bne.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e007      	b.n	8005528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d1b5      	bne.n	8005492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005546:	d11b      	bne.n	8005580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	f043 0204 	orr.w	r2, r3, #4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e267      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d075      	beq.n	800569a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ae:	4b88      	ldr	r3, [pc, #544]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d00c      	beq.n	80055d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ba:	4b85      	ldr	r3, [pc, #532]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d112      	bne.n	80055ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c6:	4b82      	ldr	r3, [pc, #520]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d2:	d10b      	bne.n	80055ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d4:	4b7e      	ldr	r3, [pc, #504]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d05b      	beq.n	8005698 <HAL_RCC_OscConfig+0x108>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d157      	bne.n	8005698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e242      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f4:	d106      	bne.n	8005604 <HAL_RCC_OscConfig+0x74>
 80055f6:	4b76      	ldr	r3, [pc, #472]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a75      	ldr	r2, [pc, #468]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e01d      	b.n	8005640 <HAL_RCC_OscConfig+0xb0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800560c:	d10c      	bne.n	8005628 <HAL_RCC_OscConfig+0x98>
 800560e:	4b70      	ldr	r3, [pc, #448]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6f      	ldr	r2, [pc, #444]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4b6d      	ldr	r3, [pc, #436]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6c      	ldr	r2, [pc, #432]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e00b      	b.n	8005640 <HAL_RCC_OscConfig+0xb0>
 8005628:	4b69      	ldr	r3, [pc, #420]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a68      	ldr	r2, [pc, #416]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 800562e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	4b66      	ldr	r3, [pc, #408]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a65      	ldr	r2, [pc, #404]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 800563a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800563e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d013      	beq.n	8005670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fe fc3e 	bl	8003ec8 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005650:	f7fe fc3a 	bl	8003ec8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	; 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e207      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005662:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0xc0>
 800566e:	e014      	b.n	800569a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005670:	f7fe fc2a 	bl	8003ec8 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005678:	f7fe fc26 	bl	8003ec8 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e1f3      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568a:	4b51      	ldr	r3, [pc, #324]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0xe8>
 8005696:	e000      	b.n	800569a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d063      	beq.n	800576e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056a6:	4b4a      	ldr	r3, [pc, #296]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056b2:	4b47      	ldr	r3, [pc, #284]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d11c      	bne.n	80056f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056be:	4b44      	ldr	r3, [pc, #272]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d116      	bne.n	80056f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_RCC_OscConfig+0x152>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d001      	beq.n	80056e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e1c7      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e2:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4937      	ldr	r1, [pc, #220]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f6:	e03a      	b.n	800576e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d020      	beq.n	8005742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005700:	4b34      	ldr	r3, [pc, #208]	; (80057d4 <HAL_RCC_OscConfig+0x244>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fe fbdf 	bl	8003ec8 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800570e:	f7fe fbdb 	bl	8003ec8 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e1a8      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572c:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4925      	ldr	r1, [pc, #148]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 800573c:	4313      	orrs	r3, r2
 800573e:	600b      	str	r3, [r1, #0]
 8005740:	e015      	b.n	800576e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005742:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <HAL_RCC_OscConfig+0x244>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fe fbbe 	bl	8003ec8 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005750:	f7fe fbba 	bl	8003ec8 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e187      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d036      	beq.n	80057e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d016      	beq.n	80057b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <HAL_RCC_OscConfig+0x248>)
 8005784:	2201      	movs	r2, #1
 8005786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fe fb9e 	bl	8003ec8 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005790:	f7fe fb9a 	bl	8003ec8 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e167      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a2:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCC_OscConfig+0x240>)
 80057a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x200>
 80057ae:	e01b      	b.n	80057e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <HAL_RCC_OscConfig+0x248>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b6:	f7fe fb87 	bl	8003ec8 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057bc:	e00e      	b.n	80057dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057be:	f7fe fb83 	bl	8003ec8 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d907      	bls.n	80057dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e150      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
 80057d0:	40023800 	.word	0x40023800
 80057d4:	42470000 	.word	0x42470000
 80057d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057dc:	4b88      	ldr	r3, [pc, #544]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80057de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ea      	bne.n	80057be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8097 	beq.w	8005924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fa:	4b81      	ldr	r3, [pc, #516]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10f      	bne.n	8005826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	4b7d      	ldr	r3, [pc, #500]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	4a7c      	ldr	r2, [pc, #496]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005814:	6413      	str	r3, [r2, #64]	; 0x40
 8005816:	4b7a      	ldr	r3, [pc, #488]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005822:	2301      	movs	r3, #1
 8005824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005826:	4b77      	ldr	r3, [pc, #476]	; (8005a04 <HAL_RCC_OscConfig+0x474>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d118      	bne.n	8005864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005832:	4b74      	ldr	r3, [pc, #464]	; (8005a04 <HAL_RCC_OscConfig+0x474>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a73      	ldr	r2, [pc, #460]	; (8005a04 <HAL_RCC_OscConfig+0x474>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800583e:	f7fe fb43 	bl	8003ec8 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7fe fb3f 	bl	8003ec8 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e10c      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005858:	4b6a      	ldr	r3, [pc, #424]	; (8005a04 <HAL_RCC_OscConfig+0x474>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d106      	bne.n	800587a <HAL_RCC_OscConfig+0x2ea>
 800586c:	4b64      	ldr	r3, [pc, #400]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005870:	4a63      	ldr	r2, [pc, #396]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	6713      	str	r3, [r2, #112]	; 0x70
 8005878:	e01c      	b.n	80058b4 <HAL_RCC_OscConfig+0x324>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b05      	cmp	r3, #5
 8005880:	d10c      	bne.n	800589c <HAL_RCC_OscConfig+0x30c>
 8005882:	4b5f      	ldr	r3, [pc, #380]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	4a5e      	ldr	r2, [pc, #376]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005888:	f043 0304 	orr.w	r3, r3, #4
 800588c:	6713      	str	r3, [r2, #112]	; 0x70
 800588e:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	4a5b      	ldr	r2, [pc, #364]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	6713      	str	r3, [r2, #112]	; 0x70
 800589a:	e00b      	b.n	80058b4 <HAL_RCC_OscConfig+0x324>
 800589c:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	6713      	str	r3, [r2, #112]	; 0x70
 80058a8:	4b55      	ldr	r3, [pc, #340]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	4a54      	ldr	r2, [pc, #336]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80058ae:	f023 0304 	bic.w	r3, r3, #4
 80058b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d015      	beq.n	80058e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058bc:	f7fe fb04 	bl	8003ec8 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c2:	e00a      	b.n	80058da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c4:	f7fe fb00 	bl	8003ec8 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0cb      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058da:	4b49      	ldr	r3, [pc, #292]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0ee      	beq.n	80058c4 <HAL_RCC_OscConfig+0x334>
 80058e6:	e014      	b.n	8005912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e8:	f7fe faee 	bl	8003ec8 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f0:	f7fe faea 	bl	8003ec8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e0b5      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1ee      	bne.n	80058f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005912:	7dfb      	ldrb	r3, [r7, #23]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d105      	bne.n	8005924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005918:	4b39      	ldr	r3, [pc, #228]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	4a38      	ldr	r2, [pc, #224]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 800591e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80a1 	beq.w	8005a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800592e:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b08      	cmp	r3, #8
 8005938:	d05c      	beq.n	80059f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d141      	bne.n	80059c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005942:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005948:	f7fe fabe 	bl	8003ec8 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005950:	f7fe faba 	bl	8003ec8 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e087      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005962:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	019b      	lsls	r3, r3, #6
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	3b01      	subs	r3, #1
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	491b      	ldr	r1, [pc, #108]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005998:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <HAL_RCC_OscConfig+0x478>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599e:	f7fe fa93 	bl	8003ec8 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a6:	f7fe fa8f 	bl	8003ec8 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e05c      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x416>
 80059c4:	e054      	b.n	8005a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HAL_RCC_OscConfig+0x478>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fe fa7c 	bl	8003ec8 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fe fa78 	bl	8003ec8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e045      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCC_OscConfig+0x470>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x444>
 80059f2:	e03d      	b.n	8005a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e038      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40007000 	.word	0x40007000
 8005a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <HAL_RCC_OscConfig+0x4ec>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d028      	beq.n	8005a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d121      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d11a      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d111      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	3b01      	subs	r3, #1
 8005a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40023800 	.word	0x40023800

08005a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0cc      	b.n	8005c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a94:	4b68      	ldr	r3, [pc, #416]	; (8005c38 <HAL_RCC_ClockConfig+0x1b8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d90c      	bls.n	8005abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa2:	4b65      	ldr	r3, [pc, #404]	; (8005c38 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aaa:	4b63      	ldr	r3, [pc, #396]	; (8005c38 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0b8      	b.n	8005c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d020      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ad4:	4b59      	ldr	r3, [pc, #356]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4a58      	ldr	r2, [pc, #352]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aec:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a52      	ldr	r2, [pc, #328]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af8:	4b50      	ldr	r3, [pc, #320]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	494d      	ldr	r1, [pc, #308]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d044      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1e:	4b47      	ldr	r3, [pc, #284]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d119      	bne.n	8005b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e07f      	b.n	8005c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d003      	beq.n	8005b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b3e:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e06f      	b.n	8005c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4e:	4b3b      	ldr	r3, [pc, #236]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e067      	b.n	8005c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b5e:	4b37      	ldr	r3, [pc, #220]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f023 0203 	bic.w	r2, r3, #3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4934      	ldr	r1, [pc, #208]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b70:	f7fe f9aa 	bl	8003ec8 <HAL_GetTick>
 8005b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b76:	e00a      	b.n	8005b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b78:	f7fe f9a6 	bl	8003ec8 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e04f      	b.n	8005c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8e:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 020c 	and.w	r2, r3, #12
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d1eb      	bne.n	8005b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d20c      	bcs.n	8005bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e032      	b.n	8005c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd4:	4b19      	ldr	r3, [pc, #100]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4916      	ldr	r1, [pc, #88]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bf2:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	490e      	ldr	r1, [pc, #56]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c06:	f000 f821 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	091b      	lsrs	r3, r3, #4
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	490a      	ldr	r1, [pc, #40]	; (8005c40 <HAL_RCC_ClockConfig+0x1c0>)
 8005c18:	5ccb      	ldrb	r3, [r1, r3]
 8005c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1e:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_RCC_ClockConfig+0x1c8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe f90a 	bl	8003e40 <HAL_InitTick>

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40023c00 	.word	0x40023c00
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	0800c1f8 	.word	0x0800c1f8
 8005c44:	20000008 	.word	0x20000008
 8005c48:	20000010 	.word	0x20000010

08005c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c50:	b094      	sub	sp, #80	; 0x50
 8005c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	647b      	str	r3, [r7, #68]	; 0x44
 8005c58:	2300      	movs	r3, #0
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c64:	4b79      	ldr	r3, [pc, #484]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d00d      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x40>
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	f200 80e1 	bhi.w	8005e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_RCC_GetSysClockFreq+0x34>
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c7e:	e0db      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c80:	4b73      	ldr	r3, [pc, #460]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c84:	e0db      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c86:	4b73      	ldr	r3, [pc, #460]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c8a:	e0d8      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c8c:	4b6f      	ldr	r3, [pc, #444]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c96:	4b6d      	ldr	r3, [pc, #436]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d063      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ca2:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	2200      	movs	r2, #0
 8005caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	0159      	lsls	r1, r3, #5
 8005ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cd0:	0150      	lsls	r0, r2, #5
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	1a51      	subs	r1, r2, r1
 8005cda:	6139      	str	r1, [r7, #16]
 8005cdc:	4629      	mov	r1, r5
 8005cde:	eb63 0301 	sbc.w	r3, r3, r1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cf0:	4659      	mov	r1, fp
 8005cf2:	018b      	lsls	r3, r1, #6
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cfa:	4651      	mov	r1, sl
 8005cfc:	018a      	lsls	r2, r1, #6
 8005cfe:	4651      	mov	r1, sl
 8005d00:	ebb2 0801 	subs.w	r8, r2, r1
 8005d04:	4659      	mov	r1, fp
 8005d06:	eb63 0901 	sbc.w	r9, r3, r1
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1e:	4690      	mov	r8, r2
 8005d20:	4699      	mov	r9, r3
 8005d22:	4623      	mov	r3, r4
 8005d24:	eb18 0303 	adds.w	r3, r8, r3
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	eb49 0303 	adc.w	r3, r9, r3
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d3e:	4629      	mov	r1, r5
 8005d40:	024b      	lsls	r3, r1, #9
 8005d42:	4621      	mov	r1, r4
 8005d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d48:	4621      	mov	r1, r4
 8005d4a:	024a      	lsls	r2, r1, #9
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d52:	2200      	movs	r2, #0
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d5c:	f7fa fa90 	bl	8000280 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d68:	e058      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6a:	4b38      	ldr	r3, [pc, #224]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	2200      	movs	r2, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	4611      	mov	r1, r2
 8005d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d7a:	623b      	str	r3, [r7, #32]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d84:	4642      	mov	r2, r8
 8005d86:	464b      	mov	r3, r9
 8005d88:	f04f 0000 	mov.w	r0, #0
 8005d8c:	f04f 0100 	mov.w	r1, #0
 8005d90:	0159      	lsls	r1, r3, #5
 8005d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d96:	0150      	lsls	r0, r2, #5
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005da2:	4649      	mov	r1, r9
 8005da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8005dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	00eb      	lsls	r3, r5, #3
 8005dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dd2:	00e2      	lsls	r2, r4, #3
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	4643      	mov	r3, r8
 8005dda:	18e3      	adds	r3, r4, r3
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	464b      	mov	r3, r9
 8005de0:	eb45 0303 	adc.w	r3, r5, r3
 8005de4:	607b      	str	r3, [r7, #4]
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005df2:	4629      	mov	r1, r5
 8005df4:	028b      	lsls	r3, r1, #10
 8005df6:	4621      	mov	r1, r4
 8005df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	028a      	lsls	r2, r1, #10
 8005e00:	4610      	mov	r0, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e06:	2200      	movs	r2, #0
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	61fa      	str	r2, [r7, #28]
 8005e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e10:	f7fa fa36 	bl	8000280 <__aeabi_uldivmod>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4613      	mov	r3, r2
 8005e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	3301      	adds	r3, #1
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e36:	e002      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3750      	adds	r7, #80	; 0x50
 8005e44:	46bd      	mov	sp, r7
 8005e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	00f42400 	.word	0x00f42400
 8005e54:	007a1200 	.word	0x007a1200

08005e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000008 	.word	0x20000008

08005e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e74:	f7ff fff0 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	0a9b      	lsrs	r3, r3, #10
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	4903      	ldr	r1, [pc, #12]	; (8005e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e86:	5ccb      	ldrb	r3, [r1, r3]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40023800 	.word	0x40023800
 8005e94:	0800c208 	.word	0x0800c208

08005e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e9c:	f7ff ffdc 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	0b5b      	lsrs	r3, r3, #13
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	4903      	ldr	r1, [pc, #12]	; (8005ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eae:	5ccb      	ldrb	r3, [r1, r3]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	0800c208 	.word	0x0800c208

08005ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e07b      	b.n	8005fca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d108      	bne.n	8005eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee2:	d009      	beq.n	8005ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	61da      	str	r2, [r3, #28]
 8005eea:	e005      	b.n	8005ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fd fbc2 	bl	800369c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	ea42 0103 	orr.w	r1, r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	f003 0104 	and.w	r1, r3, #4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	f003 0210 	and.w	r2, r3, #16
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b088      	sub	sp, #32
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_SPI_Transmit+0x22>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e126      	b.n	8006242 <HAL_SPI_Transmit+0x270>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ffc:	f7fd ff64 	bl	8003ec8 <HAL_GetTick>
 8006000:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006016:	e10b      	b.n	8006230 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_SPI_Transmit+0x52>
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006028:	e102      	b.n	8006230 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2203      	movs	r2, #3
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	88fa      	ldrh	r2, [r7, #6]
 8006048:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006070:	d10f      	bne.n	8006092 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006080:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006090:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b40      	cmp	r3, #64	; 0x40
 800609e:	d007      	beq.n	80060b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b8:	d14b      	bne.n	8006152 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_SPI_Transmit+0xf6>
 80060c2:	8afb      	ldrh	r3, [r7, #22]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d13e      	bne.n	8006146 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	881a      	ldrh	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	1c9a      	adds	r2, r3, #2
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060ec:	e02b      	b.n	8006146 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d112      	bne.n	8006122 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	881a      	ldrh	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006120:	e011      	b.n	8006146 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006122:	f7fd fed1 	bl	8003ec8 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d803      	bhi.n	800613a <HAL_SPI_Transmit+0x168>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d102      	bne.n	8006140 <HAL_SPI_Transmit+0x16e>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006144:	e074      	b.n	8006230 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ce      	bne.n	80060ee <HAL_SPI_Transmit+0x11c>
 8006150:	e04c      	b.n	80061ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_SPI_Transmit+0x18e>
 800615a:	8afb      	ldrh	r3, [r7, #22]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d140      	bne.n	80061e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006186:	e02c      	b.n	80061e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	d113      	bne.n	80061be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80061bc:	e011      	b.n	80061e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061be:	f7fd fe83 	bl	8003ec8 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d803      	bhi.n	80061d6 <HAL_SPI_Transmit+0x204>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d102      	bne.n	80061dc <HAL_SPI_Transmit+0x20a>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061e0:	e026      	b.n	8006230 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1cd      	bne.n	8006188 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fbcb 	bl	800698c <SPI_EndRxTxTransaction>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e000      	b.n	8006230 <HAL_SPI_Transmit+0x25e>
  }

error:
 800622e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006240:	7ffb      	ldrb	r3, [r7, #31]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b088      	sub	sp, #32
 800624e:	af02      	add	r7, sp, #8
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	603b      	str	r3, [r7, #0]
 8006256:	4613      	mov	r3, r2
 8006258:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006266:	d112      	bne.n	800628e <HAL_SPI_Receive+0x44>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10e      	bne.n	800628e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2204      	movs	r2, #4
 8006274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4613      	mov	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f8f1 	bl	800646c <HAL_SPI_TransmitReceive>
 800628a:	4603      	mov	r3, r0
 800628c:	e0ea      	b.n	8006464 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_SPI_Receive+0x52>
 8006298:	2302      	movs	r3, #2
 800629a:	e0e3      	b.n	8006464 <HAL_SPI_Receive+0x21a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062a4:	f7fd fe10 	bl	8003ec8 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
 80062b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ba:	e0ca      	b.n	8006452 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_SPI_Receive+0x7e>
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d102      	bne.n	80062ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062cc:	e0c1      	b.n	8006452 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2204      	movs	r2, #4
 80062d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006314:	d10f      	bne.n	8006336 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006324:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006334:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d007      	beq.n	8006354 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d162      	bne.n	8006422 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800635c:	e02e      	b.n	80063bc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d115      	bne.n	8006398 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f103 020c 	add.w	r2, r3, #12
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006396:	e011      	b.n	80063bc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006398:	f7fd fd96 	bl	8003ec8 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d803      	bhi.n	80063b0 <HAL_SPI_Receive+0x166>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d102      	bne.n	80063b6 <HAL_SPI_Receive+0x16c>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063ba:	e04a      	b.n	8006452 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1cb      	bne.n	800635e <HAL_SPI_Receive+0x114>
 80063c6:	e031      	b.n	800642c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d113      	bne.n	80063fe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	b292      	uxth	r2, r2
 80063e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063fc:	e011      	b.n	8006422 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063fe:	f7fd fd63 	bl	8003ec8 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d803      	bhi.n	8006416 <HAL_SPI_Receive+0x1cc>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d102      	bne.n	800641c <HAL_SPI_Receive+0x1d2>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006420:	e017      	b.n	8006452 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1cd      	bne.n	80063c8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fa45 	bl	80068c0 <SPI_EndRxTransaction>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
 800644e:	e000      	b.n	8006452 <HAL_SPI_Receive+0x208>
  }

error :
 8006450:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006462:	7dfb      	ldrb	r3, [r7, #23]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	; 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800647a:	2301      	movs	r3, #1
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_SPI_TransmitReceive+0x26>
 800648e:	2302      	movs	r3, #2
 8006490:	e18a      	b.n	80067a8 <HAL_SPI_TransmitReceive+0x33c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800649a:	f7fd fd15 	bl	8003ec8 <HAL_GetTick>
 800649e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064b0:	887b      	ldrh	r3, [r7, #2]
 80064b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d00f      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x70>
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c2:	d107      	bne.n	80064d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <HAL_SPI_TransmitReceive+0x68>
 80064cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d003      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
 80064d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064da:	e15b      	b.n	8006794 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_SPI_TransmitReceive+0x82>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_SPI_TransmitReceive+0x82>
 80064e8:	887b      	ldrh	r3, [r7, #2]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064f4:	e14e      	b.n	8006794 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d003      	beq.n	800650a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2205      	movs	r2, #5
 8006506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	887a      	ldrh	r2, [r7, #2]
 800651a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	887a      	ldrh	r2, [r7, #2]
 8006520:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	887a      	ldrh	r2, [r7, #2]
 800652c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	887a      	ldrh	r2, [r7, #2]
 8006532:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d007      	beq.n	800655e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800655c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006566:	d178      	bne.n	800665a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_SPI_TransmitReceive+0x10a>
 8006570:	8b7b      	ldrh	r3, [r7, #26]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d166      	bne.n	8006644 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	881a      	ldrh	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	1c9a      	adds	r2, r3, #2
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800659a:	e053      	b.n	8006644 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d11b      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x176>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d016      	beq.n	80065e2 <HAL_SPI_TransmitReceive+0x176>
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d113      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065be:	881a      	ldrh	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	1c9a      	adds	r2, r3, #2
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d119      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x1b8>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d014      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	b292      	uxth	r2, r2
 8006606:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	1c9a      	adds	r2, r3, #2
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006620:	2301      	movs	r3, #1
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006624:	f7fd fc50 	bl	8003ec8 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006630:	429a      	cmp	r2, r3
 8006632:	d807      	bhi.n	8006644 <HAL_SPI_TransmitReceive+0x1d8>
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d003      	beq.n	8006644 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006642:	e0a7      	b.n	8006794 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1a6      	bne.n	800659c <HAL_SPI_TransmitReceive+0x130>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1a1      	bne.n	800659c <HAL_SPI_TransmitReceive+0x130>
 8006658:	e07c      	b.n	8006754 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_SPI_TransmitReceive+0x1fc>
 8006662:	8b7b      	ldrh	r3, [r7, #26]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d16b      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	330c      	adds	r3, #12
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800668e:	e057      	b.n	8006740 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	d11c      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x26c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d017      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x26c>
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d114      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	7812      	ldrb	r2, [r2, #0]
 80066ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d119      	bne.n	800671a <HAL_SPI_TransmitReceive+0x2ae>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d014      	beq.n	800671a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006716:	2301      	movs	r3, #1
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800671a:	f7fd fbd5 	bl	8003ec8 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006726:	429a      	cmp	r2, r3
 8006728:	d803      	bhi.n	8006732 <HAL_SPI_TransmitReceive+0x2c6>
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006730:	d102      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x2cc>
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800673e:	e029      	b.n	8006794 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1a2      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x224>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d19d      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006756:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f917 	bl	800698c <SPI_EndRxTxTransaction>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006770:	e010      	b.n	8006794 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10b      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	e000      	b.n	8006794 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3730      	adds	r7, #48	; 0x30
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067c0:	f7fd fb82 	bl	8003ec8 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4413      	add	r3, r2
 80067ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067d0:	f7fd fb7a 	bl	8003ec8 <HAL_GetTick>
 80067d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	015b      	lsls	r3, r3, #5
 80067dc:	0d1b      	lsrs	r3, r3, #20
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067e6:	e054      	b.n	8006892 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d050      	beq.n	8006892 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067f0:	f7fd fb6a 	bl	8003ec8 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d902      	bls.n	8006806 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d13d      	bne.n	8006882 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006814:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800681e:	d111      	bne.n	8006844 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006828:	d004      	beq.n	8006834 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d107      	bne.n	8006844 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006842:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684c:	d10f      	bne.n	800686e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800686c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e017      	b.n	80068b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3b01      	subs	r3, #1
 8006890:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4013      	ands	r3, r2
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	bf0c      	ite	eq
 80068a2:	2301      	moveq	r3, #1
 80068a4:	2300      	movne	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d19b      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000008 	.word	0x20000008

080068c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d4:	d111      	bne.n	80068fa <SPI_EndRxTransaction+0x3a>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068de:	d004      	beq.n	80068ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d107      	bne.n	80068fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006902:	d12a      	bne.n	800695a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690c:	d012      	beq.n	8006934 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2200      	movs	r2, #0
 8006916:	2180      	movs	r1, #128	; 0x80
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff49 	bl	80067b0 <SPI_WaitFlagStateUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02d      	beq.n	8006980 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e026      	b.n	8006982 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2200      	movs	r2, #0
 800693c:	2101      	movs	r1, #1
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff ff36 	bl	80067b0 <SPI_WaitFlagStateUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01a      	beq.n	8006980 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e013      	b.n	8006982 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2200      	movs	r2, #0
 8006962:	2101      	movs	r1, #1
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff ff23 	bl	80067b0 <SPI_WaitFlagStateUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006974:	f043 0220 	orr.w	r2, r3, #32
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e000      	b.n	8006982 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006998:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <SPI_EndRxTxTransaction+0x7c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <SPI_EndRxTxTransaction+0x80>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	0d5b      	lsrs	r3, r3, #21
 80069a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069a8:	fb02 f303 	mul.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b6:	d112      	bne.n	80069de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fef4 	bl	80067b0 <SPI_WaitFlagStateUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d016      	beq.n	80069fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d2:	f043 0220 	orr.w	r2, r3, #32
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e00f      	b.n	80069fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f4:	2b80      	cmp	r3, #128	; 0x80
 80069f6:	d0f2      	beq.n	80069de <SPI_EndRxTxTransaction+0x52>
 80069f8:	e000      	b.n	80069fc <SPI_EndRxTxTransaction+0x70>
        break;
 80069fa:	bf00      	nop
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20000008 	.word	0x20000008
 8006a0c:	165e9f81 	.word	0x165e9f81

08006a10 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e034      	b.n	8006a90 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7fb f962 	bl	8001d04 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3308      	adds	r3, #8
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f001 fd1a 	bl	8008484 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	f001 fd64 	bl	8008528 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6858      	ldr	r0, [r3, #4]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	f001 fd99 	bl	80085a4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	6892      	ldr	r2, [r2, #8]
 8006a7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	6892      	ldr	r2, [r2, #8]
 8006a86:	f041 0101 	orr.w	r1, r1, #1
 8006a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e041      	b.n	8006b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fc ff2e 	bl	8003920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fa96 	bl	8007008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d001      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e04e      	b.n	8006bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a23      	ldr	r2, [pc, #140]	; (8006bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d022      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x80>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x80>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1f      	ldr	r2, [pc, #124]	; (8006c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d018      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x80>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x80>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1c      	ldr	r2, [pc, #112]	; (8006c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00e      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x80>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x80>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x80>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d111      	bne.n	8006bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b06      	cmp	r3, #6
 8006bc8:	d010      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0201 	orr.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bda:	e007      	b.n	8006bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40010400 	.word	0x40010400
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40001800 	.word	0x40001800

08006c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d122      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d11b      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0202 	mvn.w	r2, #2
 8006c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9b5 	bl	8006fca <HAL_TIM_IC_CaptureCallback>
 8006c60:	e005      	b.n	8006c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9a7 	bl	8006fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f9b8 	bl	8006fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d122      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d11b      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0204 	mvn.w	r2, #4
 8006c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f98b 	bl	8006fca <HAL_TIM_IC_CaptureCallback>
 8006cb4:	e005      	b.n	8006cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f97d 	bl	8006fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f98e 	bl	8006fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d122      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d11b      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f06f 0208 	mvn.w	r2, #8
 8006cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f961 	bl	8006fca <HAL_TIM_IC_CaptureCallback>
 8006d08:	e005      	b.n	8006d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f953 	bl	8006fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f964 	bl	8006fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d122      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d11b      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0210 	mvn.w	r2, #16
 8006d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2208      	movs	r2, #8
 8006d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f937 	bl	8006fca <HAL_TIM_IC_CaptureCallback>
 8006d5c:	e005      	b.n	8006d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f929 	bl	8006fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f93a 	bl	8006fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d10e      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d107      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0201 	mvn.w	r2, #1
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fc fc20 	bl	80035dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da6:	2b80      	cmp	r3, #128	; 0x80
 8006da8:	d10e      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db4:	2b80      	cmp	r3, #128	; 0x80
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fae0 	bl	8007388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f8ff 	bl	8006ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d10e      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d107      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0220 	mvn.w	r2, #32
 8006e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 faaa 	bl	8007374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e0b4      	b.n	8006fae <HAL_TIM_ConfigClockSource+0x186>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7c:	d03e      	beq.n	8006efc <HAL_TIM_ConfigClockSource+0xd4>
 8006e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e82:	f200 8087 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8a:	f000 8086 	beq.w	8006f9a <HAL_TIM_ConfigClockSource+0x172>
 8006e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e92:	d87f      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b70      	cmp	r3, #112	; 0x70
 8006e96:	d01a      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0xa6>
 8006e98:	2b70      	cmp	r3, #112	; 0x70
 8006e9a:	d87b      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b60      	cmp	r3, #96	; 0x60
 8006e9e:	d050      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0x11a>
 8006ea0:	2b60      	cmp	r3, #96	; 0x60
 8006ea2:	d877      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea4:	2b50      	cmp	r3, #80	; 0x50
 8006ea6:	d03c      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0xfa>
 8006ea8:	2b50      	cmp	r3, #80	; 0x50
 8006eaa:	d873      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006eac:	2b40      	cmp	r3, #64	; 0x40
 8006eae:	d058      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x13a>
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	d86f      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb4:	2b30      	cmp	r3, #48	; 0x30
 8006eb6:	d064      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x15a>
 8006eb8:	2b30      	cmp	r3, #48	; 0x30
 8006eba:	d86b      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d060      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x15a>
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d867      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05c      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x15a>
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d05a      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x15a>
 8006ecc:	e062      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6899      	ldr	r1, [r3, #8]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f000 f9ad 	bl	800723c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	609a      	str	r2, [r3, #8]
      break;
 8006efa:	e04f      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	6899      	ldr	r1, [r3, #8]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f000 f996 	bl	800723c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f1e:	609a      	str	r2, [r3, #8]
      break;
 8006f20:	e03c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f000 f90a 	bl	8007148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2150      	movs	r1, #80	; 0x50
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f963 	bl	8007206 <TIM_ITRx_SetConfig>
      break;
 8006f40:	e02c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6859      	ldr	r1, [r3, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f000 f929 	bl	80071a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2160      	movs	r1, #96	; 0x60
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f953 	bl	8007206 <TIM_ITRx_SetConfig>
      break;
 8006f60:	e01c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6859      	ldr	r1, [r3, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f000 f8ea 	bl	8007148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2140      	movs	r1, #64	; 0x40
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f943 	bl	8007206 <TIM_ITRx_SetConfig>
      break;
 8006f80:	e00c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f000 f93a 	bl	8007206 <TIM_ITRx_SetConfig>
      break;
 8006f92:	e003      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
      break;
 8006f98:	e000      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a40      	ldr	r2, [pc, #256]	; (800711c <TIM_Base_SetConfig+0x114>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007026:	d00f      	beq.n	8007048 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a3d      	ldr	r2, [pc, #244]	; (8007120 <TIM_Base_SetConfig+0x118>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00b      	beq.n	8007048 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a3c      	ldr	r2, [pc, #240]	; (8007124 <TIM_Base_SetConfig+0x11c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d007      	beq.n	8007048 <TIM_Base_SetConfig+0x40>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a3b      	ldr	r2, [pc, #236]	; (8007128 <TIM_Base_SetConfig+0x120>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d003      	beq.n	8007048 <TIM_Base_SetConfig+0x40>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a3a      	ldr	r2, [pc, #232]	; (800712c <TIM_Base_SetConfig+0x124>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d108      	bne.n	800705a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2f      	ldr	r2, [pc, #188]	; (800711c <TIM_Base_SetConfig+0x114>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d02b      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007068:	d027      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a2c      	ldr	r2, [pc, #176]	; (8007120 <TIM_Base_SetConfig+0x118>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d023      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a2b      	ldr	r2, [pc, #172]	; (8007124 <TIM_Base_SetConfig+0x11c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d01f      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a2a      	ldr	r2, [pc, #168]	; (8007128 <TIM_Base_SetConfig+0x120>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d01b      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a29      	ldr	r2, [pc, #164]	; (800712c <TIM_Base_SetConfig+0x124>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d017      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a28      	ldr	r2, [pc, #160]	; (8007130 <TIM_Base_SetConfig+0x128>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d013      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a27      	ldr	r2, [pc, #156]	; (8007134 <TIM_Base_SetConfig+0x12c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00f      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a26      	ldr	r2, [pc, #152]	; (8007138 <TIM_Base_SetConfig+0x130>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00b      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a25      	ldr	r2, [pc, #148]	; (800713c <TIM_Base_SetConfig+0x134>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d007      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a24      	ldr	r2, [pc, #144]	; (8007140 <TIM_Base_SetConfig+0x138>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d003      	beq.n	80070ba <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a23      	ldr	r2, [pc, #140]	; (8007144 <TIM_Base_SetConfig+0x13c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d108      	bne.n	80070cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a0a      	ldr	r2, [pc, #40]	; (800711c <TIM_Base_SetConfig+0x114>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d003      	beq.n	8007100 <TIM_Base_SetConfig+0xf8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a0c      	ldr	r2, [pc, #48]	; (800712c <TIM_Base_SetConfig+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d103      	bne.n	8007108 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	615a      	str	r2, [r3, #20]
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40010000 	.word	0x40010000
 8007120:	40000400 	.word	0x40000400
 8007124:	40000800 	.word	0x40000800
 8007128:	40000c00 	.word	0x40000c00
 800712c:	40010400 	.word	0x40010400
 8007130:	40014000 	.word	0x40014000
 8007134:	40014400 	.word	0x40014400
 8007138:	40014800 	.word	0x40014800
 800713c:	40001800 	.word	0x40001800
 8007140:	40001c00 	.word	0x40001c00
 8007144:	40002000 	.word	0x40002000

08007148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f023 0201 	bic.w	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f023 030a 	bic.w	r3, r3, #10
 8007184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	621a      	str	r2, [r3, #32]
}
 800719a:	bf00      	nop
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b087      	sub	sp, #28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f023 0210 	bic.w	r2, r3, #16
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	031b      	lsls	r3, r3, #12
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	f043 0307 	orr.w	r3, r3, #7
 8007228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	609a      	str	r2, [r3, #8]
}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	021a      	lsls	r2, r3, #8
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	431a      	orrs	r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4313      	orrs	r3, r2
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007290:	2302      	movs	r3, #2
 8007292:	e05a      	b.n	800734a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	; (8007358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d022      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e0:	d01d      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1d      	ldr	r2, [pc, #116]	; (800735c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d018      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1b      	ldr	r2, [pc, #108]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d013      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1a      	ldr	r2, [pc, #104]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00e      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a18      	ldr	r2, [pc, #96]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a17      	ldr	r2, [pc, #92]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a15      	ldr	r2, [pc, #84]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d10c      	bne.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4313      	orrs	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40010000 	.word	0x40010000
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40000c00 	.word	0x40000c00
 8007368:	40010400 	.word	0x40010400
 800736c:	40014000 	.word	0x40014000
 8007370:	40001800 	.word	0x40001800

08007374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e03f      	b.n	800742e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fc fc62 	bl	8003c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2224      	movs	r2, #36	; 0x24
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fddb 	bl	8007f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695a      	ldr	r2, [r3, #20]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b08a      	sub	sp, #40	; 0x28
 800743a:	af02      	add	r7, sp, #8
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b20      	cmp	r3, #32
 8007454:	d17c      	bne.n	8007550 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_UART_Transmit+0x2c>
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e075      	b.n	8007552 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UART_Transmit+0x3e>
 8007470:	2302      	movs	r3, #2
 8007472:	e06e      	b.n	8007552 <HAL_UART_Transmit+0x11c>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2221      	movs	r2, #33	; 0x21
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800748a:	f7fc fd1d 	bl	8003ec8 <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	88fa      	ldrh	r2, [r7, #6]
 8007494:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a4:	d108      	bne.n	80074b8 <HAL_UART_Transmit+0x82>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	e003      	b.n	80074c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074c8:	e02a      	b.n	8007520 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fb1f 	bl	8007b18 <UART_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e036      	b.n	8007552 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3302      	adds	r3, #2
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	e007      	b.n	8007512 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	781a      	ldrb	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	3301      	adds	r3, #1
 8007510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1cf      	bne.n	80074ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2200      	movs	r2, #0
 8007532:	2140      	movs	r1, #64	; 0x40
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 faef 	bl	8007b18 <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e006      	b.n	8007552 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b20      	cmp	r3, #32
 8007572:	d11d      	bne.n	80075b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_UART_Receive_IT+0x26>
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e016      	b.n	80075b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_UART_Receive_IT+0x38>
 800758e:	2302      	movs	r3, #2
 8007590:	e00f      	b.n	80075b2 <HAL_UART_Receive_IT+0x58>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	461a      	mov	r2, r3
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fb24 	bl	8007bf4 <UART_Start_Receive_IT>
 80075ac:	4603      	mov	r3, r0
 80075ae:	e000      	b.n	80075b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
  }
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b0ba      	sub	sp, #232	; 0xe8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80075fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10f      	bne.n	8007622 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <HAL_UART_IRQHandler+0x66>
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fc03 	bl	8007e26 <UART_Receive_IT>
      return;
 8007620:	e256      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80de 	beq.w	80077e8 <HAL_UART_IRQHandler+0x22c>
 800762c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80d1 	beq.w	80077e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00b      	beq.n	800766a <HAL_UART_IRQHandler+0xae>
 8007652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765a:	2b00      	cmp	r3, #0
 800765c:	d005      	beq.n	800766a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f043 0201 	orr.w	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <HAL_UART_IRQHandler+0xd2>
 8007676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f043 0202 	orr.w	r2, r3, #2
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <HAL_UART_IRQHandler+0xf6>
 800769a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d005      	beq.n	80076b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	f043 0204 	orr.w	r2, r3, #4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <HAL_UART_IRQHandler+0x126>
 80076be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d105      	bne.n	80076d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f043 0208 	orr.w	r2, r3, #8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 81ed 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_UART_IRQHandler+0x14e>
 80076f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fb8e 	bl	8007e26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	bf0c      	ite	eq
 8007718:	2301      	moveq	r3, #1
 800771a:	2300      	movne	r3, #0
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <HAL_UART_IRQHandler+0x17a>
 800772e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007732:	2b00      	cmp	r3, #0
 8007734:	d04f      	beq.n	80077d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fa96 	bl	8007c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d141      	bne.n	80077ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3314      	adds	r3, #20
 8007750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3314      	adds	r3, #20
 8007772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800777a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800778e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1d9      	bne.n	800774a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	2b00      	cmp	r3, #0
 800779c:	d013      	beq.n	80077c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	4a7d      	ldr	r2, [pc, #500]	; (8007998 <HAL_UART_IRQHandler+0x3dc>)
 80077a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fc fd3d 	bl	800422a <HAL_DMA_Abort_IT>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d016      	beq.n	80077e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c4:	e00e      	b.n	80077e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f990 	bl	8007aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	e00a      	b.n	80077e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f98c 	bl	8007aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e006      	b.n	80077e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f988 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077e2:	e170      	b.n	8007ac6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e4:	bf00      	nop
    return;
 80077e6:	e16e      	b.n	8007ac6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	f040 814a 	bne.w	8007a86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8143 	beq.w	8007a86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 813c 	beq.w	8007a86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800780e:	2300      	movs	r3, #0
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	f040 80b4 	bne.w	800799c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8140 	beq.w	8007aca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800784e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007852:	429a      	cmp	r2, r3
 8007854:	f080 8139 	bcs.w	8007aca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800785e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786a:	f000 8088 	beq.w	800797e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	330c      	adds	r3, #12
 8007874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800788c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	330c      	adds	r3, #12
 8007896:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800789a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800789e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1d9      	bne.n	800786e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3314      	adds	r3, #20
 80078c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3314      	adds	r3, #20
 80078da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e1      	bne.n	80078ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3314      	adds	r3, #20
 80078fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3314      	adds	r3, #20
 8007916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800791a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800791c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e3      	bne.n	80078f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800794c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800794e:	f023 0310 	bic.w	r3, r3, #16
 8007952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007960:	65ba      	str	r2, [r7, #88]	; 0x58
 8007962:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800796e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e3      	bne.n	800793c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	4618      	mov	r0, r3
 800797a:	f7fc fbe6 	bl	800414a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007986:	b29b      	uxth	r3, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8b6 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007994:	e099      	b.n	8007aca <HAL_UART_IRQHandler+0x50e>
 8007996:	bf00      	nop
 8007998:	08007d2f 	.word	0x08007d2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 808b 	beq.w	8007ace <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8086 	beq.w	8007ace <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079e6:	647a      	str	r2, [r7, #68]	; 0x44
 80079e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e3      	bne.n	80079c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3314      	adds	r3, #20
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	623b      	str	r3, [r7, #32]
   return(result);
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3314      	adds	r3, #20
 8007a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a1e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e3      	bne.n	80079fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0310 	bic.w	r3, r3, #16
 8007a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a64:	61fa      	str	r2, [r7, #28]
 8007a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	617b      	str	r3, [r7, #20]
   return(result);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e3      	bne.n	8007a40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f83e 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a84:	e023      	b.n	8007ace <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x4ea>
 8007a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f959 	bl	8007d56 <UART_Transmit_IT>
    return;
 8007aa4:	e014      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x514>
 8007ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d008      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f999 	bl	8007df6 <UART_EndTransmit_IT>
    return;
 8007ac4:	e004      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8007ace:	bf00      	nop
  }
}
 8007ad0:	37e8      	adds	r7, #232	; 0xe8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b090      	sub	sp, #64	; 0x40
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b28:	e050      	b.n	8007bcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d04c      	beq.n	8007bcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b38:	f7fc f9c6 	bl	8003ec8 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d241      	bcs.n	8007bcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	330c      	adds	r3, #12
 8007b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b68:	637a      	str	r2, [r7, #52]	; 0x34
 8007b6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e5      	bne.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3314      	adds	r3, #20
 8007b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3314      	adds	r3, #20
 8007b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b9c:	623a      	str	r2, [r7, #32]
 8007b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	69f9      	ldr	r1, [r7, #28]
 8007ba2:	6a3a      	ldr	r2, [r7, #32]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e5      	bne.n	8007b7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e00f      	b.n	8007bec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d09f      	beq.n	8007b2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3740      	adds	r7, #64	; 0x40
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	88fa      	ldrh	r2, [r7, #6]
 8007c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2222      	movs	r2, #34	; 0x22
 8007c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c38:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	695a      	ldr	r2, [r3, #20]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0201 	orr.w	r2, r2, #1
 8007c48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0220 	orr.w	r2, r2, #32
 8007c58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b095      	sub	sp, #84	; 0x54
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c90:	643a      	str	r2, [r7, #64]	; 0x40
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e5      	bne.n	8007c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d119      	bne.n	8007d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f023 0310 	bic.w	r3, r3, #16
 8007cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d00:	61ba      	str	r2, [r7, #24]
 8007d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6979      	ldr	r1, [r7, #20]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e5      	bne.n	8007ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d22:	bf00      	nop
 8007d24:	3754      	adds	r7, #84	; 0x54
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fecf 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b21      	cmp	r3, #33	; 0x21
 8007d68:	d13e      	bne.n	8007de8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d72:	d114      	bne.n	8007d9e <UART_Transmit_IT+0x48>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d110      	bne.n	8007d9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	1c9a      	adds	r2, r3, #2
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	621a      	str	r2, [r3, #32]
 8007d9c:	e008      	b.n	8007db0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	1c59      	adds	r1, r3, #1
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6211      	str	r1, [r2, #32]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10f      	bne.n	8007de4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	e000      	b.n	8007dea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007de8:	2302      	movs	r3, #2
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff fe5e 	bl	8007ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b08c      	sub	sp, #48	; 0x30
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b22      	cmp	r3, #34	; 0x22
 8007e38:	f040 80ab 	bne.w	8007f92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e44:	d117      	bne.n	8007e76 <UART_Receive_IT+0x50>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d113      	bne.n	8007e76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	1c9a      	adds	r2, r3, #2
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	629a      	str	r2, [r3, #40]	; 0x28
 8007e74:	e026      	b.n	8007ec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e88:	d007      	beq.n	8007e9a <UART_Receive_IT+0x74>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <UART_Receive_IT+0x82>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e008      	b.n	8007eba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d15a      	bne.n	8007f8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0220 	bic.w	r2, r2, #32
 8007ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d135      	bne.n	8007f84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f023 0310 	bic.w	r3, r3, #16
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	330c      	adds	r3, #12
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3e:	623a      	str	r2, [r7, #32]
 8007f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	69f9      	ldr	r1, [r7, #28]
 8007f44:	6a3a      	ldr	r2, [r7, #32]
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e5      	bne.n	8007f1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b10      	cmp	r3, #16
 8007f5e:	d10a      	bne.n	8007f76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fdbf 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
 8007f82:	e002      	b.n	8007f8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7fb fd19 	bl	80039bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e002      	b.n	8007f94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e000      	b.n	8007f94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f92:	2302      	movs	r3, #2
  }
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3730      	adds	r7, #48	; 0x30
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fa0:	b0c0      	sub	sp, #256	; 0x100
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	68d9      	ldr	r1, [r3, #12]
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	ea40 0301 	orr.w	r3, r0, r1
 8007fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ff4:	f021 010c 	bic.w	r1, r1, #12
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008002:	430b      	orrs	r3, r1
 8008004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008016:	6999      	ldr	r1, [r3, #24]
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	ea40 0301 	orr.w	r3, r0, r1
 8008022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4b8f      	ldr	r3, [pc, #572]	; (8008268 <UART_SetConfig+0x2cc>)
 800802c:	429a      	cmp	r2, r3
 800802e:	d005      	beq.n	800803c <UART_SetConfig+0xa0>
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b8d      	ldr	r3, [pc, #564]	; (800826c <UART_SetConfig+0x2d0>)
 8008038:	429a      	cmp	r2, r3
 800803a:	d104      	bne.n	8008046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800803c:	f7fd ff2c 	bl	8005e98 <HAL_RCC_GetPCLK2Freq>
 8008040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008044:	e003      	b.n	800804e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008046:	f7fd ff13 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 800804a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800804e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008058:	f040 810c 	bne.w	8008274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800805c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008060:	2200      	movs	r2, #0
 8008062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800806a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800806e:	4622      	mov	r2, r4
 8008070:	462b      	mov	r3, r5
 8008072:	1891      	adds	r1, r2, r2
 8008074:	65b9      	str	r1, [r7, #88]	; 0x58
 8008076:	415b      	adcs	r3, r3
 8008078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800807a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800807e:	4621      	mov	r1, r4
 8008080:	eb12 0801 	adds.w	r8, r2, r1
 8008084:	4629      	mov	r1, r5
 8008086:	eb43 0901 	adc.w	r9, r3, r1
 800808a:	f04f 0200 	mov.w	r2, #0
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800809a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800809e:	4690      	mov	r8, r2
 80080a0:	4699      	mov	r9, r3
 80080a2:	4623      	mov	r3, r4
 80080a4:	eb18 0303 	adds.w	r3, r8, r3
 80080a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080ac:	462b      	mov	r3, r5
 80080ae:	eb49 0303 	adc.w	r3, r9, r3
 80080b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80080c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080ca:	460b      	mov	r3, r1
 80080cc:	18db      	adds	r3, r3, r3
 80080ce:	653b      	str	r3, [r7, #80]	; 0x50
 80080d0:	4613      	mov	r3, r2
 80080d2:	eb42 0303 	adc.w	r3, r2, r3
 80080d6:	657b      	str	r3, [r7, #84]	; 0x54
 80080d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080e0:	f7f8 f8ce 	bl	8000280 <__aeabi_uldivmod>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4b61      	ldr	r3, [pc, #388]	; (8008270 <UART_SetConfig+0x2d4>)
 80080ea:	fba3 2302 	umull	r2, r3, r3, r2
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	011c      	lsls	r4, r3, #4
 80080f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	1891      	adds	r1, r2, r2
 800810a:	64b9      	str	r1, [r7, #72]	; 0x48
 800810c:	415b      	adcs	r3, r3
 800810e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008114:	4641      	mov	r1, r8
 8008116:	eb12 0a01 	adds.w	sl, r2, r1
 800811a:	4649      	mov	r1, r9
 800811c:	eb43 0b01 	adc.w	fp, r3, r1
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800812c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008134:	4692      	mov	sl, r2
 8008136:	469b      	mov	fp, r3
 8008138:	4643      	mov	r3, r8
 800813a:	eb1a 0303 	adds.w	r3, sl, r3
 800813e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008142:	464b      	mov	r3, r9
 8008144:	eb4b 0303 	adc.w	r3, fp, r3
 8008148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800815c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008160:	460b      	mov	r3, r1
 8008162:	18db      	adds	r3, r3, r3
 8008164:	643b      	str	r3, [r7, #64]	; 0x40
 8008166:	4613      	mov	r3, r2
 8008168:	eb42 0303 	adc.w	r3, r2, r3
 800816c:	647b      	str	r3, [r7, #68]	; 0x44
 800816e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008176:	f7f8 f883 	bl	8000280 <__aeabi_uldivmod>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4611      	mov	r1, r2
 8008180:	4b3b      	ldr	r3, [pc, #236]	; (8008270 <UART_SetConfig+0x2d4>)
 8008182:	fba3 2301 	umull	r2, r3, r3, r1
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	2264      	movs	r2, #100	; 0x64
 800818a:	fb02 f303 	mul.w	r3, r2, r3
 800818e:	1acb      	subs	r3, r1, r3
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008196:	4b36      	ldr	r3, [pc, #216]	; (8008270 <UART_SetConfig+0x2d4>)
 8008198:	fba3 2302 	umull	r2, r3, r3, r2
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081a4:	441c      	add	r4, r3
 80081a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081b8:	4642      	mov	r2, r8
 80081ba:	464b      	mov	r3, r9
 80081bc:	1891      	adds	r1, r2, r2
 80081be:	63b9      	str	r1, [r7, #56]	; 0x38
 80081c0:	415b      	adcs	r3, r3
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081c8:	4641      	mov	r1, r8
 80081ca:	1851      	adds	r1, r2, r1
 80081cc:	6339      	str	r1, [r7, #48]	; 0x30
 80081ce:	4649      	mov	r1, r9
 80081d0:	414b      	adcs	r3, r1
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80081e0:	4659      	mov	r1, fp
 80081e2:	00cb      	lsls	r3, r1, #3
 80081e4:	4651      	mov	r1, sl
 80081e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ea:	4651      	mov	r1, sl
 80081ec:	00ca      	lsls	r2, r1, #3
 80081ee:	4610      	mov	r0, r2
 80081f0:	4619      	mov	r1, r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	4642      	mov	r2, r8
 80081f6:	189b      	adds	r3, r3, r2
 80081f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081fc:	464b      	mov	r3, r9
 80081fe:	460a      	mov	r2, r1
 8008200:	eb42 0303 	adc.w	r3, r2, r3
 8008204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800821c:	460b      	mov	r3, r1
 800821e:	18db      	adds	r3, r3, r3
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
 8008222:	4613      	mov	r3, r2
 8008224:	eb42 0303 	adc.w	r3, r2, r3
 8008228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800822a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800822e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008232:	f7f8 f825 	bl	8000280 <__aeabi_uldivmod>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <UART_SetConfig+0x2d4>)
 800823c:	fba3 1302 	umull	r1, r3, r3, r2
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	2164      	movs	r1, #100	; 0x64
 8008244:	fb01 f303 	mul.w	r3, r1, r3
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	3332      	adds	r3, #50	; 0x32
 800824e:	4a08      	ldr	r2, [pc, #32]	; (8008270 <UART_SetConfig+0x2d4>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	f003 0207 	and.w	r2, r3, #7
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4422      	add	r2, r4
 8008262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008264:	e105      	b.n	8008472 <UART_SetConfig+0x4d6>
 8008266:	bf00      	nop
 8008268:	40011000 	.word	0x40011000
 800826c:	40011400 	.word	0x40011400
 8008270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008278:	2200      	movs	r2, #0
 800827a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800827e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	1891      	adds	r1, r2, r2
 800828c:	6239      	str	r1, [r7, #32]
 800828e:	415b      	adcs	r3, r3
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
 8008292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008296:	4641      	mov	r1, r8
 8008298:	1854      	adds	r4, r2, r1
 800829a:	4649      	mov	r1, r9
 800829c:	eb43 0501 	adc.w	r5, r3, r1
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	00eb      	lsls	r3, r5, #3
 80082aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082ae:	00e2      	lsls	r2, r4, #3
 80082b0:	4614      	mov	r4, r2
 80082b2:	461d      	mov	r5, r3
 80082b4:	4643      	mov	r3, r8
 80082b6:	18e3      	adds	r3, r4, r3
 80082b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082bc:	464b      	mov	r3, r9
 80082be:	eb45 0303 	adc.w	r3, r5, r3
 80082c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082d6:	f04f 0200 	mov.w	r2, #0
 80082da:	f04f 0300 	mov.w	r3, #0
 80082de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082e2:	4629      	mov	r1, r5
 80082e4:	008b      	lsls	r3, r1, #2
 80082e6:	4621      	mov	r1, r4
 80082e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082ec:	4621      	mov	r1, r4
 80082ee:	008a      	lsls	r2, r1, #2
 80082f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082f4:	f7f7 ffc4 	bl	8000280 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4b60      	ldr	r3, [pc, #384]	; (8008480 <UART_SetConfig+0x4e4>)
 80082fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	011c      	lsls	r4, r3, #4
 8008306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	1891      	adds	r1, r2, r2
 800831e:	61b9      	str	r1, [r7, #24]
 8008320:	415b      	adcs	r3, r3
 8008322:	61fb      	str	r3, [r7, #28]
 8008324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008328:	4641      	mov	r1, r8
 800832a:	1851      	adds	r1, r2, r1
 800832c:	6139      	str	r1, [r7, #16]
 800832e:	4649      	mov	r1, r9
 8008330:	414b      	adcs	r3, r1
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008340:	4659      	mov	r1, fp
 8008342:	00cb      	lsls	r3, r1, #3
 8008344:	4651      	mov	r1, sl
 8008346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800834a:	4651      	mov	r1, sl
 800834c:	00ca      	lsls	r2, r1, #3
 800834e:	4610      	mov	r0, r2
 8008350:	4619      	mov	r1, r3
 8008352:	4603      	mov	r3, r0
 8008354:	4642      	mov	r2, r8
 8008356:	189b      	adds	r3, r3, r2
 8008358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800835c:	464b      	mov	r3, r9
 800835e:	460a      	mov	r2, r1
 8008360:	eb42 0303 	adc.w	r3, r2, r3
 8008364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	67bb      	str	r3, [r7, #120]	; 0x78
 8008372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008380:	4649      	mov	r1, r9
 8008382:	008b      	lsls	r3, r1, #2
 8008384:	4641      	mov	r1, r8
 8008386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800838a:	4641      	mov	r1, r8
 800838c:	008a      	lsls	r2, r1, #2
 800838e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008392:	f7f7 ff75 	bl	8000280 <__aeabi_uldivmod>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4b39      	ldr	r3, [pc, #228]	; (8008480 <UART_SetConfig+0x4e4>)
 800839c:	fba3 1302 	umull	r1, r3, r3, r2
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	2164      	movs	r1, #100	; 0x64
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	3332      	adds	r3, #50	; 0x32
 80083ae:	4a34      	ldr	r2, [pc, #208]	; (8008480 <UART_SetConfig+0x4e4>)
 80083b0:	fba2 2303 	umull	r2, r3, r2, r3
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ba:	441c      	add	r4, r3
 80083bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c0:	2200      	movs	r2, #0
 80083c2:	673b      	str	r3, [r7, #112]	; 0x70
 80083c4:	677a      	str	r2, [r7, #116]	; 0x74
 80083c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80083ca:	4642      	mov	r2, r8
 80083cc:	464b      	mov	r3, r9
 80083ce:	1891      	adds	r1, r2, r2
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	415b      	adcs	r3, r3
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083da:	4641      	mov	r1, r8
 80083dc:	1851      	adds	r1, r2, r1
 80083de:	6039      	str	r1, [r7, #0]
 80083e0:	4649      	mov	r1, r9
 80083e2:	414b      	adcs	r3, r1
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083f2:	4659      	mov	r1, fp
 80083f4:	00cb      	lsls	r3, r1, #3
 80083f6:	4651      	mov	r1, sl
 80083f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083fc:	4651      	mov	r1, sl
 80083fe:	00ca      	lsls	r2, r1, #3
 8008400:	4610      	mov	r0, r2
 8008402:	4619      	mov	r1, r3
 8008404:	4603      	mov	r3, r0
 8008406:	4642      	mov	r2, r8
 8008408:	189b      	adds	r3, r3, r2
 800840a:	66bb      	str	r3, [r7, #104]	; 0x68
 800840c:	464b      	mov	r3, r9
 800840e:	460a      	mov	r2, r1
 8008410:	eb42 0303 	adc.w	r3, r2, r3
 8008414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	663b      	str	r3, [r7, #96]	; 0x60
 8008420:	667a      	str	r2, [r7, #100]	; 0x64
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800842e:	4649      	mov	r1, r9
 8008430:	008b      	lsls	r3, r1, #2
 8008432:	4641      	mov	r1, r8
 8008434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008438:	4641      	mov	r1, r8
 800843a:	008a      	lsls	r2, r1, #2
 800843c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008440:	f7f7 ff1e 	bl	8000280 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <UART_SetConfig+0x4e4>)
 800844a:	fba3 1302 	umull	r1, r3, r3, r2
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	2164      	movs	r1, #100	; 0x64
 8008452:	fb01 f303 	mul.w	r3, r1, r3
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	3332      	adds	r3, #50	; 0x32
 800845c:	4a08      	ldr	r2, [pc, #32]	; (8008480 <UART_SetConfig+0x4e4>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	095b      	lsrs	r3, r3, #5
 8008464:	f003 020f 	and.w	r2, r3, #15
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4422      	add	r2, r4
 8008470:	609a      	str	r2, [r3, #8]
}
 8008472:	bf00      	nop
 8008474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008478:	46bd      	mov	sp, r7
 800847a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800847e:	bf00      	nop
 8008480:	51eb851f 	.word	0x51eb851f

08008484 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4b20      	ldr	r3, [pc, #128]	; (8008524 <FSMC_NORSRAM_Init+0xa0>)
 80084a2:	4013      	ands	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80084ae:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80084b4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80084ba:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80084c0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80084c6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80084cc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80084d2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80084d8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80084de:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80084e4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80084ea:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80084f0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d103      	bne.n	8008508 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008506:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	fff00080 	.word	0xfff00080

08008528 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800854a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008556:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800855e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008566:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	3b01      	subs	r3, #1
 800856e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008570:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	3b02      	subs	r3, #2
 8008578:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800857a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008580:	4313      	orrs	r3, r2
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6979      	ldr	r1, [r7, #20]
 8008590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085bc:	d122      	bne.n	8008604 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4b15      	ldr	r3, [pc, #84]	; (8008620 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80085da:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80085e2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80085ea:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80085f0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6979      	ldr	r1, [r7, #20]
 80085fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008602:	e005      	b.n	8008610 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800860c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	cff00000 	.word	0xcff00000

08008624 <atoi>:
 8008624:	220a      	movs	r2, #10
 8008626:	2100      	movs	r1, #0
 8008628:	f000 b8d4 	b.w	80087d4 <strtol>

0800862c <__errno>:
 800862c:	4b01      	ldr	r3, [pc, #4]	; (8008634 <__errno+0x8>)
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000018 	.word	0x20000018

08008638 <__libc_init_array>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4d0d      	ldr	r5, [pc, #52]	; (8008670 <__libc_init_array+0x38>)
 800863c:	4c0d      	ldr	r4, [pc, #52]	; (8008674 <__libc_init_array+0x3c>)
 800863e:	1b64      	subs	r4, r4, r5
 8008640:	10a4      	asrs	r4, r4, #2
 8008642:	2600      	movs	r6, #0
 8008644:	42a6      	cmp	r6, r4
 8008646:	d109      	bne.n	800865c <__libc_init_array+0x24>
 8008648:	4d0b      	ldr	r5, [pc, #44]	; (8008678 <__libc_init_array+0x40>)
 800864a:	4c0c      	ldr	r4, [pc, #48]	; (800867c <__libc_init_array+0x44>)
 800864c:	f000 fd1a 	bl	8009084 <_init>
 8008650:	1b64      	subs	r4, r4, r5
 8008652:	10a4      	asrs	r4, r4, #2
 8008654:	2600      	movs	r6, #0
 8008656:	42a6      	cmp	r6, r4
 8008658:	d105      	bne.n	8008666 <__libc_init_array+0x2e>
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008660:	4798      	blx	r3
 8008662:	3601      	adds	r6, #1
 8008664:	e7ee      	b.n	8008644 <__libc_init_array+0xc>
 8008666:	f855 3b04 	ldr.w	r3, [r5], #4
 800866a:	4798      	blx	r3
 800866c:	3601      	adds	r6, #1
 800866e:	e7f2      	b.n	8008656 <__libc_init_array+0x1e>
 8008670:	0800c34c 	.word	0x0800c34c
 8008674:	0800c34c 	.word	0x0800c34c
 8008678:	0800c34c 	.word	0x0800c34c
 800867c:	0800c350 	.word	0x0800c350

08008680 <memset>:
 8008680:	4402      	add	r2, r0
 8008682:	4603      	mov	r3, r0
 8008684:	4293      	cmp	r3, r2
 8008686:	d100      	bne.n	800868a <memset+0xa>
 8008688:	4770      	bx	lr
 800868a:	f803 1b01 	strb.w	r1, [r3], #1
 800868e:	e7f9      	b.n	8008684 <memset+0x4>

08008690 <siprintf>:
 8008690:	b40e      	push	{r1, r2, r3}
 8008692:	b500      	push	{lr}
 8008694:	b09c      	sub	sp, #112	; 0x70
 8008696:	ab1d      	add	r3, sp, #116	; 0x74
 8008698:	9002      	str	r0, [sp, #8]
 800869a:	9006      	str	r0, [sp, #24]
 800869c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086a0:	4809      	ldr	r0, [pc, #36]	; (80086c8 <siprintf+0x38>)
 80086a2:	9107      	str	r1, [sp, #28]
 80086a4:	9104      	str	r1, [sp, #16]
 80086a6:	4909      	ldr	r1, [pc, #36]	; (80086cc <siprintf+0x3c>)
 80086a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ac:	9105      	str	r1, [sp, #20]
 80086ae:	6800      	ldr	r0, [r0, #0]
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	a902      	add	r1, sp, #8
 80086b4:	f000 f8f4 	bl	80088a0 <_svfiprintf_r>
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	b01c      	add	sp, #112	; 0x70
 80086c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c4:	b003      	add	sp, #12
 80086c6:	4770      	bx	lr
 80086c8:	20000018 	.word	0x20000018
 80086cc:	ffff0208 	.word	0xffff0208

080086d0 <_strtol_l.constprop.0>:
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d6:	d001      	beq.n	80086dc <_strtol_l.constprop.0+0xc>
 80086d8:	2b24      	cmp	r3, #36	; 0x24
 80086da:	d906      	bls.n	80086ea <_strtol_l.constprop.0+0x1a>
 80086dc:	f7ff ffa6 	bl	800862c <__errno>
 80086e0:	2316      	movs	r3, #22
 80086e2:	6003      	str	r3, [r0, #0]
 80086e4:	2000      	movs	r0, #0
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80087d0 <_strtol_l.constprop.0+0x100>
 80086ee:	460d      	mov	r5, r1
 80086f0:	462e      	mov	r6, r5
 80086f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80086fa:	f017 0708 	ands.w	r7, r7, #8
 80086fe:	d1f7      	bne.n	80086f0 <_strtol_l.constprop.0+0x20>
 8008700:	2c2d      	cmp	r4, #45	; 0x2d
 8008702:	d132      	bne.n	800876a <_strtol_l.constprop.0+0x9a>
 8008704:	782c      	ldrb	r4, [r5, #0]
 8008706:	2701      	movs	r7, #1
 8008708:	1cb5      	adds	r5, r6, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d05b      	beq.n	80087c6 <_strtol_l.constprop.0+0xf6>
 800870e:	2b10      	cmp	r3, #16
 8008710:	d109      	bne.n	8008726 <_strtol_l.constprop.0+0x56>
 8008712:	2c30      	cmp	r4, #48	; 0x30
 8008714:	d107      	bne.n	8008726 <_strtol_l.constprop.0+0x56>
 8008716:	782c      	ldrb	r4, [r5, #0]
 8008718:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800871c:	2c58      	cmp	r4, #88	; 0x58
 800871e:	d14d      	bne.n	80087bc <_strtol_l.constprop.0+0xec>
 8008720:	786c      	ldrb	r4, [r5, #1]
 8008722:	2310      	movs	r3, #16
 8008724:	3502      	adds	r5, #2
 8008726:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800872a:	f108 38ff 	add.w	r8, r8, #4294967295
 800872e:	f04f 0c00 	mov.w	ip, #0
 8008732:	fbb8 f9f3 	udiv	r9, r8, r3
 8008736:	4666      	mov	r6, ip
 8008738:	fb03 8a19 	mls	sl, r3, r9, r8
 800873c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008740:	f1be 0f09 	cmp.w	lr, #9
 8008744:	d816      	bhi.n	8008774 <_strtol_l.constprop.0+0xa4>
 8008746:	4674      	mov	r4, lr
 8008748:	42a3      	cmp	r3, r4
 800874a:	dd24      	ble.n	8008796 <_strtol_l.constprop.0+0xc6>
 800874c:	f1bc 0f00 	cmp.w	ip, #0
 8008750:	db1e      	blt.n	8008790 <_strtol_l.constprop.0+0xc0>
 8008752:	45b1      	cmp	r9, r6
 8008754:	d31c      	bcc.n	8008790 <_strtol_l.constprop.0+0xc0>
 8008756:	d101      	bne.n	800875c <_strtol_l.constprop.0+0x8c>
 8008758:	45a2      	cmp	sl, r4
 800875a:	db19      	blt.n	8008790 <_strtol_l.constprop.0+0xc0>
 800875c:	fb06 4603 	mla	r6, r6, r3, r4
 8008760:	f04f 0c01 	mov.w	ip, #1
 8008764:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008768:	e7e8      	b.n	800873c <_strtol_l.constprop.0+0x6c>
 800876a:	2c2b      	cmp	r4, #43	; 0x2b
 800876c:	bf04      	itt	eq
 800876e:	782c      	ldrbeq	r4, [r5, #0]
 8008770:	1cb5      	addeq	r5, r6, #2
 8008772:	e7ca      	b.n	800870a <_strtol_l.constprop.0+0x3a>
 8008774:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008778:	f1be 0f19 	cmp.w	lr, #25
 800877c:	d801      	bhi.n	8008782 <_strtol_l.constprop.0+0xb2>
 800877e:	3c37      	subs	r4, #55	; 0x37
 8008780:	e7e2      	b.n	8008748 <_strtol_l.constprop.0+0x78>
 8008782:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008786:	f1be 0f19 	cmp.w	lr, #25
 800878a:	d804      	bhi.n	8008796 <_strtol_l.constprop.0+0xc6>
 800878c:	3c57      	subs	r4, #87	; 0x57
 800878e:	e7db      	b.n	8008748 <_strtol_l.constprop.0+0x78>
 8008790:	f04f 3cff 	mov.w	ip, #4294967295
 8008794:	e7e6      	b.n	8008764 <_strtol_l.constprop.0+0x94>
 8008796:	f1bc 0f00 	cmp.w	ip, #0
 800879a:	da05      	bge.n	80087a8 <_strtol_l.constprop.0+0xd8>
 800879c:	2322      	movs	r3, #34	; 0x22
 800879e:	6003      	str	r3, [r0, #0]
 80087a0:	4646      	mov	r6, r8
 80087a2:	b942      	cbnz	r2, 80087b6 <_strtol_l.constprop.0+0xe6>
 80087a4:	4630      	mov	r0, r6
 80087a6:	e79e      	b.n	80086e6 <_strtol_l.constprop.0+0x16>
 80087a8:	b107      	cbz	r7, 80087ac <_strtol_l.constprop.0+0xdc>
 80087aa:	4276      	negs	r6, r6
 80087ac:	2a00      	cmp	r2, #0
 80087ae:	d0f9      	beq.n	80087a4 <_strtol_l.constprop.0+0xd4>
 80087b0:	f1bc 0f00 	cmp.w	ip, #0
 80087b4:	d000      	beq.n	80087b8 <_strtol_l.constprop.0+0xe8>
 80087b6:	1e69      	subs	r1, r5, #1
 80087b8:	6011      	str	r1, [r2, #0]
 80087ba:	e7f3      	b.n	80087a4 <_strtol_l.constprop.0+0xd4>
 80087bc:	2430      	movs	r4, #48	; 0x30
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1b1      	bne.n	8008726 <_strtol_l.constprop.0+0x56>
 80087c2:	2308      	movs	r3, #8
 80087c4:	e7af      	b.n	8008726 <_strtol_l.constprop.0+0x56>
 80087c6:	2c30      	cmp	r4, #48	; 0x30
 80087c8:	d0a5      	beq.n	8008716 <_strtol_l.constprop.0+0x46>
 80087ca:	230a      	movs	r3, #10
 80087cc:	e7ab      	b.n	8008726 <_strtol_l.constprop.0+0x56>
 80087ce:	bf00      	nop
 80087d0:	0800c211 	.word	0x0800c211

080087d4 <strtol>:
 80087d4:	4613      	mov	r3, r2
 80087d6:	460a      	mov	r2, r1
 80087d8:	4601      	mov	r1, r0
 80087da:	4802      	ldr	r0, [pc, #8]	; (80087e4 <strtol+0x10>)
 80087dc:	6800      	ldr	r0, [r0, #0]
 80087de:	f7ff bf77 	b.w	80086d0 <_strtol_l.constprop.0>
 80087e2:	bf00      	nop
 80087e4:	20000018 	.word	0x20000018

080087e8 <__ssputs_r>:
 80087e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	688e      	ldr	r6, [r1, #8]
 80087ee:	429e      	cmp	r6, r3
 80087f0:	4682      	mov	sl, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	4690      	mov	r8, r2
 80087f6:	461f      	mov	r7, r3
 80087f8:	d838      	bhi.n	800886c <__ssputs_r+0x84>
 80087fa:	898a      	ldrh	r2, [r1, #12]
 80087fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008800:	d032      	beq.n	8008868 <__ssputs_r+0x80>
 8008802:	6825      	ldr	r5, [r4, #0]
 8008804:	6909      	ldr	r1, [r1, #16]
 8008806:	eba5 0901 	sub.w	r9, r5, r1
 800880a:	6965      	ldr	r5, [r4, #20]
 800880c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008814:	3301      	adds	r3, #1
 8008816:	444b      	add	r3, r9
 8008818:	106d      	asrs	r5, r5, #1
 800881a:	429d      	cmp	r5, r3
 800881c:	bf38      	it	cc
 800881e:	461d      	movcc	r5, r3
 8008820:	0553      	lsls	r3, r2, #21
 8008822:	d531      	bpl.n	8008888 <__ssputs_r+0xa0>
 8008824:	4629      	mov	r1, r5
 8008826:	f000 fb63 	bl	8008ef0 <_malloc_r>
 800882a:	4606      	mov	r6, r0
 800882c:	b950      	cbnz	r0, 8008844 <__ssputs_r+0x5c>
 800882e:	230c      	movs	r3, #12
 8008830:	f8ca 3000 	str.w	r3, [sl]
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008844:	6921      	ldr	r1, [r4, #16]
 8008846:	464a      	mov	r2, r9
 8008848:	f000 fabe 	bl	8008dc8 <memcpy>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	6126      	str	r6, [r4, #16]
 800885a:	6165      	str	r5, [r4, #20]
 800885c:	444e      	add	r6, r9
 800885e:	eba5 0509 	sub.w	r5, r5, r9
 8008862:	6026      	str	r6, [r4, #0]
 8008864:	60a5      	str	r5, [r4, #8]
 8008866:	463e      	mov	r6, r7
 8008868:	42be      	cmp	r6, r7
 800886a:	d900      	bls.n	800886e <__ssputs_r+0x86>
 800886c:	463e      	mov	r6, r7
 800886e:	6820      	ldr	r0, [r4, #0]
 8008870:	4632      	mov	r2, r6
 8008872:	4641      	mov	r1, r8
 8008874:	f000 fab6 	bl	8008de4 <memmove>
 8008878:	68a3      	ldr	r3, [r4, #8]
 800887a:	1b9b      	subs	r3, r3, r6
 800887c:	60a3      	str	r3, [r4, #8]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	4433      	add	r3, r6
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	2000      	movs	r0, #0
 8008886:	e7db      	b.n	8008840 <__ssputs_r+0x58>
 8008888:	462a      	mov	r2, r5
 800888a:	f000 fba5 	bl	8008fd8 <_realloc_r>
 800888e:	4606      	mov	r6, r0
 8008890:	2800      	cmp	r0, #0
 8008892:	d1e1      	bne.n	8008858 <__ssputs_r+0x70>
 8008894:	6921      	ldr	r1, [r4, #16]
 8008896:	4650      	mov	r0, sl
 8008898:	f000 fabe 	bl	8008e18 <_free_r>
 800889c:	e7c7      	b.n	800882e <__ssputs_r+0x46>
	...

080088a0 <_svfiprintf_r>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	4698      	mov	r8, r3
 80088a6:	898b      	ldrh	r3, [r1, #12]
 80088a8:	061b      	lsls	r3, r3, #24
 80088aa:	b09d      	sub	sp, #116	; 0x74
 80088ac:	4607      	mov	r7, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	4614      	mov	r4, r2
 80088b2:	d50e      	bpl.n	80088d2 <_svfiprintf_r+0x32>
 80088b4:	690b      	ldr	r3, [r1, #16]
 80088b6:	b963      	cbnz	r3, 80088d2 <_svfiprintf_r+0x32>
 80088b8:	2140      	movs	r1, #64	; 0x40
 80088ba:	f000 fb19 	bl	8008ef0 <_malloc_r>
 80088be:	6028      	str	r0, [r5, #0]
 80088c0:	6128      	str	r0, [r5, #16]
 80088c2:	b920      	cbnz	r0, 80088ce <_svfiprintf_r+0x2e>
 80088c4:	230c      	movs	r3, #12
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	e0d1      	b.n	8008a72 <_svfiprintf_r+0x1d2>
 80088ce:	2340      	movs	r3, #64	; 0x40
 80088d0:	616b      	str	r3, [r5, #20]
 80088d2:	2300      	movs	r3, #0
 80088d4:	9309      	str	r3, [sp, #36]	; 0x24
 80088d6:	2320      	movs	r3, #32
 80088d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e0:	2330      	movs	r3, #48	; 0x30
 80088e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a8c <_svfiprintf_r+0x1ec>
 80088e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ea:	f04f 0901 	mov.w	r9, #1
 80088ee:	4623      	mov	r3, r4
 80088f0:	469a      	mov	sl, r3
 80088f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f6:	b10a      	cbz	r2, 80088fc <_svfiprintf_r+0x5c>
 80088f8:	2a25      	cmp	r2, #37	; 0x25
 80088fa:	d1f9      	bne.n	80088f0 <_svfiprintf_r+0x50>
 80088fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008900:	d00b      	beq.n	800891a <_svfiprintf_r+0x7a>
 8008902:	465b      	mov	r3, fp
 8008904:	4622      	mov	r2, r4
 8008906:	4629      	mov	r1, r5
 8008908:	4638      	mov	r0, r7
 800890a:	f7ff ff6d 	bl	80087e8 <__ssputs_r>
 800890e:	3001      	adds	r0, #1
 8008910:	f000 80aa 	beq.w	8008a68 <_svfiprintf_r+0x1c8>
 8008914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008916:	445a      	add	r2, fp
 8008918:	9209      	str	r2, [sp, #36]	; 0x24
 800891a:	f89a 3000 	ldrb.w	r3, [sl]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80a2 	beq.w	8008a68 <_svfiprintf_r+0x1c8>
 8008924:	2300      	movs	r3, #0
 8008926:	f04f 32ff 	mov.w	r2, #4294967295
 800892a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800892e:	f10a 0a01 	add.w	sl, sl, #1
 8008932:	9304      	str	r3, [sp, #16]
 8008934:	9307      	str	r3, [sp, #28]
 8008936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800893a:	931a      	str	r3, [sp, #104]	; 0x68
 800893c:	4654      	mov	r4, sl
 800893e:	2205      	movs	r2, #5
 8008940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008944:	4851      	ldr	r0, [pc, #324]	; (8008a8c <_svfiprintf_r+0x1ec>)
 8008946:	f7f7 fc4b 	bl	80001e0 <memchr>
 800894a:	9a04      	ldr	r2, [sp, #16]
 800894c:	b9d8      	cbnz	r0, 8008986 <_svfiprintf_r+0xe6>
 800894e:	06d0      	lsls	r0, r2, #27
 8008950:	bf44      	itt	mi
 8008952:	2320      	movmi	r3, #32
 8008954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008958:	0711      	lsls	r1, r2, #28
 800895a:	bf44      	itt	mi
 800895c:	232b      	movmi	r3, #43	; 0x2b
 800895e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008962:	f89a 3000 	ldrb.w	r3, [sl]
 8008966:	2b2a      	cmp	r3, #42	; 0x2a
 8008968:	d015      	beq.n	8008996 <_svfiprintf_r+0xf6>
 800896a:	9a07      	ldr	r2, [sp, #28]
 800896c:	4654      	mov	r4, sl
 800896e:	2000      	movs	r0, #0
 8008970:	f04f 0c0a 	mov.w	ip, #10
 8008974:	4621      	mov	r1, r4
 8008976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800897a:	3b30      	subs	r3, #48	; 0x30
 800897c:	2b09      	cmp	r3, #9
 800897e:	d94e      	bls.n	8008a1e <_svfiprintf_r+0x17e>
 8008980:	b1b0      	cbz	r0, 80089b0 <_svfiprintf_r+0x110>
 8008982:	9207      	str	r2, [sp, #28]
 8008984:	e014      	b.n	80089b0 <_svfiprintf_r+0x110>
 8008986:	eba0 0308 	sub.w	r3, r0, r8
 800898a:	fa09 f303 	lsl.w	r3, r9, r3
 800898e:	4313      	orrs	r3, r2
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	46a2      	mov	sl, r4
 8008994:	e7d2      	b.n	800893c <_svfiprintf_r+0x9c>
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	1d19      	adds	r1, r3, #4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	9103      	str	r1, [sp, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfbb      	ittet	lt
 80089a2:	425b      	neglt	r3, r3
 80089a4:	f042 0202 	orrlt.w	r2, r2, #2
 80089a8:	9307      	strge	r3, [sp, #28]
 80089aa:	9307      	strlt	r3, [sp, #28]
 80089ac:	bfb8      	it	lt
 80089ae:	9204      	strlt	r2, [sp, #16]
 80089b0:	7823      	ldrb	r3, [r4, #0]
 80089b2:	2b2e      	cmp	r3, #46	; 0x2e
 80089b4:	d10c      	bne.n	80089d0 <_svfiprintf_r+0x130>
 80089b6:	7863      	ldrb	r3, [r4, #1]
 80089b8:	2b2a      	cmp	r3, #42	; 0x2a
 80089ba:	d135      	bne.n	8008a28 <_svfiprintf_r+0x188>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	1d1a      	adds	r2, r3, #4
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	9203      	str	r2, [sp, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bfb8      	it	lt
 80089c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80089cc:	3402      	adds	r4, #2
 80089ce:	9305      	str	r3, [sp, #20]
 80089d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a9c <_svfiprintf_r+0x1fc>
 80089d4:	7821      	ldrb	r1, [r4, #0]
 80089d6:	2203      	movs	r2, #3
 80089d8:	4650      	mov	r0, sl
 80089da:	f7f7 fc01 	bl	80001e0 <memchr>
 80089de:	b140      	cbz	r0, 80089f2 <_svfiprintf_r+0x152>
 80089e0:	2340      	movs	r3, #64	; 0x40
 80089e2:	eba0 000a 	sub.w	r0, r0, sl
 80089e6:	fa03 f000 	lsl.w	r0, r3, r0
 80089ea:	9b04      	ldr	r3, [sp, #16]
 80089ec:	4303      	orrs	r3, r0
 80089ee:	3401      	adds	r4, #1
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f6:	4826      	ldr	r0, [pc, #152]	; (8008a90 <_svfiprintf_r+0x1f0>)
 80089f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089fc:	2206      	movs	r2, #6
 80089fe:	f7f7 fbef 	bl	80001e0 <memchr>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d038      	beq.n	8008a78 <_svfiprintf_r+0x1d8>
 8008a06:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <_svfiprintf_r+0x1f4>)
 8008a08:	bb1b      	cbnz	r3, 8008a52 <_svfiprintf_r+0x1b2>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	3307      	adds	r3, #7
 8008a0e:	f023 0307 	bic.w	r3, r3, #7
 8008a12:	3308      	adds	r3, #8
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	4433      	add	r3, r6
 8008a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a1c:	e767      	b.n	80088ee <_svfiprintf_r+0x4e>
 8008a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a22:	460c      	mov	r4, r1
 8008a24:	2001      	movs	r0, #1
 8008a26:	e7a5      	b.n	8008974 <_svfiprintf_r+0xd4>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	3401      	adds	r4, #1
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f04f 0c0a 	mov.w	ip, #10
 8008a34:	4620      	mov	r0, r4
 8008a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a3a:	3a30      	subs	r2, #48	; 0x30
 8008a3c:	2a09      	cmp	r2, #9
 8008a3e:	d903      	bls.n	8008a48 <_svfiprintf_r+0x1a8>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0c5      	beq.n	80089d0 <_svfiprintf_r+0x130>
 8008a44:	9105      	str	r1, [sp, #20]
 8008a46:	e7c3      	b.n	80089d0 <_svfiprintf_r+0x130>
 8008a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7f0      	b.n	8008a34 <_svfiprintf_r+0x194>
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	462a      	mov	r2, r5
 8008a58:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <_svfiprintf_r+0x1f8>)
 8008a5a:	a904      	add	r1, sp, #16
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f3af 8000 	nop.w
 8008a62:	1c42      	adds	r2, r0, #1
 8008a64:	4606      	mov	r6, r0
 8008a66:	d1d6      	bne.n	8008a16 <_svfiprintf_r+0x176>
 8008a68:	89ab      	ldrh	r3, [r5, #12]
 8008a6a:	065b      	lsls	r3, r3, #25
 8008a6c:	f53f af2c 	bmi.w	80088c8 <_svfiprintf_r+0x28>
 8008a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a72:	b01d      	add	sp, #116	; 0x74
 8008a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a78:	ab03      	add	r3, sp, #12
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <_svfiprintf_r+0x1f8>)
 8008a80:	a904      	add	r1, sp, #16
 8008a82:	4638      	mov	r0, r7
 8008a84:	f000 f87a 	bl	8008b7c <_printf_i>
 8008a88:	e7eb      	b.n	8008a62 <_svfiprintf_r+0x1c2>
 8008a8a:	bf00      	nop
 8008a8c:	0800c311 	.word	0x0800c311
 8008a90:	0800c31b 	.word	0x0800c31b
 8008a94:	00000000 	.word	0x00000000
 8008a98:	080087e9 	.word	0x080087e9
 8008a9c:	0800c317 	.word	0x0800c317

08008aa0 <_printf_common>:
 8008aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	4699      	mov	r9, r3
 8008aa8:	688a      	ldr	r2, [r1, #8]
 8008aaa:	690b      	ldr	r3, [r1, #16]
 8008aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bfb8      	it	lt
 8008ab4:	4613      	movlt	r3, r2
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008abc:	4607      	mov	r7, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	b10a      	cbz	r2, 8008ac6 <_printf_common+0x26>
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	0699      	lsls	r1, r3, #26
 8008aca:	bf42      	ittt	mi
 8008acc:	6833      	ldrmi	r3, [r6, #0]
 8008ace:	3302      	addmi	r3, #2
 8008ad0:	6033      	strmi	r3, [r6, #0]
 8008ad2:	6825      	ldr	r5, [r4, #0]
 8008ad4:	f015 0506 	ands.w	r5, r5, #6
 8008ad8:	d106      	bne.n	8008ae8 <_printf_common+0x48>
 8008ada:	f104 0a19 	add.w	sl, r4, #25
 8008ade:	68e3      	ldr	r3, [r4, #12]
 8008ae0:	6832      	ldr	r2, [r6, #0]
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	42ab      	cmp	r3, r5
 8008ae6:	dc26      	bgt.n	8008b36 <_printf_common+0x96>
 8008ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008aec:	1e13      	subs	r3, r2, #0
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	bf18      	it	ne
 8008af2:	2301      	movne	r3, #1
 8008af4:	0692      	lsls	r2, r2, #26
 8008af6:	d42b      	bmi.n	8008b50 <_printf_common+0xb0>
 8008af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008afc:	4649      	mov	r1, r9
 8008afe:	4638      	mov	r0, r7
 8008b00:	47c0      	blx	r8
 8008b02:	3001      	adds	r0, #1
 8008b04:	d01e      	beq.n	8008b44 <_printf_common+0xa4>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	68e5      	ldr	r5, [r4, #12]
 8008b0a:	6832      	ldr	r2, [r6, #0]
 8008b0c:	f003 0306 	and.w	r3, r3, #6
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	bf08      	it	eq
 8008b14:	1aad      	subeq	r5, r5, r2
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	6922      	ldr	r2, [r4, #16]
 8008b1a:	bf0c      	ite	eq
 8008b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b20:	2500      	movne	r5, #0
 8008b22:	4293      	cmp	r3, r2
 8008b24:	bfc4      	itt	gt
 8008b26:	1a9b      	subgt	r3, r3, r2
 8008b28:	18ed      	addgt	r5, r5, r3
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	341a      	adds	r4, #26
 8008b2e:	42b5      	cmp	r5, r6
 8008b30:	d11a      	bne.n	8008b68 <_printf_common+0xc8>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e008      	b.n	8008b48 <_printf_common+0xa8>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4652      	mov	r2, sl
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	47c0      	blx	r8
 8008b40:	3001      	adds	r0, #1
 8008b42:	d103      	bne.n	8008b4c <_printf_common+0xac>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	e7c6      	b.n	8008ade <_printf_common+0x3e>
 8008b50:	18e1      	adds	r1, r4, r3
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	2030      	movs	r0, #48	; 0x30
 8008b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b5a:	4422      	add	r2, r4
 8008b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b64:	3302      	adds	r3, #2
 8008b66:	e7c7      	b.n	8008af8 <_printf_common+0x58>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	4638      	mov	r0, r7
 8008b70:	47c0      	blx	r8
 8008b72:	3001      	adds	r0, #1
 8008b74:	d0e6      	beq.n	8008b44 <_printf_common+0xa4>
 8008b76:	3601      	adds	r6, #1
 8008b78:	e7d9      	b.n	8008b2e <_printf_common+0x8e>
	...

08008b7c <_printf_i>:
 8008b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	7e0f      	ldrb	r7, [r1, #24]
 8008b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b84:	2f78      	cmp	r7, #120	; 0x78
 8008b86:	4691      	mov	r9, r2
 8008b88:	4680      	mov	r8, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	469a      	mov	sl, r3
 8008b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b92:	d807      	bhi.n	8008ba4 <_printf_i+0x28>
 8008b94:	2f62      	cmp	r7, #98	; 0x62
 8008b96:	d80a      	bhi.n	8008bae <_printf_i+0x32>
 8008b98:	2f00      	cmp	r7, #0
 8008b9a:	f000 80d8 	beq.w	8008d4e <_printf_i+0x1d2>
 8008b9e:	2f58      	cmp	r7, #88	; 0x58
 8008ba0:	f000 80a3 	beq.w	8008cea <_printf_i+0x16e>
 8008ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bac:	e03a      	b.n	8008c24 <_printf_i+0xa8>
 8008bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bb2:	2b15      	cmp	r3, #21
 8008bb4:	d8f6      	bhi.n	8008ba4 <_printf_i+0x28>
 8008bb6:	a101      	add	r1, pc, #4	; (adr r1, 8008bbc <_printf_i+0x40>)
 8008bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bbc:	08008c15 	.word	0x08008c15
 8008bc0:	08008c29 	.word	0x08008c29
 8008bc4:	08008ba5 	.word	0x08008ba5
 8008bc8:	08008ba5 	.word	0x08008ba5
 8008bcc:	08008ba5 	.word	0x08008ba5
 8008bd0:	08008ba5 	.word	0x08008ba5
 8008bd4:	08008c29 	.word	0x08008c29
 8008bd8:	08008ba5 	.word	0x08008ba5
 8008bdc:	08008ba5 	.word	0x08008ba5
 8008be0:	08008ba5 	.word	0x08008ba5
 8008be4:	08008ba5 	.word	0x08008ba5
 8008be8:	08008d35 	.word	0x08008d35
 8008bec:	08008c59 	.word	0x08008c59
 8008bf0:	08008d17 	.word	0x08008d17
 8008bf4:	08008ba5 	.word	0x08008ba5
 8008bf8:	08008ba5 	.word	0x08008ba5
 8008bfc:	08008d57 	.word	0x08008d57
 8008c00:	08008ba5 	.word	0x08008ba5
 8008c04:	08008c59 	.word	0x08008c59
 8008c08:	08008ba5 	.word	0x08008ba5
 8008c0c:	08008ba5 	.word	0x08008ba5
 8008c10:	08008d1f 	.word	0x08008d1f
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	1d1a      	adds	r2, r3, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	602a      	str	r2, [r5, #0]
 8008c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0a3      	b.n	8008d70 <_printf_i+0x1f4>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	6829      	ldr	r1, [r5, #0]
 8008c2c:	0606      	lsls	r6, r0, #24
 8008c2e:	f101 0304 	add.w	r3, r1, #4
 8008c32:	d50a      	bpl.n	8008c4a <_printf_i+0xce>
 8008c34:	680e      	ldr	r6, [r1, #0]
 8008c36:	602b      	str	r3, [r5, #0]
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	da03      	bge.n	8008c44 <_printf_i+0xc8>
 8008c3c:	232d      	movs	r3, #45	; 0x2d
 8008c3e:	4276      	negs	r6, r6
 8008c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c44:	485e      	ldr	r0, [pc, #376]	; (8008dc0 <_printf_i+0x244>)
 8008c46:	230a      	movs	r3, #10
 8008c48:	e019      	b.n	8008c7e <_printf_i+0x102>
 8008c4a:	680e      	ldr	r6, [r1, #0]
 8008c4c:	602b      	str	r3, [r5, #0]
 8008c4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c52:	bf18      	it	ne
 8008c54:	b236      	sxthne	r6, r6
 8008c56:	e7ef      	b.n	8008c38 <_printf_i+0xbc>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	1d19      	adds	r1, r3, #4
 8008c5e:	6029      	str	r1, [r5, #0]
 8008c60:	0601      	lsls	r1, r0, #24
 8008c62:	d501      	bpl.n	8008c68 <_printf_i+0xec>
 8008c64:	681e      	ldr	r6, [r3, #0]
 8008c66:	e002      	b.n	8008c6e <_printf_i+0xf2>
 8008c68:	0646      	lsls	r6, r0, #25
 8008c6a:	d5fb      	bpl.n	8008c64 <_printf_i+0xe8>
 8008c6c:	881e      	ldrh	r6, [r3, #0]
 8008c6e:	4854      	ldr	r0, [pc, #336]	; (8008dc0 <_printf_i+0x244>)
 8008c70:	2f6f      	cmp	r7, #111	; 0x6f
 8008c72:	bf0c      	ite	eq
 8008c74:	2308      	moveq	r3, #8
 8008c76:	230a      	movne	r3, #10
 8008c78:	2100      	movs	r1, #0
 8008c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c7e:	6865      	ldr	r5, [r4, #4]
 8008c80:	60a5      	str	r5, [r4, #8]
 8008c82:	2d00      	cmp	r5, #0
 8008c84:	bfa2      	ittt	ge
 8008c86:	6821      	ldrge	r1, [r4, #0]
 8008c88:	f021 0104 	bicge.w	r1, r1, #4
 8008c8c:	6021      	strge	r1, [r4, #0]
 8008c8e:	b90e      	cbnz	r6, 8008c94 <_printf_i+0x118>
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	d04d      	beq.n	8008d30 <_printf_i+0x1b4>
 8008c94:	4615      	mov	r5, r2
 8008c96:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c9a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c9e:	5dc7      	ldrb	r7, [r0, r7]
 8008ca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ca4:	4637      	mov	r7, r6
 8008ca6:	42bb      	cmp	r3, r7
 8008ca8:	460e      	mov	r6, r1
 8008caa:	d9f4      	bls.n	8008c96 <_printf_i+0x11a>
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d10b      	bne.n	8008cc8 <_printf_i+0x14c>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	07de      	lsls	r6, r3, #31
 8008cb4:	d508      	bpl.n	8008cc8 <_printf_i+0x14c>
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	6861      	ldr	r1, [r4, #4]
 8008cba:	4299      	cmp	r1, r3
 8008cbc:	bfde      	ittt	le
 8008cbe:	2330      	movle	r3, #48	; 0x30
 8008cc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cc8:	1b52      	subs	r2, r2, r5
 8008cca:	6122      	str	r2, [r4, #16]
 8008ccc:	f8cd a000 	str.w	sl, [sp]
 8008cd0:	464b      	mov	r3, r9
 8008cd2:	aa03      	add	r2, sp, #12
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	f7ff fee2 	bl	8008aa0 <_printf_common>
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d14c      	bne.n	8008d7a <_printf_i+0x1fe>
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce4:	b004      	add	sp, #16
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	4835      	ldr	r0, [pc, #212]	; (8008dc0 <_printf_i+0x244>)
 8008cec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cf0:	6829      	ldr	r1, [r5, #0]
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cf8:	6029      	str	r1, [r5, #0]
 8008cfa:	061d      	lsls	r5, r3, #24
 8008cfc:	d514      	bpl.n	8008d28 <_printf_i+0x1ac>
 8008cfe:	07df      	lsls	r7, r3, #31
 8008d00:	bf44      	itt	mi
 8008d02:	f043 0320 	orrmi.w	r3, r3, #32
 8008d06:	6023      	strmi	r3, [r4, #0]
 8008d08:	b91e      	cbnz	r6, 8008d12 <_printf_i+0x196>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	f023 0320 	bic.w	r3, r3, #32
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	2310      	movs	r3, #16
 8008d14:	e7b0      	b.n	8008c78 <_printf_i+0xfc>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f043 0320 	orr.w	r3, r3, #32
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	2378      	movs	r3, #120	; 0x78
 8008d20:	4828      	ldr	r0, [pc, #160]	; (8008dc4 <_printf_i+0x248>)
 8008d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d26:	e7e3      	b.n	8008cf0 <_printf_i+0x174>
 8008d28:	0659      	lsls	r1, r3, #25
 8008d2a:	bf48      	it	mi
 8008d2c:	b2b6      	uxthmi	r6, r6
 8008d2e:	e7e6      	b.n	8008cfe <_printf_i+0x182>
 8008d30:	4615      	mov	r5, r2
 8008d32:	e7bb      	b.n	8008cac <_printf_i+0x130>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	6826      	ldr	r6, [r4, #0]
 8008d38:	6961      	ldr	r1, [r4, #20]
 8008d3a:	1d18      	adds	r0, r3, #4
 8008d3c:	6028      	str	r0, [r5, #0]
 8008d3e:	0635      	lsls	r5, r6, #24
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	d501      	bpl.n	8008d48 <_printf_i+0x1cc>
 8008d44:	6019      	str	r1, [r3, #0]
 8008d46:	e002      	b.n	8008d4e <_printf_i+0x1d2>
 8008d48:	0670      	lsls	r0, r6, #25
 8008d4a:	d5fb      	bpl.n	8008d44 <_printf_i+0x1c8>
 8008d4c:	8019      	strh	r1, [r3, #0]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	4615      	mov	r5, r2
 8008d54:	e7ba      	b.n	8008ccc <_printf_i+0x150>
 8008d56:	682b      	ldr	r3, [r5, #0]
 8008d58:	1d1a      	adds	r2, r3, #4
 8008d5a:	602a      	str	r2, [r5, #0]
 8008d5c:	681d      	ldr	r5, [r3, #0]
 8008d5e:	6862      	ldr	r2, [r4, #4]
 8008d60:	2100      	movs	r1, #0
 8008d62:	4628      	mov	r0, r5
 8008d64:	f7f7 fa3c 	bl	80001e0 <memchr>
 8008d68:	b108      	cbz	r0, 8008d6e <_printf_i+0x1f2>
 8008d6a:	1b40      	subs	r0, r0, r5
 8008d6c:	6060      	str	r0, [r4, #4]
 8008d6e:	6863      	ldr	r3, [r4, #4]
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	2300      	movs	r3, #0
 8008d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d78:	e7a8      	b.n	8008ccc <_printf_i+0x150>
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	47d0      	blx	sl
 8008d84:	3001      	adds	r0, #1
 8008d86:	d0ab      	beq.n	8008ce0 <_printf_i+0x164>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	079b      	lsls	r3, r3, #30
 8008d8c:	d413      	bmi.n	8008db6 <_printf_i+0x23a>
 8008d8e:	68e0      	ldr	r0, [r4, #12]
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	4298      	cmp	r0, r3
 8008d94:	bfb8      	it	lt
 8008d96:	4618      	movlt	r0, r3
 8008d98:	e7a4      	b.n	8008ce4 <_printf_i+0x168>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	4649      	mov	r1, r9
 8008da0:	4640      	mov	r0, r8
 8008da2:	47d0      	blx	sl
 8008da4:	3001      	adds	r0, #1
 8008da6:	d09b      	beq.n	8008ce0 <_printf_i+0x164>
 8008da8:	3501      	adds	r5, #1
 8008daa:	68e3      	ldr	r3, [r4, #12]
 8008dac:	9903      	ldr	r1, [sp, #12]
 8008dae:	1a5b      	subs	r3, r3, r1
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	dcf2      	bgt.n	8008d9a <_printf_i+0x21e>
 8008db4:	e7eb      	b.n	8008d8e <_printf_i+0x212>
 8008db6:	2500      	movs	r5, #0
 8008db8:	f104 0619 	add.w	r6, r4, #25
 8008dbc:	e7f5      	b.n	8008daa <_printf_i+0x22e>
 8008dbe:	bf00      	nop
 8008dc0:	0800c322 	.word	0x0800c322
 8008dc4:	0800c333 	.word	0x0800c333

08008dc8 <memcpy>:
 8008dc8:	440a      	add	r2, r1
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dd0:	d100      	bne.n	8008dd4 <memcpy+0xc>
 8008dd2:	4770      	bx	lr
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dde:	4291      	cmp	r1, r2
 8008de0:	d1f9      	bne.n	8008dd6 <memcpy+0xe>
 8008de2:	bd10      	pop	{r4, pc}

08008de4 <memmove>:
 8008de4:	4288      	cmp	r0, r1
 8008de6:	b510      	push	{r4, lr}
 8008de8:	eb01 0402 	add.w	r4, r1, r2
 8008dec:	d902      	bls.n	8008df4 <memmove+0x10>
 8008dee:	4284      	cmp	r4, r0
 8008df0:	4623      	mov	r3, r4
 8008df2:	d807      	bhi.n	8008e04 <memmove+0x20>
 8008df4:	1e43      	subs	r3, r0, #1
 8008df6:	42a1      	cmp	r1, r4
 8008df8:	d008      	beq.n	8008e0c <memmove+0x28>
 8008dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e02:	e7f8      	b.n	8008df6 <memmove+0x12>
 8008e04:	4402      	add	r2, r0
 8008e06:	4601      	mov	r1, r0
 8008e08:	428a      	cmp	r2, r1
 8008e0a:	d100      	bne.n	8008e0e <memmove+0x2a>
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e16:	e7f7      	b.n	8008e08 <memmove+0x24>

08008e18 <_free_r>:
 8008e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1a:	2900      	cmp	r1, #0
 8008e1c:	d044      	beq.n	8008ea8 <_free_r+0x90>
 8008e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e22:	9001      	str	r0, [sp, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f1a1 0404 	sub.w	r4, r1, #4
 8008e2a:	bfb8      	it	lt
 8008e2c:	18e4      	addlt	r4, r4, r3
 8008e2e:	f000 f913 	bl	8009058 <__malloc_lock>
 8008e32:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <_free_r+0x94>)
 8008e34:	9801      	ldr	r0, [sp, #4]
 8008e36:	6813      	ldr	r3, [r2, #0]
 8008e38:	b933      	cbnz	r3, 8008e48 <_free_r+0x30>
 8008e3a:	6063      	str	r3, [r4, #4]
 8008e3c:	6014      	str	r4, [r2, #0]
 8008e3e:	b003      	add	sp, #12
 8008e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e44:	f000 b90e 	b.w	8009064 <__malloc_unlock>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d908      	bls.n	8008e5e <_free_r+0x46>
 8008e4c:	6825      	ldr	r5, [r4, #0]
 8008e4e:	1961      	adds	r1, r4, r5
 8008e50:	428b      	cmp	r3, r1
 8008e52:	bf01      	itttt	eq
 8008e54:	6819      	ldreq	r1, [r3, #0]
 8008e56:	685b      	ldreq	r3, [r3, #4]
 8008e58:	1949      	addeq	r1, r1, r5
 8008e5a:	6021      	streq	r1, [r4, #0]
 8008e5c:	e7ed      	b.n	8008e3a <_free_r+0x22>
 8008e5e:	461a      	mov	r2, r3
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b10b      	cbz	r3, 8008e68 <_free_r+0x50>
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	d9fa      	bls.n	8008e5e <_free_r+0x46>
 8008e68:	6811      	ldr	r1, [r2, #0]
 8008e6a:	1855      	adds	r5, r2, r1
 8008e6c:	42a5      	cmp	r5, r4
 8008e6e:	d10b      	bne.n	8008e88 <_free_r+0x70>
 8008e70:	6824      	ldr	r4, [r4, #0]
 8008e72:	4421      	add	r1, r4
 8008e74:	1854      	adds	r4, r2, r1
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	6011      	str	r1, [r2, #0]
 8008e7a:	d1e0      	bne.n	8008e3e <_free_r+0x26>
 8008e7c:	681c      	ldr	r4, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	6053      	str	r3, [r2, #4]
 8008e82:	4421      	add	r1, r4
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	e7da      	b.n	8008e3e <_free_r+0x26>
 8008e88:	d902      	bls.n	8008e90 <_free_r+0x78>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	e7d6      	b.n	8008e3e <_free_r+0x26>
 8008e90:	6825      	ldr	r5, [r4, #0]
 8008e92:	1961      	adds	r1, r4, r5
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf04      	itt	eq
 8008e98:	6819      	ldreq	r1, [r3, #0]
 8008e9a:	685b      	ldreq	r3, [r3, #4]
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	bf04      	itt	eq
 8008ea0:	1949      	addeq	r1, r1, r5
 8008ea2:	6021      	streq	r1, [r4, #0]
 8008ea4:	6054      	str	r4, [r2, #4]
 8008ea6:	e7ca      	b.n	8008e3e <_free_r+0x26>
 8008ea8:	b003      	add	sp, #12
 8008eaa:	bd30      	pop	{r4, r5, pc}
 8008eac:	20000410 	.word	0x20000410

08008eb0 <sbrk_aligned>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	4e0e      	ldr	r6, [pc, #56]	; (8008eec <sbrk_aligned+0x3c>)
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	6831      	ldr	r1, [r6, #0]
 8008eb8:	4605      	mov	r5, r0
 8008eba:	b911      	cbnz	r1, 8008ec2 <sbrk_aligned+0x12>
 8008ebc:	f000 f8bc 	bl	8009038 <_sbrk_r>
 8008ec0:	6030      	str	r0, [r6, #0]
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f000 f8b7 	bl	8009038 <_sbrk_r>
 8008eca:	1c43      	adds	r3, r0, #1
 8008ecc:	d00a      	beq.n	8008ee4 <sbrk_aligned+0x34>
 8008ece:	1cc4      	adds	r4, r0, #3
 8008ed0:	f024 0403 	bic.w	r4, r4, #3
 8008ed4:	42a0      	cmp	r0, r4
 8008ed6:	d007      	beq.n	8008ee8 <sbrk_aligned+0x38>
 8008ed8:	1a21      	subs	r1, r4, r0
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f8ac 	bl	8009038 <_sbrk_r>
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d101      	bne.n	8008ee8 <sbrk_aligned+0x38>
 8008ee4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ee8:	4620      	mov	r0, r4
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	20000414 	.word	0x20000414

08008ef0 <_malloc_r>:
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	1ccd      	adds	r5, r1, #3
 8008ef6:	f025 0503 	bic.w	r5, r5, #3
 8008efa:	3508      	adds	r5, #8
 8008efc:	2d0c      	cmp	r5, #12
 8008efe:	bf38      	it	cc
 8008f00:	250c      	movcc	r5, #12
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	4607      	mov	r7, r0
 8008f06:	db01      	blt.n	8008f0c <_malloc_r+0x1c>
 8008f08:	42a9      	cmp	r1, r5
 8008f0a:	d905      	bls.n	8008f18 <_malloc_r+0x28>
 8008f0c:	230c      	movs	r3, #12
 8008f0e:	603b      	str	r3, [r7, #0]
 8008f10:	2600      	movs	r6, #0
 8008f12:	4630      	mov	r0, r6
 8008f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f18:	4e2e      	ldr	r6, [pc, #184]	; (8008fd4 <_malloc_r+0xe4>)
 8008f1a:	f000 f89d 	bl	8009058 <__malloc_lock>
 8008f1e:	6833      	ldr	r3, [r6, #0]
 8008f20:	461c      	mov	r4, r3
 8008f22:	bb34      	cbnz	r4, 8008f72 <_malloc_r+0x82>
 8008f24:	4629      	mov	r1, r5
 8008f26:	4638      	mov	r0, r7
 8008f28:	f7ff ffc2 	bl	8008eb0 <sbrk_aligned>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	4604      	mov	r4, r0
 8008f30:	d14d      	bne.n	8008fce <_malloc_r+0xde>
 8008f32:	6834      	ldr	r4, [r6, #0]
 8008f34:	4626      	mov	r6, r4
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d140      	bne.n	8008fbc <_malloc_r+0xcc>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4638      	mov	r0, r7
 8008f40:	eb04 0803 	add.w	r8, r4, r3
 8008f44:	f000 f878 	bl	8009038 <_sbrk_r>
 8008f48:	4580      	cmp	r8, r0
 8008f4a:	d13a      	bne.n	8008fc2 <_malloc_r+0xd2>
 8008f4c:	6821      	ldr	r1, [r4, #0]
 8008f4e:	3503      	adds	r5, #3
 8008f50:	1a6d      	subs	r5, r5, r1
 8008f52:	f025 0503 	bic.w	r5, r5, #3
 8008f56:	3508      	adds	r5, #8
 8008f58:	2d0c      	cmp	r5, #12
 8008f5a:	bf38      	it	cc
 8008f5c:	250c      	movcc	r5, #12
 8008f5e:	4629      	mov	r1, r5
 8008f60:	4638      	mov	r0, r7
 8008f62:	f7ff ffa5 	bl	8008eb0 <sbrk_aligned>
 8008f66:	3001      	adds	r0, #1
 8008f68:	d02b      	beq.n	8008fc2 <_malloc_r+0xd2>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	442b      	add	r3, r5
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	e00e      	b.n	8008f90 <_malloc_r+0xa0>
 8008f72:	6822      	ldr	r2, [r4, #0]
 8008f74:	1b52      	subs	r2, r2, r5
 8008f76:	d41e      	bmi.n	8008fb6 <_malloc_r+0xc6>
 8008f78:	2a0b      	cmp	r2, #11
 8008f7a:	d916      	bls.n	8008faa <_malloc_r+0xba>
 8008f7c:	1961      	adds	r1, r4, r5
 8008f7e:	42a3      	cmp	r3, r4
 8008f80:	6025      	str	r5, [r4, #0]
 8008f82:	bf18      	it	ne
 8008f84:	6059      	strne	r1, [r3, #4]
 8008f86:	6863      	ldr	r3, [r4, #4]
 8008f88:	bf08      	it	eq
 8008f8a:	6031      	streq	r1, [r6, #0]
 8008f8c:	5162      	str	r2, [r4, r5]
 8008f8e:	604b      	str	r3, [r1, #4]
 8008f90:	4638      	mov	r0, r7
 8008f92:	f104 060b 	add.w	r6, r4, #11
 8008f96:	f000 f865 	bl	8009064 <__malloc_unlock>
 8008f9a:	f026 0607 	bic.w	r6, r6, #7
 8008f9e:	1d23      	adds	r3, r4, #4
 8008fa0:	1af2      	subs	r2, r6, r3
 8008fa2:	d0b6      	beq.n	8008f12 <_malloc_r+0x22>
 8008fa4:	1b9b      	subs	r3, r3, r6
 8008fa6:	50a3      	str	r3, [r4, r2]
 8008fa8:	e7b3      	b.n	8008f12 <_malloc_r+0x22>
 8008faa:	6862      	ldr	r2, [r4, #4]
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	bf0c      	ite	eq
 8008fb0:	6032      	streq	r2, [r6, #0]
 8008fb2:	605a      	strne	r2, [r3, #4]
 8008fb4:	e7ec      	b.n	8008f90 <_malloc_r+0xa0>
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	6864      	ldr	r4, [r4, #4]
 8008fba:	e7b2      	b.n	8008f22 <_malloc_r+0x32>
 8008fbc:	4634      	mov	r4, r6
 8008fbe:	6876      	ldr	r6, [r6, #4]
 8008fc0:	e7b9      	b.n	8008f36 <_malloc_r+0x46>
 8008fc2:	230c      	movs	r3, #12
 8008fc4:	603b      	str	r3, [r7, #0]
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f000 f84c 	bl	8009064 <__malloc_unlock>
 8008fcc:	e7a1      	b.n	8008f12 <_malloc_r+0x22>
 8008fce:	6025      	str	r5, [r4, #0]
 8008fd0:	e7de      	b.n	8008f90 <_malloc_r+0xa0>
 8008fd2:	bf00      	nop
 8008fd4:	20000410 	.word	0x20000410

08008fd8 <_realloc_r>:
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	4680      	mov	r8, r0
 8008fde:	4614      	mov	r4, r2
 8008fe0:	460e      	mov	r6, r1
 8008fe2:	b921      	cbnz	r1, 8008fee <_realloc_r+0x16>
 8008fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	4611      	mov	r1, r2
 8008fea:	f7ff bf81 	b.w	8008ef0 <_malloc_r>
 8008fee:	b92a      	cbnz	r2, 8008ffc <_realloc_r+0x24>
 8008ff0:	f7ff ff12 	bl	8008e18 <_free_r>
 8008ff4:	4625      	mov	r5, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffc:	f000 f838 	bl	8009070 <_malloc_usable_size_r>
 8009000:	4284      	cmp	r4, r0
 8009002:	4607      	mov	r7, r0
 8009004:	d802      	bhi.n	800900c <_realloc_r+0x34>
 8009006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800900a:	d812      	bhi.n	8009032 <_realloc_r+0x5a>
 800900c:	4621      	mov	r1, r4
 800900e:	4640      	mov	r0, r8
 8009010:	f7ff ff6e 	bl	8008ef0 <_malloc_r>
 8009014:	4605      	mov	r5, r0
 8009016:	2800      	cmp	r0, #0
 8009018:	d0ed      	beq.n	8008ff6 <_realloc_r+0x1e>
 800901a:	42bc      	cmp	r4, r7
 800901c:	4622      	mov	r2, r4
 800901e:	4631      	mov	r1, r6
 8009020:	bf28      	it	cs
 8009022:	463a      	movcs	r2, r7
 8009024:	f7ff fed0 	bl	8008dc8 <memcpy>
 8009028:	4631      	mov	r1, r6
 800902a:	4640      	mov	r0, r8
 800902c:	f7ff fef4 	bl	8008e18 <_free_r>
 8009030:	e7e1      	b.n	8008ff6 <_realloc_r+0x1e>
 8009032:	4635      	mov	r5, r6
 8009034:	e7df      	b.n	8008ff6 <_realloc_r+0x1e>
	...

08009038 <_sbrk_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_sbrk_r+0x1c>)
 800903c:	2300      	movs	r3, #0
 800903e:	4604      	mov	r4, r0
 8009040:	4608      	mov	r0, r1
 8009042:	602b      	str	r3, [r5, #0]
 8009044:	f7fa fbd8 	bl	80037f8 <_sbrk>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d102      	bne.n	8009052 <_sbrk_r+0x1a>
 800904c:	682b      	ldr	r3, [r5, #0]
 800904e:	b103      	cbz	r3, 8009052 <_sbrk_r+0x1a>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	20000418 	.word	0x20000418

08009058 <__malloc_lock>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__malloc_lock+0x8>)
 800905a:	f000 b811 	b.w	8009080 <__retarget_lock_acquire_recursive>
 800905e:	bf00      	nop
 8009060:	2000041c 	.word	0x2000041c

08009064 <__malloc_unlock>:
 8009064:	4801      	ldr	r0, [pc, #4]	; (800906c <__malloc_unlock+0x8>)
 8009066:	f000 b80c 	b.w	8009082 <__retarget_lock_release_recursive>
 800906a:	bf00      	nop
 800906c:	2000041c 	.word	0x2000041c

08009070 <_malloc_usable_size_r>:
 8009070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009074:	1f18      	subs	r0, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfbc      	itt	lt
 800907a:	580b      	ldrlt	r3, [r1, r0]
 800907c:	18c0      	addlt	r0, r0, r3
 800907e:	4770      	bx	lr

08009080 <__retarget_lock_acquire_recursive>:
 8009080:	4770      	bx	lr

08009082 <__retarget_lock_release_recursive>:
 8009082:	4770      	bx	lr

08009084 <_init>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	bf00      	nop
 8009088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908a:	bc08      	pop	{r3}
 800908c:	469e      	mov	lr, r3
 800908e:	4770      	bx	lr

08009090 <_fini>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	bf00      	nop
 8009094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009096:	bc08      	pop	{r3}
 8009098:	469e      	mov	lr, r3
 800909a:	4770      	bx	lr
