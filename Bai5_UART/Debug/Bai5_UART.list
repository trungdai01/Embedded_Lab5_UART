
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000902c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032a8  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c464  0800c464  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c464  0800c464  0001c464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c46c  0800c46c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c46c  0800c46c  0001c46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c470  0800c470  0001c470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800c474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000003a8  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199e9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb6  00000000  00000000  00039a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003d950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001428  00000000  00000000  0003ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025944  00000000  00000000  00040370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f204  00000000  00000000  00065cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d374c  00000000  00000000  00084eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158604  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dc8  00000000  00000000  00158654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091a4 	.word	0x080091a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080091a4 	.word	0x080091a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <button_init+0x14>)
 800058e:	f004 f89b 	bl	80046c8 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <button_Scan>:

void button_Scan(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	482f      	ldr	r0, [pc, #188]	; (8000664 <button_Scan+0xc8>)
 80005a8:	f004 f88e 	bl	80046c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	482c      	ldr	r0, [pc, #176]	; (8000664 <button_Scan+0xc8>)
 80005b2:	f004 f889 	bl	80046c8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005b6:	230a      	movs	r3, #10
 80005b8:	2202      	movs	r2, #2
 80005ba:	492b      	ldr	r1, [pc, #172]	; (8000668 <button_Scan+0xcc>)
 80005bc:	482b      	ldr	r0, [pc, #172]	; (800066c <button_Scan+0xd0>)
 80005be:	f005 fed4 	bl	800636a <HAL_SPI_Receive>
	  int button_index = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	e03f      	b.n	8000652 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	db06      	blt.n	80005e6 <button_Scan+0x4a>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	dc03      	bgt.n	80005e6 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3304      	adds	r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e018      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	dd07      	ble.n	80005fc <button_Scan+0x60>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	dc04      	bgt.n	80005fc <button_Scan+0x60>
			  button_index = 7 - i;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f1c3 0307 	rsb	r3, r3, #7
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e00d      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	dd06      	ble.n	8000610 <button_Scan+0x74>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0b      	cmp	r3, #11
 8000606:	dc03      	bgt.n	8000610 <button_Scan+0x74>
			  button_index = i + 4;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e003      	b.n	8000618 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f1c3 0317 	rsb	r3, r3, #23
 8000616:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <button_Scan+0xcc>)
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	897b      	ldrh	r3, [r7, #10]
 800061e:	4013      	ands	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <button_Scan+0x96>
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2100      	movs	r1, #0
 800062c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000630:	e009      	b.n	8000646 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063a:	3301      	adds	r3, #1
 800063c:	b299      	uxth	r1, r3
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <button_Scan+0xd4>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	ddbc      	ble.n	80005d2 <button_Scan+0x36>
	  }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020c00 	.word	0x40020c00
 8000668:	200000b8 	.word	0x200000b8
 800066c:	2000025c 	.word	0x2000025c
 8000670:	20000098 	.word	0x20000098

08000674 <ds3231_Write>:
			;
	};
}

void ds3231_Write(uint8_t address, uint8_t value)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af04      	add	r7, sp, #16
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fbfa 	bl	8003e80 <DEC2BCD>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	b29a      	uxth	r2, r3
 8000694:	230a      	movs	r3, #10
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	2301      	movs	r3, #1
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	f107 030f 	add.w	r3, r7, #15
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	21d0      	movs	r1, #208	; 0xd0
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <ds3231_Write+0x40>)
 80006a8:	f004 f986 	bl	80049b8 <HAL_I2C_Mem_Write>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200001f4 	.word	0x200001f4

080006b8 <ds3231_ReadTime>:

void ds3231_ReadTime()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80006be:	230a      	movs	r3, #10
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2307      	movs	r3, #7
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <ds3231_ReadTime+0xa4>)
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	2200      	movs	r2, #0
 80006ce:	21d0      	movs	r1, #208	; 0xd0
 80006d0:	4823      	ldr	r0, [pc, #140]	; (8000760 <ds3231_ReadTime+0xa8>)
 80006d2:	f004 fa6b 	bl	8004bac <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <ds3231_ReadTime+0xa4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fbb6 	bl	8003e4c <BCD2DEC>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <ds3231_ReadTime+0xac>)
 80006e6:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <ds3231_ReadTime+0xa4>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fbad 	bl	8003e4c <BCD2DEC>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <ds3231_ReadTime+0xb0>)
 80006f8:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <ds3231_ReadTime+0xa4>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fba4 	bl	8003e4c <BCD2DEC>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <ds3231_ReadTime+0xb4>)
 800070a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <ds3231_ReadTime+0xa4>)
 800070e:	78db      	ldrb	r3, [r3, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fb9b 	bl	8003e4c <BCD2DEC>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <ds3231_ReadTime+0xb8>)
 800071c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <ds3231_ReadTime+0xa4>)
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fb92 	bl	8003e4c <BCD2DEC>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <ds3231_ReadTime+0xbc>)
 800072e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <ds3231_ReadTime+0xa4>)
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	4618      	mov	r0, r3
 8000736:	f003 fb89 	bl	8003e4c <BCD2DEC>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <ds3231_ReadTime+0xc0>)
 8000740:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <ds3231_ReadTime+0xa4>)
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fb80 	bl	8003e4c <BCD2DEC>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <ds3231_ReadTime+0xc4>)
 8000752:	701a      	strb	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000bc 	.word	0x200000bc
 8000760:	200001f4 	.word	0x200001f4
 8000764:	200000c8 	.word	0x200000c8
 8000768:	200000c7 	.word	0x200000c7
 800076c:	200000c6 	.word	0x200000c6
 8000770:	200000ca 	.word	0x200000ca
 8000774:	200000c9 	.word	0x200000c9
 8000778:	200000cb 	.word	0x200000cb
 800077c:	200000cc 	.word	0x200000cc

08000780 <ds3231_ReadAlarm>:

void ds3231_ReadAlarm(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x08, I2C_MEMADD_SIZE_8BIT, ds3231_alarm_buf, 2, 10);
 8000786:	230a      	movs	r3, #10
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	2302      	movs	r3, #2
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2208      	movs	r2, #8
 8000796:	21d0      	movs	r1, #208	; 0xd0
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <ds3231_ReadAlarm+0x4c>)
 800079a:	f004 fa07 	bl	8004bac <HAL_I2C_Mem_Read>
	// ds3231_alarm_sec = BCD2DEC(ds3231_alarm_buf[0]);
	ds3231_alarm_min = BCD2DEC(ds3231_alarm_buf[0]);
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fb52 	bl	8003e4c <BCD2DEC>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <ds3231_ReadAlarm+0x50>)
 80007ae:	701a      	strb	r2, [r3, #0]
	ds3231_alarm_hour = BCD2DEC(ds3231_alarm_buf[1]);
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fb49 	bl	8003e4c <BCD2DEC>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <ds3231_ReadAlarm+0x54>)
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000c4 	.word	0x200000c4
 80007cc:	200001f4 	.word	0x200001f4
 80007d0:	200000ce 	.word	0x200000ce
 80007d4:	200000cd 	.word	0x200000cd

080007d8 <fsm_alarm>:
 *      Author: quoct
 */
#include "fsm_alarm.h"

void fsm_alarm(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af04      	add	r7, sp, #16
    if (mode_alarm == ALARM_MODE1)
 80007de:	4b88      	ldr	r3, [pc, #544]	; (8000a00 <fsm_alarm+0x228>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b0a      	cmp	r3, #10
 80007e4:	d12a      	bne.n	800083c <fsm_alarm+0x64>
    {
        switch (statusNORMAL_ALARM)
 80007e6:	4b87      	ldr	r3, [pc, #540]	; (8000a04 <fsm_alarm+0x22c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <fsm_alarm+0x1c>
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d004      	beq.n	80007fc <fsm_alarm+0x24>
            displayAlarm();
            if (ds3231_alarm_hour == ds3231_hours && ds3231_alarm_min == ds3231_min)
                alert();
            break;
        default:
            break;
 80007f2:	e026      	b.n	8000842 <fsm_alarm+0x6a>
            statusNORMAL_ALARM = NORMAL;
 80007f4:	4b83      	ldr	r3, [pc, #524]	; (8000a04 <fsm_alarm+0x22c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
            break;
 80007fa:	e022      	b.n	8000842 <fsm_alarm+0x6a>
            lcd_StrCenter(0, 180, "ALARM(HH:MM)", BLUE, WHITE, 16, 1);
 80007fc:	2301      	movs	r3, #1
 80007fe:	9302      	str	r3, [sp, #8]
 8000800:	2310      	movs	r3, #16
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	231f      	movs	r3, #31
 800080c:	4a7e      	ldr	r2, [pc, #504]	; (8000a08 <fsm_alarm+0x230>)
 800080e:	21b4      	movs	r1, #180	; 0xb4
 8000810:	2000      	movs	r0, #0
 8000812:	f002 fd39 	bl	8003288 <lcd_StrCenter>
            ds3231_ReadAlarm();
 8000816:	f7ff ffb3 	bl	8000780 <ds3231_ReadAlarm>
            displayAlarm();
 800081a:	f001 fe1d 	bl	8002458 <displayAlarm>
            if (ds3231_alarm_hour == ds3231_hours && ds3231_alarm_min == ds3231_min)
 800081e:	4b7b      	ldr	r3, [pc, #492]	; (8000a0c <fsm_alarm+0x234>)
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b7b      	ldr	r3, [pc, #492]	; (8000a10 <fsm_alarm+0x238>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	429a      	cmp	r2, r3
 8000828:	d10a      	bne.n	8000840 <fsm_alarm+0x68>
 800082a:	4b7a      	ldr	r3, [pc, #488]	; (8000a14 <fsm_alarm+0x23c>)
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4b7a      	ldr	r3, [pc, #488]	; (8000a18 <fsm_alarm+0x240>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d104      	bne.n	8000840 <fsm_alarm+0x68>
                alert();
 8000836:	f001 fe41 	bl	80024bc <alert>
            break;
 800083a:	e001      	b.n	8000840 <fsm_alarm+0x68>
        }
    }
 800083c:	bf00      	nop
 800083e:	e000      	b.n	8000842 <fsm_alarm+0x6a>
            break;
 8000840:	bf00      	nop
    if (mode_alarm == ALARM_MODE2)
 8000842:	4b6f      	ldr	r3, [pc, #444]	; (8000a00 <fsm_alarm+0x228>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b0b      	cmp	r3, #11
 8000848:	f040 809e 	bne.w	8000988 <fsm_alarm+0x1b0>
    {
        switch (statusHOUR_ALARM_1)
 800084c:	4b73      	ldr	r3, [pc, #460]	; (8000a1c <fsm_alarm+0x244>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <fsm_alarm+0x82>
 8000854:	2b01      	cmp	r3, #1
 8000856:	d004      	beq.n	8000862 <fsm_alarm+0x8a>
            }
            uart_Flag("Request hours of alarm: ");
            blinkyAlarm(HOUR_A);
            break;
        default:
            break;
 8000858:	e02e      	b.n	80008b8 <fsm_alarm+0xe0>
            statusHOUR_ALARM_1 = NORMAL;
 800085a:	4b70      	ldr	r3, [pc, #448]	; (8000a1c <fsm_alarm+0x244>)
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
            break;
 8000860:	e02a      	b.n	80008b8 <fsm_alarm+0xe0>
            lcd_StrCenter(0, 2, "UPDATING HOUR ALARM...", GREEN, BLACK, 16, 1);
 8000862:	2301      	movs	r3, #1
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2310      	movs	r3, #16
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000872:	4a6b      	ldr	r2, [pc, #428]	; (8000a20 <fsm_alarm+0x248>)
 8000874:	2102      	movs	r1, #2
 8000876:	2000      	movs	r0, #0
 8000878:	f002 fd06 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE ALARM", YELLOW, BLACK, 16, 1);
 800087c:	2301      	movs	r3, #1
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	2310      	movs	r3, #16
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	2300      	movs	r3, #0
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800088c:	4a65      	ldr	r2, [pc, #404]	; (8000a24 <fsm_alarm+0x24c>)
 800088e:	2114      	movs	r1, #20
 8000890:	2000      	movs	r0, #0
 8000892:	f002 fcf9 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 8000896:	4b64      	ldr	r3, [pc, #400]	; (8000a28 <fsm_alarm+0x250>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d105      	bne.n	80008aa <fsm_alarm+0xd2>
                uart_Rs232SendString("Request hours of alarm: ");
 800089e:	4863      	ldr	r0, [pc, #396]	; (8000a2c <fsm_alarm+0x254>)
 80008a0:	f003 f8ac 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 80008a4:	4b60      	ldr	r3, [pc, #384]	; (8000a28 <fsm_alarm+0x250>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
            uart_Flag("Request hours of alarm: ");
 80008aa:	4860      	ldr	r0, [pc, #384]	; (8000a2c <fsm_alarm+0x254>)
 80008ac:	f001 fe90 	bl	80025d0 <uart_Flag>
            blinkyAlarm(HOUR_A);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f001 fcb5 	bl	8002220 <blinkyAlarm>
            break;
 80008b6:	bf00      	nop
        }
        switch (statusHOUR_ALARM_2)
 80008b8:	4b5d      	ldr	r3, [pc, #372]	; (8000a30 <fsm_alarm+0x258>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <fsm_alarm+0xee>
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d004      	beq.n	80008ce <fsm_alarm+0xf6>
                flag_TimeOut = 0;
                flag_Error_TimeOut = 0;
            }
            break;
        default:
            break;
 80008c4:	e04a      	b.n	800095c <fsm_alarm+0x184>
            statusHOUR_ALARM_2 = NORMAL;
 80008c6:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <fsm_alarm+0x258>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
            break;
 80008cc:	e046      	b.n	800095c <fsm_alarm+0x184>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80008ce:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <fsm_alarm+0x25c>)
 80008d0:	88db      	ldrh	r3, [r3, #6]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00a      	beq.n	80008ec <fsm_alarm+0x114>
 80008d6:	4b57      	ldr	r3, [pc, #348]	; (8000a34 <fsm_alarm+0x25c>)
 80008d8:	88db      	ldrh	r3, [r3, #6]
 80008da:	2b28      	cmp	r3, #40	; 0x28
 80008dc:	d913      	bls.n	8000906 <fsm_alarm+0x12e>
 80008de:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <fsm_alarm+0x25c>)
 80008e0:	88db      	ldrh	r3, [r3, #6]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10c      	bne.n	8000906 <fsm_alarm+0x12e>
                counterHour_Alarm++;
 80008ec:	4b52      	ldr	r3, [pc, #328]	; (8000a38 <fsm_alarm+0x260>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <fsm_alarm+0x260>)
 80008f6:	701a      	strb	r2, [r3, #0]
                if (counterHour_Alarm >= 24)
 80008f8:	4b4f      	ldr	r3, [pc, #316]	; (8000a38 <fsm_alarm+0x260>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b17      	cmp	r3, #23
 80008fe:	d902      	bls.n	8000906 <fsm_alarm+0x12e>
                    counterHour_Alarm = 0;
 8000900:	4b4d      	ldr	r3, [pc, #308]	; (8000a38 <fsm_alarm+0x260>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <fsm_alarm+0x264>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d125      	bne.n	800095a <fsm_alarm+0x182>
                counterHour_Alarm = number;
 800090e:	4b4c      	ldr	r3, [pc, #304]	; (8000a40 <fsm_alarm+0x268>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <fsm_alarm+0x260>)
 8000916:	701a      	strb	r2, [r3, #0]
                if (counterHour_Alarm >= 24)
 8000918:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <fsm_alarm+0x260>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b17      	cmp	r3, #23
 800091e:	d90d      	bls.n	800093c <fsm_alarm+0x164>
                    counterHour_Alarm = counterHour_Alarm % 24;
 8000920:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <fsm_alarm+0x260>)
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <fsm_alarm+0x26c>)
 8000926:	fba3 1302 	umull	r1, r3, r3, r2
 800092a:	0919      	lsrs	r1, r3, #4
 800092c:	460b      	mov	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <fsm_alarm+0x260>)
 800093a:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 800093c:	4b3f      	ldr	r3, [pc, #252]	; (8000a3c <fsm_alarm+0x264>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000942:	4b41      	ldr	r3, [pc, #260]	; (8000a48 <fsm_alarm+0x270>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <fsm_alarm+0x274>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
                flag_TimeOut = 0;
 800094e:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <fsm_alarm+0x278>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 8000954:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <fsm_alarm+0x27c>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
            break;
 800095a:	bf00      	nop
        }
        switch (statusHOUR_ALARM_3)
 800095c:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <fsm_alarm+0x280>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <fsm_alarm+0x192>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d004      	beq.n	8000972 <fsm_alarm+0x19a>
            {
                ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
            }
            break;
        default:
            break;
 8000968:	e011      	b.n	800098e <fsm_alarm+0x1b6>
            statusHOUR_ALARM_3 = NORMAL;
 800096a:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <fsm_alarm+0x280>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
            break;
 8000970:	e00d      	b.n	800098e <fsm_alarm+0x1b6>
            if (button_count[12] == 1)
 8000972:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <fsm_alarm+0x25c>)
 8000974:	8b1b      	ldrh	r3, [r3, #24]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d108      	bne.n	800098c <fsm_alarm+0x1b4>
                ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <fsm_alarm+0x260>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	2009      	movs	r0, #9
 8000982:	f7ff fe77 	bl	8000674 <ds3231_Write>
            break;
 8000986:	e001      	b.n	800098c <fsm_alarm+0x1b4>
        }
    }
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <fsm_alarm+0x1b6>
            break;
 800098c:	bf00      	nop
    if (mode_alarm == ALARM_MODE3)
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <fsm_alarm+0x228>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b0c      	cmp	r3, #12
 8000994:	f040 80c7 	bne.w	8000b26 <fsm_alarm+0x34e>
    {
        switch (statusMIN_ALARM_1)
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <fsm_alarm+0x284>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <fsm_alarm+0x1ce>
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d004      	beq.n	80009ae <fsm_alarm+0x1d6>
            }
            uart_Flag("Request hours of alarm: ");
            blinkyAlarm(MIN_A);
            break;
        default:
            break;
 80009a4:	e021      	b.n	80009ea <fsm_alarm+0x212>
            statusMIN_ALARM_1 = NORMAL;
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <fsm_alarm+0x284>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
            break;
 80009ac:	e01d      	b.n	80009ea <fsm_alarm+0x212>
            lcd_StrCenter(0, 2, "UPDATING MINS ALARM...", GREEN, BLACK, 16, 1);
 80009ae:	2301      	movs	r3, #1
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	2310      	movs	r3, #16
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	2300      	movs	r3, #0
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009be:	4a28      	ldr	r2, [pc, #160]	; (8000a60 <fsm_alarm+0x288>)
 80009c0:	2102      	movs	r1, #2
 80009c2:	2000      	movs	r0, #0
 80009c4:	f002 fc60 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <fsm_alarm+0x250>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d105      	bne.n	80009dc <fsm_alarm+0x204>
                uart_Rs232SendString("Request mins of alarm: ");
 80009d0:	4824      	ldr	r0, [pc, #144]	; (8000a64 <fsm_alarm+0x28c>)
 80009d2:	f003 f813 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <fsm_alarm+0x250>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
            uart_Flag("Request hours of alarm: ");
 80009dc:	4813      	ldr	r0, [pc, #76]	; (8000a2c <fsm_alarm+0x254>)
 80009de:	f001 fdf7 	bl	80025d0 <uart_Flag>
            blinkyAlarm(MIN_A);
 80009e2:	200b      	movs	r0, #11
 80009e4:	f001 fc1c 	bl	8002220 <blinkyAlarm>
            break;
 80009e8:	bf00      	nop
        }
        switch (statusMIN_ALARM_2)
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <fsm_alarm+0x290>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <fsm_alarm+0x220>
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d03a      	beq.n	8000a6c <fsm_alarm+0x294>
                flag_TimeOut = 0;
                flag_Error_TimeOut = 0;
            }
            break;
        default:
            break;
 80009f6:	e080      	b.n	8000afa <fsm_alarm+0x322>
            statusMIN_ALARM_2 = NORMAL;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <fsm_alarm+0x290>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]
            break;
 80009fe:	e07c      	b.n	8000afa <fsm_alarm+0x322>
 8000a00:	200001a0 	.word	0x200001a0
 8000a04:	20000180 	.word	0x20000180
 8000a08:	080091bc 	.word	0x080091bc
 8000a0c:	200000cd 	.word	0x200000cd
 8000a10:	200000c6 	.word	0x200000c6
 8000a14:	200000ce 	.word	0x200000ce
 8000a18:	200000c7 	.word	0x200000c7
 8000a1c:	20000184 	.word	0x20000184
 8000a20:	080091cc 	.word	0x080091cc
 8000a24:	080091e4 	.word	0x080091e4
 8000a28:	200001b4 	.word	0x200001b4
 8000a2c:	080091f0 	.word	0x080091f0
 8000a30:	20000188 	.word	0x20000188
 8000a34:	20000098 	.word	0x20000098
 8000a38:	200001ab 	.word	0x200001ab
 8000a3c:	200001b8 	.word	0x200001b8
 8000a40:	200001d0 	.word	0x200001d0
 8000a44:	aaaaaaab 	.word	0xaaaaaaab
 8000a48:	200001bc 	.word	0x200001bc
 8000a4c:	200001c0 	.word	0x200001c0
 8000a50:	200001c8 	.word	0x200001c8
 8000a54:	200001cc 	.word	0x200001cc
 8000a58:	2000018c 	.word	0x2000018c
 8000a5c:	20000190 	.word	0x20000190
 8000a60:	0800920c 	.word	0x0800920c
 8000a64:	08009224 	.word	0x08009224
 8000a68:	20000194 	.word	0x20000194
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000a6c:	4b74      	ldr	r3, [pc, #464]	; (8000c40 <fsm_alarm+0x468>)
 8000a6e:	88db      	ldrh	r3, [r3, #6]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d00a      	beq.n	8000a8a <fsm_alarm+0x2b2>
 8000a74:	4b72      	ldr	r3, [pc, #456]	; (8000c40 <fsm_alarm+0x468>)
 8000a76:	88db      	ldrh	r3, [r3, #6]
 8000a78:	2b28      	cmp	r3, #40	; 0x28
 8000a7a:	d913      	bls.n	8000aa4 <fsm_alarm+0x2cc>
 8000a7c:	4b70      	ldr	r3, [pc, #448]	; (8000c40 <fsm_alarm+0x468>)
 8000a7e:	88db      	ldrh	r3, [r3, #6]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10c      	bne.n	8000aa4 <fsm_alarm+0x2cc>
                counterMin_Alarm++;
 8000a8a:	4b6e      	ldr	r3, [pc, #440]	; (8000c44 <fsm_alarm+0x46c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b6c      	ldr	r3, [pc, #432]	; (8000c44 <fsm_alarm+0x46c>)
 8000a94:	701a      	strb	r2, [r3, #0]
                if (counterMin_Alarm >= 60)
 8000a96:	4b6b      	ldr	r3, [pc, #428]	; (8000c44 <fsm_alarm+0x46c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b3b      	cmp	r3, #59	; 0x3b
 8000a9c:	d902      	bls.n	8000aa4 <fsm_alarm+0x2cc>
                    counterMin_Alarm = 0;
 8000a9e:	4b69      	ldr	r3, [pc, #420]	; (8000c44 <fsm_alarm+0x46c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 8000aa4:	4b68      	ldr	r3, [pc, #416]	; (8000c48 <fsm_alarm+0x470>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d125      	bne.n	8000af8 <fsm_alarm+0x320>
                counterMin_Alarm = number;
 8000aac:	4b67      	ldr	r3, [pc, #412]	; (8000c4c <fsm_alarm+0x474>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <fsm_alarm+0x46c>)
 8000ab4:	701a      	strb	r2, [r3, #0]
                if (counterMin_Alarm >= 60)
 8000ab6:	4b63      	ldr	r3, [pc, #396]	; (8000c44 <fsm_alarm+0x46c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b3b      	cmp	r3, #59	; 0x3b
 8000abc:	d90d      	bls.n	8000ada <fsm_alarm+0x302>
                    counterMin_Alarm = counterMin_Alarm % 60;
 8000abe:	4b61      	ldr	r3, [pc, #388]	; (8000c44 <fsm_alarm+0x46c>)
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b63      	ldr	r3, [pc, #396]	; (8000c50 <fsm_alarm+0x478>)
 8000ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac8:	0959      	lsrs	r1, r3, #5
 8000aca:	460b      	mov	r3, r1
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	1a5b      	subs	r3, r3, r1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b5b      	ldr	r3, [pc, #364]	; (8000c44 <fsm_alarm+0x46c>)
 8000ad8:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 8000ada:	4b5b      	ldr	r3, [pc, #364]	; (8000c48 <fsm_alarm+0x470>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000ae0:	4b5c      	ldr	r3, [pc, #368]	; (8000c54 <fsm_alarm+0x47c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 8000ae6:	4b5c      	ldr	r3, [pc, #368]	; (8000c58 <fsm_alarm+0x480>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
                flag_TimeOut = 0;
 8000aec:	4b5b      	ldr	r3, [pc, #364]	; (8000c5c <fsm_alarm+0x484>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 8000af2:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <fsm_alarm+0x488>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
            break;
 8000af8:	bf00      	nop
        }
        switch (statusMIN_ALARM_3)
 8000afa:	4b5a      	ldr	r3, [pc, #360]	; (8000c64 <fsm_alarm+0x48c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <fsm_alarm+0x330>
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d004      	beq.n	8000b10 <fsm_alarm+0x338>
            {
                ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
            }
            break;
        default:
            break;
 8000b06:	e011      	b.n	8000b2c <fsm_alarm+0x354>
            statusMIN_ALARM_3 = NORMAL;
 8000b08:	4b56      	ldr	r3, [pc, #344]	; (8000c64 <fsm_alarm+0x48c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
            break;
 8000b0e:	e00d      	b.n	8000b2c <fsm_alarm+0x354>
            if (button_count[12] == 1)
 8000b10:	4b4b      	ldr	r3, [pc, #300]	; (8000c40 <fsm_alarm+0x468>)
 8000b12:	8b1b      	ldrh	r3, [r3, #24]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d108      	bne.n	8000b2a <fsm_alarm+0x352>
                ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
 8000b18:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <fsm_alarm+0x46c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2008      	movs	r0, #8
 8000b20:	f7ff fda8 	bl	8000674 <ds3231_Write>
            break;
 8000b24:	e001      	b.n	8000b2a <fsm_alarm+0x352>
        }
    }
 8000b26:	bf00      	nop
 8000b28:	e000      	b.n	8000b2c <fsm_alarm+0x354>
            break;
 8000b2a:	bf00      	nop

    switch (mode_alarm)
 8000b2c:	4b4e      	ldr	r3, [pc, #312]	; (8000c68 <fsm_alarm+0x490>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b0c      	cmp	r3, #12
 8000b32:	d046      	beq.n	8000bc2 <fsm_alarm+0x3ea>
 8000b34:	2b0c      	cmp	r3, #12
 8000b36:	dc79      	bgt.n	8000c2c <fsm_alarm+0x454>
 8000b38:	2b0a      	cmp	r3, #10
 8000b3a:	d002      	beq.n	8000b42 <fsm_alarm+0x36a>
 8000b3c:	2b0b      	cmp	r3, #11
 8000b3e:	d015      	beq.n	8000b6c <fsm_alarm+0x394>
            uart_Rs232SendString("\n");
            save_AlarmSettings();
        }
        break;
    default:
        break;
 8000b40:	e074      	b.n	8000c2c <fsm_alarm+0x454>
        if (button_count[4] == 1)
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <fsm_alarm+0x468>)
 8000b44:	891b      	ldrh	r3, [r3, #8]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d172      	bne.n	8000c30 <fsm_alarm+0x458>
            mode_alarm = ALARM_MODE2;
 8000b4a:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <fsm_alarm+0x490>)
 8000b4c:	220b      	movs	r2, #11
 8000b4e:	601a      	str	r2, [r3, #0]
            init_counter_alarm();
 8000b50:	f001 fa06 	bl	8001f60 <init_counter_alarm>
            isSendStr = 0;
 8000b54:	4b45      	ldr	r3, [pc, #276]	; (8000c6c <fsm_alarm+0x494>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
            lcd_Fill(0, 20, 240, 40, BLACK);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2328      	movs	r3, #40	; 0x28
 8000b60:	22f0      	movs	r2, #240	; 0xf0
 8000b62:	2114      	movs	r1, #20
 8000b64:	2000      	movs	r0, #0
 8000b66:	f001 ffef 	bl	8002b48 <lcd_Fill>
        break;
 8000b6a:	e061      	b.n	8000c30 <fsm_alarm+0x458>
        if (button_count[4] == 1 || auto_change_mode == 1)
 8000b6c:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <fsm_alarm+0x468>)
 8000b6e:	891b      	ldrh	r3, [r3, #8]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d003      	beq.n	8000b7c <fsm_alarm+0x3a4>
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <fsm_alarm+0x47c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d15b      	bne.n	8000c34 <fsm_alarm+0x45c>
            mode_alarm = ALARM_MODE3;
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <fsm_alarm+0x490>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <fsm_alarm+0x494>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <fsm_alarm+0x47c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 200, counterHour_Alarm, 2, BLUE, BLACK, 24);
 8000b8e:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <fsm_alarm+0x498>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	2318      	movs	r3, #24
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	231f      	movs	r3, #31
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	21c8      	movs	r1, #200	; 0xc8
 8000ba4:	2046      	movs	r0, #70	; 0x46
 8000ba6:	f002 f909 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8000baa:	2300      	movs	r3, #0
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2314      	movs	r3, #20
 8000bb0:	22f0      	movs	r2, #240	; 0xf0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f001 ffc7 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 8000bba:	482e      	ldr	r0, [pc, #184]	; (8000c74 <fsm_alarm+0x49c>)
 8000bbc:	f002 ff1e 	bl	80039fc <uart_Rs232SendString>
        break;
 8000bc0:	e038      	b.n	8000c34 <fsm_alarm+0x45c>
        if (button_count[4] == 1 || auto_change_mode == 1)
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <fsm_alarm+0x468>)
 8000bc4:	891b      	ldrh	r3, [r3, #8]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d003      	beq.n	8000bd2 <fsm_alarm+0x3fa>
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <fsm_alarm+0x47c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d132      	bne.n	8000c38 <fsm_alarm+0x460>
            mode_alarm = ALARM_MODE1;
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <fsm_alarm+0x490>)
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <fsm_alarm+0x494>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <fsm_alarm+0x47c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 200, counterMin_Alarm, 2, BLUE, BLACK, 24);
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <fsm_alarm+0x46c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	2318      	movs	r3, #24
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	21c8      	movs	r1, #200	; 0xc8
 8000bfa:	206e      	movs	r0, #110	; 0x6e
 8000bfc:	f002 f8de 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2314      	movs	r3, #20
 8000c06:	22f0      	movs	r2, #240	; 0xf0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f001 ff9c 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8000c10:	2300      	movs	r3, #0
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2328      	movs	r3, #40	; 0x28
 8000c16:	22f0      	movs	r2, #240	; 0xf0
 8000c18:	2114      	movs	r1, #20
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f001 ff94 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <fsm_alarm+0x49c>)
 8000c22:	f002 feeb 	bl	80039fc <uart_Rs232SendString>
            save_AlarmSettings();
 8000c26:	f001 fcbf 	bl	80025a8 <save_AlarmSettings>
        break;
 8000c2a:	e005      	b.n	8000c38 <fsm_alarm+0x460>
        break;
 8000c2c:	bf00      	nop
 8000c2e:	e004      	b.n	8000c3a <fsm_alarm+0x462>
        break;
 8000c30:	bf00      	nop
 8000c32:	e002      	b.n	8000c3a <fsm_alarm+0x462>
        break;
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <fsm_alarm+0x462>
        break;
 8000c38:	bf00      	nop
    }
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000098 	.word	0x20000098
 8000c44:	200001ac 	.word	0x200001ac
 8000c48:	200001b8 	.word	0x200001b8
 8000c4c:	200001d0 	.word	0x200001d0
 8000c50:	88888889 	.word	0x88888889
 8000c54:	200001bc 	.word	0x200001bc
 8000c58:	200001c0 	.word	0x200001c0
 8000c5c:	200001c8 	.word	0x200001c8
 8000c60:	200001cc 	.word	0x200001cc
 8000c64:	20000198 	.word	0x20000198
 8000c68:	200001a0 	.word	0x200001a0
 8000c6c:	200001b4 	.word	0x200001b4
 8000c70:	200001ab 	.word	0x200001ab
 8000c74:	0800923c 	.word	0x0800923c

08000c78 <fsm_clock>:
 */

#include "fsm_clock.h"

void fsm_clock()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af04      	add	r7, sp, #16
    if (mode == MODE1)
 8000c7e:	4b8a      	ldr	r3, [pc, #552]	; (8000ea8 <fsm_clock+0x230>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d120      	bne.n	8000cc8 <fsm_clock+0x50>
    {
        switch (statusNORMAL_1)
 8000c86:	4b89      	ldr	r3, [pc, #548]	; (8000eac <fsm_clock+0x234>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <fsm_clock+0x1c>
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d004      	beq.n	8000c9c <fsm_clock+0x24>
            displayTime();
            if (mode_alarm == ALARM_MODE1)
                lcd_StrCenter(0, 20, "MODE NORMAL", YELLOW, BLACK, 16, 1);
            break;
        default:
            break;
 8000c92:	e01c      	b.n	8000cce <fsm_clock+0x56>
            statusNORMAL_1 = NORMAL;
 8000c94:	4b85      	ldr	r3, [pc, #532]	; (8000eac <fsm_clock+0x234>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
            break;
 8000c9a:	e018      	b.n	8000cce <fsm_clock+0x56>
            ds3231_ReadTime();
 8000c9c:	f7ff fd0c 	bl	80006b8 <ds3231_ReadTime>
            displayTime();
 8000ca0:	f001 fb3c 	bl	800231c <displayTime>
            if (mode_alarm == ALARM_MODE1)
 8000ca4:	4b82      	ldr	r3, [pc, #520]	; (8000eb0 <fsm_clock+0x238>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b0a      	cmp	r3, #10
 8000caa:	d10f      	bne.n	8000ccc <fsm_clock+0x54>
                lcd_StrCenter(0, 20, "MODE NORMAL", YELLOW, BLACK, 16, 1);
 8000cac:	2301      	movs	r3, #1
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000cbc:	4a7d      	ldr	r2, [pc, #500]	; (8000eb4 <fsm_clock+0x23c>)
 8000cbe:	2114      	movs	r1, #20
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f002 fae1 	bl	8003288 <lcd_StrCenter>
            break;
 8000cc6:	e001      	b.n	8000ccc <fsm_clock+0x54>
        }
    }
 8000cc8:	bf00      	nop
 8000cca:	e000      	b.n	8000cce <fsm_clock+0x56>
            break;
 8000ccc:	bf00      	nop
    if (mode == MODE2)
 8000cce:	4b76      	ldr	r3, [pc, #472]	; (8000ea8 <fsm_clock+0x230>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	f040 809e 	bne.w	8000e14 <fsm_clock+0x19c>
    {
        switch (statusHOUR_1) // Status blink digit and request uart input
 8000cd8:	4b77      	ldr	r3, [pc, #476]	; (8000eb8 <fsm_clock+0x240>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <fsm_clock+0x6e>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d004      	beq.n	8000cee <fsm_clock+0x76>
            }
            uart_Flag("Request hours: ");
            blinky(HOUR);
            break;
        default:
            break;
 8000ce4:	e02e      	b.n	8000d44 <fsm_clock+0xcc>
            statusHOUR_1 = NORMAL;
 8000ce6:	4b74      	ldr	r3, [pc, #464]	; (8000eb8 <fsm_clock+0x240>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
            break;
 8000cec:	e02a      	b.n	8000d44 <fsm_clock+0xcc>
            lcd_StrCenter(0, 2, "UPDATING HOURS...", GREEN, BLACK, 16, 1);
 8000cee:	2301      	movs	r3, #1
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cfe:	4a6f      	ldr	r2, [pc, #444]	; (8000ebc <fsm_clock+0x244>)
 8000d00:	2102      	movs	r1, #2
 8000d02:	2000      	movs	r0, #0
 8000d04:	f002 fac0 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8000d08:	2301      	movs	r3, #1
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	2300      	movs	r3, #0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d18:	4a69      	ldr	r2, [pc, #420]	; (8000ec0 <fsm_clock+0x248>)
 8000d1a:	2114      	movs	r1, #20
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f002 fab3 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 8000d22:	4b68      	ldr	r3, [pc, #416]	; (8000ec4 <fsm_clock+0x24c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d105      	bne.n	8000d36 <fsm_clock+0xbe>
                uart_Rs232SendString("Request hours: ");
 8000d2a:	4867      	ldr	r0, [pc, #412]	; (8000ec8 <fsm_clock+0x250>)
 8000d2c:	f002 fe66 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 8000d30:	4b64      	ldr	r3, [pc, #400]	; (8000ec4 <fsm_clock+0x24c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
            uart_Flag("Request hours: ");
 8000d36:	4864      	ldr	r0, [pc, #400]	; (8000ec8 <fsm_clock+0x250>)
 8000d38:	f001 fc4a 	bl	80025d0 <uart_Flag>
            blinky(HOUR);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f001 f927 	bl	8001f90 <blinky>
            break;
 8000d42:	bf00      	nop
        }
        switch (statusHOUR_2) // Status to control the input digit from both the MCU and the uart
 8000d44:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <fsm_clock+0x254>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <fsm_clock+0xda>
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d004      	beq.n	8000d5a <fsm_clock+0xe2>
                flag_TimeOut = 0;
                flag_Error_TimeOut = 0;
            }
            break;
        default:
            break;
 8000d50:	e04a      	b.n	8000de8 <fsm_clock+0x170>
            statusHOUR_2 = NORMAL;
 8000d52:	4b5e      	ldr	r3, [pc, #376]	; (8000ecc <fsm_clock+0x254>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
            break;
 8000d58:	e046      	b.n	8000de8 <fsm_clock+0x170>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	; (8000ed0 <fsm_clock+0x258>)
 8000d5c:	88db      	ldrh	r3, [r3, #6]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d00a      	beq.n	8000d78 <fsm_clock+0x100>
 8000d62:	4b5b      	ldr	r3, [pc, #364]	; (8000ed0 <fsm_clock+0x258>)
 8000d64:	88db      	ldrh	r3, [r3, #6]
 8000d66:	2b28      	cmp	r3, #40	; 0x28
 8000d68:	d913      	bls.n	8000d92 <fsm_clock+0x11a>
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <fsm_clock+0x258>)
 8000d6c:	88db      	ldrh	r3, [r3, #6]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10c      	bne.n	8000d92 <fsm_clock+0x11a>
                counterHour++;
 8000d78:	4b56      	ldr	r3, [pc, #344]	; (8000ed4 <fsm_clock+0x25c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <fsm_clock+0x25c>)
 8000d82:	701a      	strb	r2, [r3, #0]
                if (counterHour >= 24)
 8000d84:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <fsm_clock+0x25c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b17      	cmp	r3, #23
 8000d8a:	d902      	bls.n	8000d92 <fsm_clock+0x11a>
                    counterHour = 0;
 8000d8c:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <fsm_clock+0x25c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 8000d92:	4b51      	ldr	r3, [pc, #324]	; (8000ed8 <fsm_clock+0x260>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d125      	bne.n	8000de6 <fsm_clock+0x16e>
                counterHour = number;
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <fsm_clock+0x264>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <fsm_clock+0x25c>)
 8000da2:	701a      	strb	r2, [r3, #0]
                if (counterHour >= 24)
 8000da4:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <fsm_clock+0x25c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b17      	cmp	r3, #23
 8000daa:	d90d      	bls.n	8000dc8 <fsm_clock+0x150>
                    counterHour = counterHour % 24;
 8000dac:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <fsm_clock+0x25c>)
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <fsm_clock+0x268>)
 8000db2:	fba3 1302 	umull	r1, r3, r3, r2
 8000db6:	0919      	lsrs	r1, r3, #4
 8000db8:	460b      	mov	r3, r1
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	440b      	add	r3, r1
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <fsm_clock+0x25c>)
 8000dc6:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <fsm_clock+0x260>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000dce:	4b45      	ldr	r3, [pc, #276]	; (8000ee4 <fsm_clock+0x26c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <fsm_clock+0x270>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
                flag_TimeOut = 0;
 8000dda:	4b44      	ldr	r3, [pc, #272]	; (8000eec <fsm_clock+0x274>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 8000de0:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <fsm_clock+0x278>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
            break;
 8000de6:	bf00      	nop
        }
        switch (statusHOUR_3) // Status to save the settings, only applicable for lab 4. For lab 5, it is not necessary
 8000de8:	4b42      	ldr	r3, [pc, #264]	; (8000ef4 <fsm_clock+0x27c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <fsm_clock+0x17e>
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d004      	beq.n	8000dfe <fsm_clock+0x186>
            {
                ds3231_Write(ADDRESS_HOUR, counterHour);
            }
            break;
        default:
            break;
 8000df4:	e011      	b.n	8000e1a <fsm_clock+0x1a2>
            statusHOUR_3 = NORMAL;
 8000df6:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <fsm_clock+0x27c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
            break;
 8000dfc:	e00d      	b.n	8000e1a <fsm_clock+0x1a2>
            if (button_count[12] == 1)
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <fsm_clock+0x258>)
 8000e00:	8b1b      	ldrh	r3, [r3, #24]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d108      	bne.n	8000e18 <fsm_clock+0x1a0>
                ds3231_Write(ADDRESS_HOUR, counterHour);
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <fsm_clock+0x25c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fc31 	bl	8000674 <ds3231_Write>
            break;
 8000e12:	e001      	b.n	8000e18 <fsm_clock+0x1a0>
        }
    }
 8000e14:	bf00      	nop
 8000e16:	e000      	b.n	8000e1a <fsm_clock+0x1a2>
            break;
 8000e18:	bf00      	nop
    if (mode == MODE3) // MODE MINS
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <fsm_clock+0x230>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	f040 80cf 	bne.w	8000fc2 <fsm_clock+0x34a>
    {
        switch (statusMIN_1)
 8000e24:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <fsm_clock+0x280>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <fsm_clock+0x1ba>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d004      	beq.n	8000e3a <fsm_clock+0x1c2>
            }
            uart_Flag("Request mins: ");
            blinky(MIN);
            break;
        default:
            break;
 8000e30:	e02e      	b.n	8000e90 <fsm_clock+0x218>
            statusMIN_1 = NORMAL;
 8000e32:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <fsm_clock+0x280>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
            break;
 8000e38:	e02a      	b.n	8000e90 <fsm_clock+0x218>
            lcd_StrCenter(0, 2, "UPDATING MINS...", GREEN, BLACK, 16, 1);
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2310      	movs	r3, #16
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	2300      	movs	r3, #0
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e4a:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <fsm_clock+0x284>)
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f002 fa1a 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8000e54:	2301      	movs	r3, #1
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2310      	movs	r3, #16
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e64:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <fsm_clock+0x248>)
 8000e66:	2114      	movs	r1, #20
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f002 fa0d 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <fsm_clock+0x24c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d105      	bne.n	8000e82 <fsm_clock+0x20a>
                uart_Rs232SendString("Request mins: ");
 8000e76:	4822      	ldr	r0, [pc, #136]	; (8000f00 <fsm_clock+0x288>)
 8000e78:	f002 fdc0 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <fsm_clock+0x24c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
            uart_Flag("Request mins: ");
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <fsm_clock+0x288>)
 8000e84:	f001 fba4 	bl	80025d0 <uart_Flag>
            blinky(MIN);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f001 f881 	bl	8001f90 <blinky>
            break;
 8000e8e:	bf00      	nop
        }
        switch (statusMIN_2)
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <fsm_clock+0x28c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <fsm_clock+0x226>
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d035      	beq.n	8000f08 <fsm_clock+0x290>
                flag_Error_TimeOut = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 8000e9c:	e07b      	b.n	8000f96 <fsm_clock+0x31e>
            statusMIN_2 = NORMAL;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <fsm_clock+0x28c>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
            break;
 8000ea4:	e077      	b.n	8000f96 <fsm_clock+0x31e>
 8000ea6:	bf00      	nop
 8000ea8:	2000019c 	.word	0x2000019c
 8000eac:	20000124 	.word	0x20000124
 8000eb0:	200001a0 	.word	0x200001a0
 8000eb4:	08009240 	.word	0x08009240
 8000eb8:	20000144 	.word	0x20000144
 8000ebc:	0800924c 	.word	0x0800924c
 8000ec0:	08009260 	.word	0x08009260
 8000ec4:	200001b4 	.word	0x200001b4
 8000ec8:	0800926c 	.word	0x0800926c
 8000ecc:	20000148 	.word	0x20000148
 8000ed0:	20000098 	.word	0x20000098
 8000ed4:	200001a6 	.word	0x200001a6
 8000ed8:	200001b8 	.word	0x200001b8
 8000edc:	200001d0 	.word	0x200001d0
 8000ee0:	aaaaaaab 	.word	0xaaaaaaab
 8000ee4:	200001bc 	.word	0x200001bc
 8000ee8:	200001c0 	.word	0x200001c0
 8000eec:	200001c8 	.word	0x200001c8
 8000ef0:	200001cc 	.word	0x200001cc
 8000ef4:	2000014c 	.word	0x2000014c
 8000ef8:	20000138 	.word	0x20000138
 8000efc:	0800927c 	.word	0x0800927c
 8000f00:	08009290 	.word	0x08009290
 8000f04:	2000013c 	.word	0x2000013c
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000f08:	4b8a      	ldr	r3, [pc, #552]	; (8001134 <fsm_clock+0x4bc>)
 8000f0a:	88db      	ldrh	r3, [r3, #6]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d00a      	beq.n	8000f26 <fsm_clock+0x2ae>
 8000f10:	4b88      	ldr	r3, [pc, #544]	; (8001134 <fsm_clock+0x4bc>)
 8000f12:	88db      	ldrh	r3, [r3, #6]
 8000f14:	2b28      	cmp	r3, #40	; 0x28
 8000f16:	d913      	bls.n	8000f40 <fsm_clock+0x2c8>
 8000f18:	4b86      	ldr	r3, [pc, #536]	; (8001134 <fsm_clock+0x4bc>)
 8000f1a:	88db      	ldrh	r3, [r3, #6]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10c      	bne.n	8000f40 <fsm_clock+0x2c8>
                counterMin++;
 8000f26:	4b84      	ldr	r3, [pc, #528]	; (8001138 <fsm_clock+0x4c0>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b82      	ldr	r3, [pc, #520]	; (8001138 <fsm_clock+0x4c0>)
 8000f30:	701a      	strb	r2, [r3, #0]
                if (counterMin >= 60)
 8000f32:	4b81      	ldr	r3, [pc, #516]	; (8001138 <fsm_clock+0x4c0>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b3b      	cmp	r3, #59	; 0x3b
 8000f38:	d902      	bls.n	8000f40 <fsm_clock+0x2c8>
                    counterMin = 0;
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	; (8001138 <fsm_clock+0x4c0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 8000f40:	4b7e      	ldr	r3, [pc, #504]	; (800113c <fsm_clock+0x4c4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d125      	bne.n	8000f94 <fsm_clock+0x31c>
                counterMin = number;
 8000f48:	4b7d      	ldr	r3, [pc, #500]	; (8001140 <fsm_clock+0x4c8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b7a      	ldr	r3, [pc, #488]	; (8001138 <fsm_clock+0x4c0>)
 8000f50:	701a      	strb	r2, [r3, #0]
                if (counterMin >= 60)
 8000f52:	4b79      	ldr	r3, [pc, #484]	; (8001138 <fsm_clock+0x4c0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b3b      	cmp	r3, #59	; 0x3b
 8000f58:	d90d      	bls.n	8000f76 <fsm_clock+0x2fe>
                    counterMin = counterMin % 60;
 8000f5a:	4b77      	ldr	r3, [pc, #476]	; (8001138 <fsm_clock+0x4c0>)
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	4b79      	ldr	r3, [pc, #484]	; (8001144 <fsm_clock+0x4cc>)
 8000f60:	fba3 1302 	umull	r1, r3, r3, r2
 8000f64:	0959      	lsrs	r1, r3, #5
 8000f66:	460b      	mov	r3, r1
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	1a5b      	subs	r3, r3, r1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b71      	ldr	r3, [pc, #452]	; (8001138 <fsm_clock+0x4c0>)
 8000f74:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 8000f76:	4b71      	ldr	r3, [pc, #452]	; (800113c <fsm_clock+0x4c4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8000f7c:	4b72      	ldr	r3, [pc, #456]	; (8001148 <fsm_clock+0x4d0>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 8000f82:	4b72      	ldr	r3, [pc, #456]	; (800114c <fsm_clock+0x4d4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 8000f88:	4b71      	ldr	r3, [pc, #452]	; (8001150 <fsm_clock+0x4d8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 8000f8e:	4b71      	ldr	r3, [pc, #452]	; (8001154 <fsm_clock+0x4dc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
            break;
 8000f94:	bf00      	nop
        }
        switch (statusMIN_3)
 8000f96:	4b70      	ldr	r3, [pc, #448]	; (8001158 <fsm_clock+0x4e0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <fsm_clock+0x32c>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d004      	beq.n	8000fac <fsm_clock+0x334>
            {
                ds3231_Write(ADDRESS_MIN, counterMin);
            }
            break;
        default:
            break;
 8000fa2:	e011      	b.n	8000fc8 <fsm_clock+0x350>
            statusMIN_3 = NORMAL;
 8000fa4:	4b6c      	ldr	r3, [pc, #432]	; (8001158 <fsm_clock+0x4e0>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
            break;
 8000faa:	e00d      	b.n	8000fc8 <fsm_clock+0x350>
            if (button_count[12] == 1)
 8000fac:	4b61      	ldr	r3, [pc, #388]	; (8001134 <fsm_clock+0x4bc>)
 8000fae:	8b1b      	ldrh	r3, [r3, #24]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <fsm_clock+0x34e>
                ds3231_Write(ADDRESS_MIN, counterMin);
 8000fb4:	4b60      	ldr	r3, [pc, #384]	; (8001138 <fsm_clock+0x4c0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff fb5a 	bl	8000674 <ds3231_Write>
            break;
 8000fc0:	e001      	b.n	8000fc6 <fsm_clock+0x34e>
        }
    }
 8000fc2:	bf00      	nop
 8000fc4:	e000      	b.n	8000fc8 <fsm_clock+0x350>
            break;
 8000fc6:	bf00      	nop
    if (mode == MODE4)
 8000fc8:	4b64      	ldr	r3, [pc, #400]	; (800115c <fsm_clock+0x4e4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	f040 809e 	bne.w	800110e <fsm_clock+0x496>
    {
        switch (statusSEC_1)
 8000fd2:	4b63      	ldr	r3, [pc, #396]	; (8001160 <fsm_clock+0x4e8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <fsm_clock+0x368>
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d004      	beq.n	8000fe8 <fsm_clock+0x370>
            }
            uart_Flag("Request secs: ");
            blinky(SEC);
            break;
        default:
            break;
 8000fde:	e02e      	b.n	800103e <fsm_clock+0x3c6>
            statusSEC_1 = NORMAL;
 8000fe0:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <fsm_clock+0x4e8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
            break;
 8000fe6:	e02a      	b.n	800103e <fsm_clock+0x3c6>
            lcd_StrCenter(0, 2, "UPDATING SECONDS...", GREEN, BLACK, 16, 1);
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2310      	movs	r3, #16
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ff8:	4a5a      	ldr	r2, [pc, #360]	; (8001164 <fsm_clock+0x4ec>)
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f002 f943 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 8001002:	2301      	movs	r3, #1
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2310      	movs	r3, #16
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	2300      	movs	r3, #0
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001012:	4a55      	ldr	r2, [pc, #340]	; (8001168 <fsm_clock+0x4f0>)
 8001014:	2114      	movs	r1, #20
 8001016:	2000      	movs	r0, #0
 8001018:	f002 f936 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <fsm_clock+0x4f4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <fsm_clock+0x3b8>
                uart_Rs232SendString("Request secs: ");
 8001024:	4852      	ldr	r0, [pc, #328]	; (8001170 <fsm_clock+0x4f8>)
 8001026:	f002 fce9 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 800102a:	4b50      	ldr	r3, [pc, #320]	; (800116c <fsm_clock+0x4f4>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
            uart_Flag("Request secs: ");
 8001030:	484f      	ldr	r0, [pc, #316]	; (8001170 <fsm_clock+0x4f8>)
 8001032:	f001 facd 	bl	80025d0 <uart_Flag>
            blinky(SEC);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 ffaa 	bl	8001f90 <blinky>
            break;
 800103c:	bf00      	nop
        }
        switch (statusSEC_2)
 800103e:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <fsm_clock+0x4fc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <fsm_clock+0x3d4>
 8001046:	2b01      	cmp	r3, #1
 8001048:	d004      	beq.n	8001054 <fsm_clock+0x3dc>
                flag_Error_TimeOut = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 800104a:	e04a      	b.n	80010e2 <fsm_clock+0x46a>
            statusSEC_2 = NORMAL;
 800104c:	4b49      	ldr	r3, [pc, #292]	; (8001174 <fsm_clock+0x4fc>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
            break;
 8001052:	e046      	b.n	80010e2 <fsm_clock+0x46a>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <fsm_clock+0x4bc>)
 8001056:	88db      	ldrh	r3, [r3, #6]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d00a      	beq.n	8001072 <fsm_clock+0x3fa>
 800105c:	4b35      	ldr	r3, [pc, #212]	; (8001134 <fsm_clock+0x4bc>)
 800105e:	88db      	ldrh	r3, [r3, #6]
 8001060:	2b28      	cmp	r3, #40	; 0x28
 8001062:	d913      	bls.n	800108c <fsm_clock+0x414>
 8001064:	4b33      	ldr	r3, [pc, #204]	; (8001134 <fsm_clock+0x4bc>)
 8001066:	88db      	ldrh	r3, [r3, #6]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <fsm_clock+0x414>
                counterSec++;
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <fsm_clock+0x500>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <fsm_clock+0x500>)
 800107c:	701a      	strb	r2, [r3, #0]
                if (counterSec >= 60)
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <fsm_clock+0x500>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b3b      	cmp	r3, #59	; 0x3b
 8001084:	d902      	bls.n	800108c <fsm_clock+0x414>
                    counterSec = 0;
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <fsm_clock+0x500>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <fsm_clock+0x4c4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d125      	bne.n	80010e0 <fsm_clock+0x468>
                counterSec = number;
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <fsm_clock+0x4c8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <fsm_clock+0x500>)
 800109c:	701a      	strb	r2, [r3, #0]
                if (counterSec >= 60)
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <fsm_clock+0x500>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b3b      	cmp	r3, #59	; 0x3b
 80010a4:	d90d      	bls.n	80010c2 <fsm_clock+0x44a>
                    counterSec = counterSec % 60;
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <fsm_clock+0x500>)
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <fsm_clock+0x4cc>)
 80010ac:	fba3 1302 	umull	r1, r3, r3, r2
 80010b0:	0959      	lsrs	r1, r3, #5
 80010b2:	460b      	mov	r3, r1
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	1a5b      	subs	r3, r3, r1
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <fsm_clock+0x500>)
 80010c0:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <fsm_clock+0x4c4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <fsm_clock+0x4d0>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <fsm_clock+0x4d4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <fsm_clock+0x4d8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <fsm_clock+0x4dc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
            break;
 80010e0:	bf00      	nop
        }
        switch (statusSEC_3)
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <fsm_clock+0x504>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <fsm_clock+0x478>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d004      	beq.n	80010f8 <fsm_clock+0x480>
            {
                ds3231_Write(ADDRESS_SEC, counterSec);
            }
            break;
        default:
            break;
 80010ee:	e011      	b.n	8001114 <fsm_clock+0x49c>
            statusSEC_3 = NORMAL;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <fsm_clock+0x504>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
            break;
 80010f6:	e00d      	b.n	8001114 <fsm_clock+0x49c>
            if (button_count[12] == 1)
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <fsm_clock+0x4bc>)
 80010fa:	8b1b      	ldrh	r3, [r3, #24]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <fsm_clock+0x49a>
                ds3231_Write(ADDRESS_SEC, counterSec);
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <fsm_clock+0x500>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fab4 	bl	8000674 <ds3231_Write>
            break;
 800110c:	e001      	b.n	8001112 <fsm_clock+0x49a>
        }
    }
 800110e:	bf00      	nop
 8001110:	e000      	b.n	8001114 <fsm_clock+0x49c>
            break;
 8001112:	bf00      	nop
    if (mode == MODE5)
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <fsm_clock+0x4e4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b05      	cmp	r3, #5
 800111a:	f040 80c6 	bne.w	80012aa <fsm_clock+0x632>
    {
        switch (statusDAY_1)
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <fsm_clock+0x508>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <fsm_clock+0x4b4>
 8001126:	2b01      	cmp	r3, #1
 8001128:	d02c      	beq.n	8001184 <fsm_clock+0x50c>
            }
            uart_Flag("Request days: ");
            blinky(DAY);
            break;
        default:
            break;
 800112a:	e056      	b.n	80011da <fsm_clock+0x562>
            statusDAY_1 = NORMAL;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <fsm_clock+0x508>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
            break;
 8001132:	e052      	b.n	80011da <fsm_clock+0x562>
 8001134:	20000098 	.word	0x20000098
 8001138:	200001a5 	.word	0x200001a5
 800113c:	200001b8 	.word	0x200001b8
 8001140:	200001d0 	.word	0x200001d0
 8001144:	88888889 	.word	0x88888889
 8001148:	200001bc 	.word	0x200001bc
 800114c:	200001c0 	.word	0x200001c0
 8001150:	200001cc 	.word	0x200001cc
 8001154:	200001c8 	.word	0x200001c8
 8001158:	20000140 	.word	0x20000140
 800115c:	2000019c 	.word	0x2000019c
 8001160:	2000012c 	.word	0x2000012c
 8001164:	080092a0 	.word	0x080092a0
 8001168:	08009260 	.word	0x08009260
 800116c:	200001b4 	.word	0x200001b4
 8001170:	080092b4 	.word	0x080092b4
 8001174:	20000130 	.word	0x20000130
 8001178:	200001a4 	.word	0x200001a4
 800117c:	20000134 	.word	0x20000134
 8001180:	20000150 	.word	0x20000150
            lcd_StrCenter(0, 2, "UPDATING DAYS...", GREEN, BLACK, 16, 1);
 8001184:	2301      	movs	r3, #1
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2310      	movs	r3, #16
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	2300      	movs	r3, #0
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001194:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <fsm_clock+0x780>)
 8001196:	2102      	movs	r1, #2
 8001198:	2000      	movs	r0, #0
 800119a:	f002 f875 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 800119e:	2301      	movs	r3, #1
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2310      	movs	r3, #16
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011ae:	4a93      	ldr	r2, [pc, #588]	; (80013fc <fsm_clock+0x784>)
 80011b0:	2114      	movs	r1, #20
 80011b2:	2000      	movs	r0, #0
 80011b4:	f002 f868 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 80011b8:	4b91      	ldr	r3, [pc, #580]	; (8001400 <fsm_clock+0x788>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d105      	bne.n	80011cc <fsm_clock+0x554>
                uart_Rs232SendString("Request days: ");
 80011c0:	4890      	ldr	r0, [pc, #576]	; (8001404 <fsm_clock+0x78c>)
 80011c2:	f002 fc1b 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 80011c6:	4b8e      	ldr	r3, [pc, #568]	; (8001400 <fsm_clock+0x788>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
            uart_Flag("Request days: ");
 80011cc:	488d      	ldr	r0, [pc, #564]	; (8001404 <fsm_clock+0x78c>)
 80011ce:	f001 f9ff 	bl	80025d0 <uart_Flag>
            blinky(DAY);
 80011d2:	2004      	movs	r0, #4
 80011d4:	f000 fedc 	bl	8001f90 <blinky>
            break;
 80011d8:	bf00      	nop
        }
        switch (statusDAY_2)
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <fsm_clock+0x790>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <fsm_clock+0x570>
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d004      	beq.n	80011f0 <fsm_clock+0x578>
                flag_Error_TimeOut = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 80011e6:	e04a      	b.n	800127e <fsm_clock+0x606>
            statusDAY_2 = NORMAL;
 80011e8:	4b87      	ldr	r3, [pc, #540]	; (8001408 <fsm_clock+0x790>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
            break;
 80011ee:	e046      	b.n	800127e <fsm_clock+0x606>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80011f0:	4b86      	ldr	r3, [pc, #536]	; (800140c <fsm_clock+0x794>)
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d00a      	beq.n	800120e <fsm_clock+0x596>
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <fsm_clock+0x794>)
 80011fa:	88db      	ldrh	r3, [r3, #6]
 80011fc:	2b28      	cmp	r3, #40	; 0x28
 80011fe:	d913      	bls.n	8001228 <fsm_clock+0x5b0>
 8001200:	4b82      	ldr	r3, [pc, #520]	; (800140c <fsm_clock+0x794>)
 8001202:	88db      	ldrh	r3, [r3, #6]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	b29b      	uxth	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <fsm_clock+0x5b0>
                counterDay++;
 800120e:	4b80      	ldr	r3, [pc, #512]	; (8001410 <fsm_clock+0x798>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <fsm_clock+0x798>)
 8001218:	701a      	strb	r2, [r3, #0]
                if (counterDay >= 8)
 800121a:	4b7d      	ldr	r3, [pc, #500]	; (8001410 <fsm_clock+0x798>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b07      	cmp	r3, #7
 8001220:	d902      	bls.n	8001228 <fsm_clock+0x5b0>
                    counterDay = 1;
 8001222:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <fsm_clock+0x798>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <fsm_clock+0x79c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d125      	bne.n	800127c <fsm_clock+0x604>
                counterDay = number;
 8001230:	4b79      	ldr	r3, [pc, #484]	; (8001418 <fsm_clock+0x7a0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <fsm_clock+0x798>)
 8001238:	701a      	strb	r2, [r3, #0]
                if (counterDay >= 8)
 800123a:	4b75      	ldr	r3, [pc, #468]	; (8001410 <fsm_clock+0x798>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b07      	cmp	r3, #7
 8001240:	d90d      	bls.n	800125e <fsm_clock+0x5e6>
                    if (counterDay == 8)
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <fsm_clock+0x798>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b08      	cmp	r3, #8
 8001248:	d102      	bne.n	8001250 <fsm_clock+0x5d8>
                        counterDay = 1;
 800124a:	4b71      	ldr	r3, [pc, #452]	; (8001410 <fsm_clock+0x798>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
                    counterDay = counterDay % 8;
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <fsm_clock+0x798>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <fsm_clock+0x798>)
 800125c:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 800125e:	4b6d      	ldr	r3, [pc, #436]	; (8001414 <fsm_clock+0x79c>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <fsm_clock+0x7a4>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <fsm_clock+0x7a8>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 8001270:	4b6c      	ldr	r3, [pc, #432]	; (8001424 <fsm_clock+0x7ac>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 8001276:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <fsm_clock+0x7b0>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
            break;
 800127c:	bf00      	nop
        }
        switch (statusDAY_3)
 800127e:	4b6b      	ldr	r3, [pc, #428]	; (800142c <fsm_clock+0x7b4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <fsm_clock+0x614>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d004      	beq.n	8001294 <fsm_clock+0x61c>
            {
                ds3231_Write(ADDRESS_DAY, counterDay);
            }
            break;
        default:
            break;
 800128a:	e011      	b.n	80012b0 <fsm_clock+0x638>
            statusDAY_3 = NORMAL;
 800128c:	4b67      	ldr	r3, [pc, #412]	; (800142c <fsm_clock+0x7b4>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
            break;
 8001292:	e00d      	b.n	80012b0 <fsm_clock+0x638>
            if (button_count[12] == 1)
 8001294:	4b5d      	ldr	r3, [pc, #372]	; (800140c <fsm_clock+0x794>)
 8001296:	8b1b      	ldrh	r3, [r3, #24]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <fsm_clock+0x636>
                ds3231_Write(ADDRESS_DAY, counterDay);
 800129c:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <fsm_clock+0x798>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	2003      	movs	r0, #3
 80012a4:	f7ff f9e6 	bl	8000674 <ds3231_Write>
            break;
 80012a8:	e001      	b.n	80012ae <fsm_clock+0x636>
        }
    }
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <fsm_clock+0x638>
            break;
 80012ae:	bf00      	nop
    if (mode == MODE6)
 80012b0:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <fsm_clock+0x7b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	f040 80c9 	bne.w	800144c <fsm_clock+0x7d4>
    {
        switch (statusDATE_1)
 80012ba:	4b5e      	ldr	r3, [pc, #376]	; (8001434 <fsm_clock+0x7bc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <fsm_clock+0x650>
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d004      	beq.n	80012d0 <fsm_clock+0x658>
            }
            uart_Flag("Request dates: ");
            blinky(DATE);
            break;
        default:
            break;
 80012c6:	e02e      	b.n	8001326 <fsm_clock+0x6ae>
            statusDATE_1 = NORMAL;
 80012c8:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <fsm_clock+0x7bc>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
            break;
 80012ce:	e02a      	b.n	8001326 <fsm_clock+0x6ae>
            lcd_StrCenter(0, 2, "UPDATING DATES...", GREEN, BLACK, 16, 1);
 80012d0:	2301      	movs	r3, #1
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2310      	movs	r3, #16
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012e0:	4a55      	ldr	r2, [pc, #340]	; (8001438 <fsm_clock+0x7c0>)
 80012e2:	2102      	movs	r1, #2
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 ffcf 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 80012ea:	2301      	movs	r3, #1
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2310      	movs	r3, #16
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <fsm_clock+0x784>)
 80012fc:	2114      	movs	r1, #20
 80012fe:	2000      	movs	r0, #0
 8001300:	f001 ffc2 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 8001304:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <fsm_clock+0x788>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <fsm_clock+0x6a0>
                uart_Rs232SendString("Request dates: ");
 800130c:	484b      	ldr	r0, [pc, #300]	; (800143c <fsm_clock+0x7c4>)
 800130e:	f002 fb75 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <fsm_clock+0x788>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]
            uart_Flag("Request dates: ");
 8001318:	4848      	ldr	r0, [pc, #288]	; (800143c <fsm_clock+0x7c4>)
 800131a:	f001 f959 	bl	80025d0 <uart_Flag>
            blinky(DATE);
 800131e:	2005      	movs	r0, #5
 8001320:	f000 fe36 	bl	8001f90 <blinky>
            break;
 8001324:	bf00      	nop
        }
        switch (statusDATE_2)
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <fsm_clock+0x7c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <fsm_clock+0x6bc>
 800132e:	2b01      	cmp	r3, #1
 8001330:	d004      	beq.n	800133c <fsm_clock+0x6c4>
                flag_Error_TimeOut = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 8001332:	e04a      	b.n	80013ca <fsm_clock+0x752>
            statusDATE_2 = NORMAL;
 8001334:	4b42      	ldr	r3, [pc, #264]	; (8001440 <fsm_clock+0x7c8>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]
            break;
 800133a:	e046      	b.n	80013ca <fsm_clock+0x752>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <fsm_clock+0x794>)
 800133e:	88db      	ldrh	r3, [r3, #6]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d00a      	beq.n	800135a <fsm_clock+0x6e2>
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <fsm_clock+0x794>)
 8001346:	88db      	ldrh	r3, [r3, #6]
 8001348:	2b28      	cmp	r3, #40	; 0x28
 800134a:	d913      	bls.n	8001374 <fsm_clock+0x6fc>
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <fsm_clock+0x794>)
 800134e:	88db      	ldrh	r3, [r3, #6]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	b29b      	uxth	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10c      	bne.n	8001374 <fsm_clock+0x6fc>
                counterDate++;
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <fsm_clock+0x7cc>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <fsm_clock+0x7cc>)
 8001364:	701a      	strb	r2, [r3, #0]
                if (counterDate >= 32)
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <fsm_clock+0x7cc>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b1f      	cmp	r3, #31
 800136c:	d902      	bls.n	8001374 <fsm_clock+0x6fc>
                    counterDate = 1;
 800136e:	4b35      	ldr	r3, [pc, #212]	; (8001444 <fsm_clock+0x7cc>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <fsm_clock+0x79c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d125      	bne.n	80013c8 <fsm_clock+0x750>
                counterDate = number;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <fsm_clock+0x7a0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <fsm_clock+0x7cc>)
 8001384:	701a      	strb	r2, [r3, #0]
                if (counterDate >= 32)
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <fsm_clock+0x7cc>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b1f      	cmp	r3, #31
 800138c:	d90d      	bls.n	80013aa <fsm_clock+0x732>
                    if (counterDate == 32)
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <fsm_clock+0x7cc>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b20      	cmp	r3, #32
 8001394:	d102      	bne.n	800139c <fsm_clock+0x724>
                        counterDate = 1;
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <fsm_clock+0x7cc>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
                    counterDate = counterDate % 32;
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <fsm_clock+0x7cc>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <fsm_clock+0x7cc>)
 80013a8:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <fsm_clock+0x79c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <fsm_clock+0x7a4>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <fsm_clock+0x7a8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <fsm_clock+0x7ac>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <fsm_clock+0x7b0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
            break;
 80013c8:	bf00      	nop
        }
        switch (statusDATE_3)
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <fsm_clock+0x7d0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <fsm_clock+0x760>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d004      	beq.n	80013e0 <fsm_clock+0x768>
            {
                ds3231_Write(ADDRESS_DATE, counterDate);
            }
            break;
        default:
            break;
 80013d6:	e03c      	b.n	8001452 <fsm_clock+0x7da>
            statusDATE_3 = NORMAL;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <fsm_clock+0x7d0>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
            break;
 80013de:	e038      	b.n	8001452 <fsm_clock+0x7da>
            if (button_count[12] == 1)
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <fsm_clock+0x794>)
 80013e2:	8b1b      	ldrh	r3, [r3, #24]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d133      	bne.n	8001450 <fsm_clock+0x7d8>
                ds3231_Write(ADDRESS_DATE, counterDate);
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <fsm_clock+0x7cc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	2004      	movs	r0, #4
 80013f0:	f7ff f940 	bl	8000674 <ds3231_Write>
            break;
 80013f4:	e02c      	b.n	8001450 <fsm_clock+0x7d8>
 80013f6:	bf00      	nop
 80013f8:	080092c4 	.word	0x080092c4
 80013fc:	08009260 	.word	0x08009260
 8001400:	200001b4 	.word	0x200001b4
 8001404:	080092d8 	.word	0x080092d8
 8001408:	20000154 	.word	0x20000154
 800140c:	20000098 	.word	0x20000098
 8001410:	200001a7 	.word	0x200001a7
 8001414:	200001b8 	.word	0x200001b8
 8001418:	200001d0 	.word	0x200001d0
 800141c:	200001bc 	.word	0x200001bc
 8001420:	200001c0 	.word	0x200001c0
 8001424:	200001cc 	.word	0x200001cc
 8001428:	200001c8 	.word	0x200001c8
 800142c:	20000158 	.word	0x20000158
 8001430:	2000019c 	.word	0x2000019c
 8001434:	2000015c 	.word	0x2000015c
 8001438:	080092e8 	.word	0x080092e8
 800143c:	080092fc 	.word	0x080092fc
 8001440:	20000160 	.word	0x20000160
 8001444:	200001a8 	.word	0x200001a8
 8001448:	20000164 	.word	0x20000164
        }
    }
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <fsm_clock+0x7da>
            break;
 8001450:	bf00      	nop
    if (mode == MODE7)
 8001452:	4b7a      	ldr	r3, [pc, #488]	; (800163c <fsm_clock+0x9c4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b07      	cmp	r3, #7
 8001458:	f040 80a6 	bne.w	80015a8 <fsm_clock+0x930>
    {
        switch (statusMONTH_1)
 800145c:	4b78      	ldr	r3, [pc, #480]	; (8001640 <fsm_clock+0x9c8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <fsm_clock+0x7f2>
 8001464:	2b01      	cmp	r3, #1
 8001466:	d004      	beq.n	8001472 <fsm_clock+0x7fa>
            }
            uart_Flag("Request months: ");
            blinky(MONTH);
            break;
        default:
            break;
 8001468:	e02e      	b.n	80014c8 <fsm_clock+0x850>
            statusMONTH_1 = NORMAL;
 800146a:	4b75      	ldr	r3, [pc, #468]	; (8001640 <fsm_clock+0x9c8>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
            break;
 8001470:	e02a      	b.n	80014c8 <fsm_clock+0x850>
            lcd_StrCenter(0, 2, "UPDATING MONTHS...", GREEN, BLACK, 16, 1);
 8001472:	2301      	movs	r3, #1
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2310      	movs	r3, #16
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001482:	4a70      	ldr	r2, [pc, #448]	; (8001644 <fsm_clock+0x9cc>)
 8001484:	2102      	movs	r1, #2
 8001486:	2000      	movs	r0, #0
 8001488:	f001 fefe 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 800148c:	2301      	movs	r3, #1
 800148e:	9302      	str	r3, [sp, #8]
 8001490:	2310      	movs	r3, #16
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800149c:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <fsm_clock+0x9d0>)
 800149e:	2114      	movs	r1, #20
 80014a0:	2000      	movs	r0, #0
 80014a2:	f001 fef1 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 80014a6:	4b69      	ldr	r3, [pc, #420]	; (800164c <fsm_clock+0x9d4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <fsm_clock+0x842>
                uart_Rs232SendString("Request months: ");
 80014ae:	4868      	ldr	r0, [pc, #416]	; (8001650 <fsm_clock+0x9d8>)
 80014b0:	f002 faa4 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 80014b4:	4b65      	ldr	r3, [pc, #404]	; (800164c <fsm_clock+0x9d4>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
            uart_Flag("Request months: ");
 80014ba:	4865      	ldr	r0, [pc, #404]	; (8001650 <fsm_clock+0x9d8>)
 80014bc:	f001 f888 	bl	80025d0 <uart_Flag>
            blinky(MONTH);
 80014c0:	2006      	movs	r0, #6
 80014c2:	f000 fd65 	bl	8001f90 <blinky>
            break;
 80014c6:	bf00      	nop
        }
        switch (statusMONTH_2)
 80014c8:	4b62      	ldr	r3, [pc, #392]	; (8001654 <fsm_clock+0x9dc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <fsm_clock+0x85e>
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d004      	beq.n	80014de <fsm_clock+0x866>
                flag_Error_TimeOut = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 80014d4:	e052      	b.n	800157c <fsm_clock+0x904>
            statusMONTH_2 = NORMAL;
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <fsm_clock+0x9dc>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
            break;
 80014dc:	e04e      	b.n	800157c <fsm_clock+0x904>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80014de:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <fsm_clock+0x9e0>)
 80014e0:	88db      	ldrh	r3, [r3, #6]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d00a      	beq.n	80014fc <fsm_clock+0x884>
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <fsm_clock+0x9e0>)
 80014e8:	88db      	ldrh	r3, [r3, #6]
 80014ea:	2b28      	cmp	r3, #40	; 0x28
 80014ec:	d913      	bls.n	8001516 <fsm_clock+0x89e>
 80014ee:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <fsm_clock+0x9e0>)
 80014f0:	88db      	ldrh	r3, [r3, #6]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10c      	bne.n	8001516 <fsm_clock+0x89e>
                counterMonth++;
 80014fc:	4b57      	ldr	r3, [pc, #348]	; (800165c <fsm_clock+0x9e4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b55      	ldr	r3, [pc, #340]	; (800165c <fsm_clock+0x9e4>)
 8001506:	701a      	strb	r2, [r3, #0]
                if (counterMonth >= 13)
 8001508:	4b54      	ldr	r3, [pc, #336]	; (800165c <fsm_clock+0x9e4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d902      	bls.n	8001516 <fsm_clock+0x89e>
                    counterMonth = 1;
 8001510:	4b52      	ldr	r3, [pc, #328]	; (800165c <fsm_clock+0x9e4>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <fsm_clock+0x9e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d12d      	bne.n	800157a <fsm_clock+0x902>
                counterMonth = number;
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <fsm_clock+0x9ec>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <fsm_clock+0x9e4>)
 8001526:	701a      	strb	r2, [r3, #0]
                if (counterMonth >= 13)
 8001528:	4b4c      	ldr	r3, [pc, #304]	; (800165c <fsm_clock+0x9e4>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d915      	bls.n	800155c <fsm_clock+0x8e4>
                    if (counterMonth == 13)
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <fsm_clock+0x9e4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b0d      	cmp	r3, #13
 8001536:	d102      	bne.n	800153e <fsm_clock+0x8c6>
                        counterMonth = 1;
 8001538:	4b48      	ldr	r3, [pc, #288]	; (800165c <fsm_clock+0x9e4>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
                    counterMonth = counterMonth % 13;
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <fsm_clock+0x9e4>)
 8001540:	7819      	ldrb	r1, [r3, #0]
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <fsm_clock+0x9f0>)
 8001544:	fba3 2301 	umull	r2, r3, r3, r1
 8001548:	089a      	lsrs	r2, r3, #2
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	1acb      	subs	r3, r1, r3
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b40      	ldr	r3, [pc, #256]	; (800165c <fsm_clock+0x9e4>)
 800155a:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <fsm_clock+0x9e8>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <fsm_clock+0x9f4>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <fsm_clock+0x9f8>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <fsm_clock+0x9fc>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <fsm_clock+0xa00>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
            break;
 800157a:	bf00      	nop
        }
        switch (statusMONTH_3)
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <fsm_clock+0xa04>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <fsm_clock+0x912>
 8001584:	2b01      	cmp	r3, #1
 8001586:	d004      	beq.n	8001592 <fsm_clock+0x91a>
            {
                ds3231_Write(ADDRESS_MONTH, counterMonth);
            }
            break;
        default:
            break;
 8001588:	e011      	b.n	80015ae <fsm_clock+0x936>
            statusMONTH_3 = NORMAL;
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <fsm_clock+0xa04>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
            break;
 8001590:	e00d      	b.n	80015ae <fsm_clock+0x936>
            if (button_count[12] == 1)
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <fsm_clock+0x9e0>)
 8001594:	8b1b      	ldrh	r3, [r3, #24]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <fsm_clock+0x934>
                ds3231_Write(ADDRESS_MONTH, counterMonth);
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <fsm_clock+0x9e4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	2005      	movs	r0, #5
 80015a2:	f7ff f867 	bl	8000674 <ds3231_Write>
            break;
 80015a6:	e001      	b.n	80015ac <fsm_clock+0x934>
        }
    }
 80015a8:	bf00      	nop
 80015aa:	e000      	b.n	80015ae <fsm_clock+0x936>
            break;
 80015ac:	bf00      	nop
    if (mode == MODE8)
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <fsm_clock+0x9c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	f040 80c4 	bne.w	8001740 <fsm_clock+0xac8>
    {
        switch (statusYEAR_1)
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <fsm_clock+0xa08>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <fsm_clock+0x94e>
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d004      	beq.n	80015ce <fsm_clock+0x956>
            }
            uart_Flag("Request years: ");
            blinky(YEAR);
            break;
        default:
            break;
 80015c4:	e02e      	b.n	8001624 <fsm_clock+0x9ac>
            statusYEAR_1 = NORMAL;
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <fsm_clock+0xa08>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
            break;
 80015cc:	e02a      	b.n	8001624 <fsm_clock+0x9ac>
            lcd_StrCenter(0, 2, "UPDATING YEARS...", GREEN, BLACK, 16, 1);
 80015ce:	2301      	movs	r3, #1
 80015d0:	9302      	str	r3, [sp, #8]
 80015d2:	2310      	movs	r3, #16
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <fsm_clock+0xa0c>)
 80015e0:	2102      	movs	r1, #2
 80015e2:	2000      	movs	r0, #0
 80015e4:	f001 fe50 	bl	8003288 <lcd_StrCenter>
            lcd_StrCenter(0, 20, "MODE CLOCK", YELLOW, BLACK, 16, 1);
 80015e8:	2301      	movs	r3, #1
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2310      	movs	r3, #16
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <fsm_clock+0x9d0>)
 80015fa:	2114      	movs	r1, #20
 80015fc:	2000      	movs	r0, #0
 80015fe:	f001 fe43 	bl	8003288 <lcd_StrCenter>
            if (isSendStr == 0)
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <fsm_clock+0x9d4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <fsm_clock+0x99e>
                uart_Rs232SendString("Request years: ");
 800160a:	481f      	ldr	r0, [pc, #124]	; (8001688 <fsm_clock+0xa10>)
 800160c:	f002 f9f6 	bl	80039fc <uart_Rs232SendString>
                isSendStr = 1;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <fsm_clock+0x9d4>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
            uart_Flag("Request years: ");
 8001616:	481c      	ldr	r0, [pc, #112]	; (8001688 <fsm_clock+0xa10>)
 8001618:	f000 ffda 	bl	80025d0 <uart_Flag>
            blinky(YEAR);
 800161c:	2007      	movs	r0, #7
 800161e:	f000 fcb7 	bl	8001f90 <blinky>
            break;
 8001622:	bf00      	nop
        }
        switch (statusYEAR_2)
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <fsm_clock+0xa14>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <fsm_clock+0x9ba>
 800162c:	2b01      	cmp	r3, #1
 800162e:	d02f      	beq.n	8001690 <fsm_clock+0xa18>
                flag_Error_TimeOut = 0;
                flag_TimeOut = 0;
            }
            break;
        default:
            break;
 8001630:	e070      	b.n	8001714 <fsm_clock+0xa9c>
            statusYEAR_2 = NORMAL;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <fsm_clock+0xa14>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
            break;
 8001638:	e06c      	b.n	8001714 <fsm_clock+0xa9c>
 800163a:	bf00      	nop
 800163c:	2000019c 	.word	0x2000019c
 8001640:	20000168 	.word	0x20000168
 8001644:	0800930c 	.word	0x0800930c
 8001648:	08009260 	.word	0x08009260
 800164c:	200001b4 	.word	0x200001b4
 8001650:	08009320 	.word	0x08009320
 8001654:	2000016c 	.word	0x2000016c
 8001658:	20000098 	.word	0x20000098
 800165c:	200001a9 	.word	0x200001a9
 8001660:	200001b8 	.word	0x200001b8
 8001664:	200001d0 	.word	0x200001d0
 8001668:	4ec4ec4f 	.word	0x4ec4ec4f
 800166c:	200001bc 	.word	0x200001bc
 8001670:	200001c0 	.word	0x200001c0
 8001674:	200001cc 	.word	0x200001cc
 8001678:	200001c8 	.word	0x200001c8
 800167c:	20000170 	.word	0x20000170
 8001680:	20000174 	.word	0x20000174
 8001684:	08009334 	.word	0x08009334
 8001688:	08009348 	.word	0x08009348
 800168c:	20000178 	.word	0x20000178
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8001690:	4b99      	ldr	r3, [pc, #612]	; (80018f8 <fsm_clock+0xc80>)
 8001692:	88db      	ldrh	r3, [r3, #6]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d00a      	beq.n	80016ae <fsm_clock+0xa36>
 8001698:	4b97      	ldr	r3, [pc, #604]	; (80018f8 <fsm_clock+0xc80>)
 800169a:	88db      	ldrh	r3, [r3, #6]
 800169c:	2b28      	cmp	r3, #40	; 0x28
 800169e:	d913      	bls.n	80016c8 <fsm_clock+0xa50>
 80016a0:	4b95      	ldr	r3, [pc, #596]	; (80018f8 <fsm_clock+0xc80>)
 80016a2:	88db      	ldrh	r3, [r3, #6]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10c      	bne.n	80016c8 <fsm_clock+0xa50>
                counterYear++;
 80016ae:	4b93      	ldr	r3, [pc, #588]	; (80018fc <fsm_clock+0xc84>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b91      	ldr	r3, [pc, #580]	; (80018fc <fsm_clock+0xc84>)
 80016b8:	701a      	strb	r2, [r3, #0]
                if (counterYear >= 100)
 80016ba:	4b90      	ldr	r3, [pc, #576]	; (80018fc <fsm_clock+0xc84>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b63      	cmp	r3, #99	; 0x63
 80016c0:	d902      	bls.n	80016c8 <fsm_clock+0xa50>
                    counterYear = 0;
 80016c2:	4b8e      	ldr	r3, [pc, #568]	; (80018fc <fsm_clock+0xc84>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
            if (uart_valid == 1)
 80016c8:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <fsm_clock+0xc88>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d120      	bne.n	8001712 <fsm_clock+0xa9a>
                counterYear = number;
 80016d0:	4b8c      	ldr	r3, [pc, #560]	; (8001904 <fsm_clock+0xc8c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <fsm_clock+0xc84>)
 80016d8:	701a      	strb	r2, [r3, #0]
                counterYear = counterYear % 100;
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <fsm_clock+0xc84>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4a8a      	ldr	r2, [pc, #552]	; (8001908 <fsm_clock+0xc90>)
 80016e0:	fba2 1203 	umull	r1, r2, r2, r3
 80016e4:	0952      	lsrs	r2, r2, #5
 80016e6:	2164      	movs	r1, #100	; 0x64
 80016e8:	fb01 f202 	mul.w	r2, r1, r2
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b82      	ldr	r3, [pc, #520]	; (80018fc <fsm_clock+0xc84>)
 80016f2:	701a      	strb	r2, [r3, #0]
                uart_valid = 0;
 80016f4:	4b82      	ldr	r3, [pc, #520]	; (8001900 <fsm_clock+0xc88>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
                auto_change_mode = 1;
 80016fa:	4b84      	ldr	r3, [pc, #528]	; (800190c <fsm_clock+0xc94>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
                counter_TimeOut = 0;
 8001700:	4b83      	ldr	r3, [pc, #524]	; (8001910 <fsm_clock+0xc98>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
                flag_Error_TimeOut = 0;
 8001706:	4b83      	ldr	r3, [pc, #524]	; (8001914 <fsm_clock+0xc9c>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
                flag_TimeOut = 0;
 800170c:	4b82      	ldr	r3, [pc, #520]	; (8001918 <fsm_clock+0xca0>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
            break;
 8001712:	bf00      	nop
        }
        switch (statusYEAR_3)
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <fsm_clock+0xca4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <fsm_clock+0xaaa>
 800171c:	2b01      	cmp	r3, #1
 800171e:	d004      	beq.n	800172a <fsm_clock+0xab2>
            {
                ds3231_Write(ADDRESS_YEAR, counterYear);
            }
            break;
        default:
            break;
 8001720:	e011      	b.n	8001746 <fsm_clock+0xace>
            statusYEAR_3 = NORMAL;
 8001722:	4b7e      	ldr	r3, [pc, #504]	; (800191c <fsm_clock+0xca4>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]
            break;
 8001728:	e00d      	b.n	8001746 <fsm_clock+0xace>
            if (button_count[12] == 1)
 800172a:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <fsm_clock+0xc80>)
 800172c:	8b1b      	ldrh	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <fsm_clock+0xacc>
                ds3231_Write(ADDRESS_YEAR, counterYear);
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <fsm_clock+0xc84>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4619      	mov	r1, r3
 8001738:	2006      	movs	r0, #6
 800173a:	f7fe ff9b 	bl	8000674 <ds3231_Write>
            break;
 800173e:	e001      	b.n	8001744 <fsm_clock+0xacc>
        }
    }
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <fsm_clock+0xace>
            break;
 8001744:	bf00      	nop

    switch (mode)
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <fsm_clock+0xca8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3b01      	subs	r3, #1
 800174c:	2b07      	cmp	r3, #7
 800174e:	f200 81c7 	bhi.w	8001ae0 <fsm_clock+0xe68>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <fsm_clock+0xae0>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001779 	.word	0x08001779
 800175c:	080017a5 	.word	0x080017a5
 8001760:	08001823 	.word	0x08001823
 8001764:	0800188d 	.word	0x0800188d
 8001768:	08001939 	.word	0x08001939
 800176c:	080019a3 	.word	0x080019a3
 8001770:	08001a0d 	.word	0x08001a0d
 8001774:	08001a75 	.word	0x08001a75
    {
    case MODE1:
        if (button_count[0] == 1)
 8001778:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <fsm_clock+0xc80>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 81b1 	bne.w	8001ae4 <fsm_clock+0xe6c>
        {
            mode = MODE2;
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <fsm_clock+0xca8>)
 8001784:	2202      	movs	r2, #2
 8001786:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001788:	4b66      	ldr	r3, [pc, #408]	; (8001924 <fsm_clock+0xcac>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
            init_counter();
 800178e:	f000 fba7 	bl	8001ee0 <init_counter>
            lcd_Fill(0, 20, 240, 40, BLACK); // Clear "MODE NORMAL" on the LCD
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2328      	movs	r3, #40	; 0x28
 8001798:	22f0      	movs	r2, #240	; 0xf0
 800179a:	2114      	movs	r1, #20
 800179c:	2000      	movs	r0, #0
 800179e:	f001 f9d3 	bl	8002b48 <lcd_Fill>
        }
        break;
 80017a2:	e19f      	b.n	8001ae4 <fsm_clock+0xe6c>
    case MODE2:
        if (button_count[0] == 1 || auto_change_mode == 1)
 80017a4:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <fsm_clock+0xc80>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d004      	beq.n	80017b6 <fsm_clock+0xb3e>
 80017ac:	4b57      	ldr	r3, [pc, #348]	; (800190c <fsm_clock+0xc94>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 8199 	bne.w	8001ae8 <fsm_clock+0xe70>
        {
            mode = MODE3;
 80017b6:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <fsm_clock+0xca8>)
 80017b8:	2203      	movs	r2, #3
 80017ba:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <fsm_clock+0xcac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 80017c2:	4b52      	ldr	r3, [pc, #328]	; (800190c <fsm_clock+0xc94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 100, counterHour, 2, GREEN, BLACK, 24);
 80017c8:	4b57      	ldr	r3, [pc, #348]	; (8001928 <fsm_clock+0xcb0>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	2318      	movs	r3, #24
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2302      	movs	r3, #2
 80017de:	2164      	movs	r1, #100	; 0x64
 80017e0:	2046      	movs	r0, #70	; 0x46
 80017e2:	f001 faeb 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);  // Clear "UPDATING HOURS..."
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2314      	movs	r3, #20
 80017ec:	22f0      	movs	r2, #240	; 0xf0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2000      	movs	r0, #0
 80017f2:	f001 f9a9 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK); // Clear "MODE LOCK"
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2328      	movs	r3, #40	; 0x28
 80017fc:	22f0      	movs	r2, #240	; 0xf0
 80017fe:	2114      	movs	r1, #20
 8001800:	2000      	movs	r0, #0
 8001802:	f001 f9a1 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 270, 240, 290, BLACK);
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	f44f 7391 	mov.w	r3, #290	; 0x122
 800180e:	22f0      	movs	r2, #240	; 0xf0
 8001810:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001814:	2000      	movs	r0, #0
 8001816:	f001 f997 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 800181a:	4844      	ldr	r0, [pc, #272]	; (800192c <fsm_clock+0xcb4>)
 800181c:	f002 f8ee 	bl	80039fc <uart_Rs232SendString>
        }
        break;
 8001820:	e162      	b.n	8001ae8 <fsm_clock+0xe70>
    case MODE3:
        if (button_count[0] == 1 || auto_change_mode == 1)
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <fsm_clock+0xc80>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d004      	beq.n	8001834 <fsm_clock+0xbbc>
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <fsm_clock+0xc94>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	f040 815c 	bne.w	8001aec <fsm_clock+0xe74>
        {
            mode = MODE4;
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <fsm_clock+0xca8>)
 8001836:	2204      	movs	r2, #4
 8001838:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 800183a:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <fsm_clock+0xcac>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <fsm_clock+0xc94>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 100, counterMin, 2, GREEN, BLACK, 24);
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <fsm_clock+0xcb8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b29a      	uxth	r2, r3
 800184c:	2318      	movs	r3, #24
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2302      	movs	r3, #2
 800185c:	2164      	movs	r1, #100	; 0x64
 800185e:	206e      	movs	r0, #110	; 0x6e
 8001860:	f001 faac 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8001864:	2300      	movs	r3, #0
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2314      	movs	r3, #20
 800186a:	22f0      	movs	r2, #240	; 0xf0
 800186c:	2100      	movs	r1, #0
 800186e:	2000      	movs	r0, #0
 8001870:	f001 f96a 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2328      	movs	r3, #40	; 0x28
 800187a:	22f0      	movs	r2, #240	; 0xf0
 800187c:	2114      	movs	r1, #20
 800187e:	2000      	movs	r0, #0
 8001880:	f001 f962 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001884:	4829      	ldr	r0, [pc, #164]	; (800192c <fsm_clock+0xcb4>)
 8001886:	f002 f8b9 	bl	80039fc <uart_Rs232SendString>
        }
        break;
 800188a:	e12f      	b.n	8001aec <fsm_clock+0xe74>
    case MODE4:
        if (button_count[0] == 1 || auto_change_mode == 1)
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <fsm_clock+0xc80>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d004      	beq.n	800189e <fsm_clock+0xc26>
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <fsm_clock+0xc94>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	f040 8129 	bne.w	8001af0 <fsm_clock+0xe78>
        {
            mode = MODE5;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <fsm_clock+0xca8>)
 80018a0:	2205      	movs	r2, #5
 80018a2:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <fsm_clock+0xcac>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <fsm_clock+0xc94>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(150, 100, counterSec, 2, GREEN, BLACK, 24);
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <fsm_clock+0xcbc>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	2318      	movs	r3, #24
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2302      	movs	r3, #2
 80018c6:	2164      	movs	r1, #100	; 0x64
 80018c8:	2096      	movs	r0, #150	; 0x96
 80018ca:	f001 fa77 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2314      	movs	r3, #20
 80018d4:	22f0      	movs	r2, #240	; 0xf0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2000      	movs	r0, #0
 80018da:	f001 f935 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2328      	movs	r3, #40	; 0x28
 80018e4:	22f0      	movs	r2, #240	; 0xf0
 80018e6:	2114      	movs	r1, #20
 80018e8:	2000      	movs	r0, #0
 80018ea:	f001 f92d 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 80018ee:	480f      	ldr	r0, [pc, #60]	; (800192c <fsm_clock+0xcb4>)
 80018f0:	f002 f884 	bl	80039fc <uart_Rs232SendString>
        }
        break;
 80018f4:	e0fc      	b.n	8001af0 <fsm_clock+0xe78>
 80018f6:	bf00      	nop
 80018f8:	20000098 	.word	0x20000098
 80018fc:	200001aa 	.word	0x200001aa
 8001900:	200001b8 	.word	0x200001b8
 8001904:	200001d0 	.word	0x200001d0
 8001908:	51eb851f 	.word	0x51eb851f
 800190c:	200001bc 	.word	0x200001bc
 8001910:	200001c0 	.word	0x200001c0
 8001914:	200001cc 	.word	0x200001cc
 8001918:	200001c8 	.word	0x200001c8
 800191c:	2000017c 	.word	0x2000017c
 8001920:	2000019c 	.word	0x2000019c
 8001924:	200001b4 	.word	0x200001b4
 8001928:	200001a6 	.word	0x200001a6
 800192c:	08009358 	.word	0x08009358
 8001930:	200001a5 	.word	0x200001a5
 8001934:	200001a4 	.word	0x200001a4
    case MODE5:
        if (button_count[0] == 1 || auto_change_mode == 1)
 8001938:	4b8d      	ldr	r3, [pc, #564]	; (8001b70 <fsm_clock+0xef8>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d004      	beq.n	800194a <fsm_clock+0xcd2>
 8001940:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <fsm_clock+0xefc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	f040 80d5 	bne.w	8001af4 <fsm_clock+0xe7c>
        {
            mode = MODE6;
 800194a:	4b8b      	ldr	r3, [pc, #556]	; (8001b78 <fsm_clock+0xf00>)
 800194c:	2206      	movs	r2, #6
 800194e:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001950:	4b8a      	ldr	r3, [pc, #552]	; (8001b7c <fsm_clock+0xf04>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001956:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <fsm_clock+0xefc>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(20, 130, counterDay, 2, YELLOW, BLACK, 24);
 800195c:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <fsm_clock+0xf08>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	2318      	movs	r3, #24
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2300      	movs	r3, #0
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2302      	movs	r3, #2
 8001972:	2182      	movs	r1, #130	; 0x82
 8001974:	2014      	movs	r0, #20
 8001976:	f001 fa21 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 800197a:	2300      	movs	r3, #0
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2314      	movs	r3, #20
 8001980:	22f0      	movs	r2, #240	; 0xf0
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f001 f8df 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2328      	movs	r3, #40	; 0x28
 8001990:	22f0      	movs	r2, #240	; 0xf0
 8001992:	2114      	movs	r1, #20
 8001994:	2000      	movs	r0, #0
 8001996:	f001 f8d7 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 800199a:	487a      	ldr	r0, [pc, #488]	; (8001b84 <fsm_clock+0xf0c>)
 800199c:	f002 f82e 	bl	80039fc <uart_Rs232SendString>
        }
        break;
 80019a0:	e0a8      	b.n	8001af4 <fsm_clock+0xe7c>
    case MODE6:
        if (button_count[0] == 1 || auto_change_mode == 1)
 80019a2:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <fsm_clock+0xef8>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d004      	beq.n	80019b4 <fsm_clock+0xd3c>
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <fsm_clock+0xefc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f040 80a2 	bne.w	8001af8 <fsm_clock+0xe80>
        {
            mode = MODE7;
 80019b4:	4b70      	ldr	r3, [pc, #448]	; (8001b78 <fsm_clock+0xf00>)
 80019b6:	2207      	movs	r2, #7
 80019b8:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <fsm_clock+0xf04>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 80019c0:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <fsm_clock+0xefc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 130, counterDate, 2, YELLOW, BLACK, 24);
 80019c6:	4b70      	ldr	r3, [pc, #448]	; (8001b88 <fsm_clock+0xf10>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	2318      	movs	r3, #24
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2302      	movs	r3, #2
 80019dc:	2182      	movs	r1, #130	; 0x82
 80019de:	2046      	movs	r0, #70	; 0x46
 80019e0:	f001 f9ec 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2314      	movs	r3, #20
 80019ea:	22f0      	movs	r2, #240	; 0xf0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2000      	movs	r0, #0
 80019f0:	f001 f8aa 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 80019f4:	2300      	movs	r3, #0
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2328      	movs	r3, #40	; 0x28
 80019fa:	22f0      	movs	r2, #240	; 0xf0
 80019fc:	2114      	movs	r1, #20
 80019fe:	2000      	movs	r0, #0
 8001a00:	f001 f8a2 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001a04:	485f      	ldr	r0, [pc, #380]	; (8001b84 <fsm_clock+0xf0c>)
 8001a06:	f001 fff9 	bl	80039fc <uart_Rs232SendString>
        }
        break;
 8001a0a:	e075      	b.n	8001af8 <fsm_clock+0xe80>
    case MODE7:
        if (button_count[0] == 1 || auto_change_mode == 1)
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <fsm_clock+0xef8>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d003      	beq.n	8001a1c <fsm_clock+0xda4>
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <fsm_clock+0xefc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d16f      	bne.n	8001afc <fsm_clock+0xe84>
        {
            mode = MODE8;
 8001a1c:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <fsm_clock+0xf00>)
 8001a1e:	2208      	movs	r2, #8
 8001a20:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <fsm_clock+0xf04>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <fsm_clock+0xefc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 130, counterMonth, 2, YELLOW, BLACK, 24);
 8001a2e:	4b57      	ldr	r3, [pc, #348]	; (8001b8c <fsm_clock+0xf14>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2318      	movs	r3, #24
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2302      	movs	r3, #2
 8001a44:	2182      	movs	r1, #130	; 0x82
 8001a46:	206e      	movs	r0, #110	; 0x6e
 8001a48:	f001 f9b8 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2314      	movs	r3, #20
 8001a52:	22f0      	movs	r2, #240	; 0xf0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2000      	movs	r0, #0
 8001a58:	f001 f876 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2328      	movs	r3, #40	; 0x28
 8001a62:	22f0      	movs	r2, #240	; 0xf0
 8001a64:	2114      	movs	r1, #20
 8001a66:	2000      	movs	r0, #0
 8001a68:	f001 f86e 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001a6c:	4845      	ldr	r0, [pc, #276]	; (8001b84 <fsm_clock+0xf0c>)
 8001a6e:	f001 ffc5 	bl	80039fc <uart_Rs232SendString>
        }
        break;
 8001a72:	e043      	b.n	8001afc <fsm_clock+0xe84>
    case MODE8:
        if (button_count[0] == 1 || auto_change_mode == 1)
 8001a74:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <fsm_clock+0xef8>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d003      	beq.n	8001a84 <fsm_clock+0xe0c>
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <fsm_clock+0xefc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d13d      	bne.n	8001b00 <fsm_clock+0xe88>
        {
            mode = MODE1;
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <fsm_clock+0xf00>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
            isSendStr = 0;
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <fsm_clock+0xf04>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
            auto_change_mode = 0;
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <fsm_clock+0xefc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(150, 130, counterYear, 2, YELLOW, BLACK, 24);
 8001a96:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <fsm_clock+0xf18>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2318      	movs	r3, #24
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2302      	movs	r3, #2
 8001aac:	2182      	movs	r1, #130	; 0x82
 8001aae:	2096      	movs	r0, #150	; 0x96
 8001ab0:	f001 f984 	bl	8002dbc <lcd_ShowIntNum>
            lcd_Fill(0, 0, 240, 20, BLACK);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2314      	movs	r3, #20
 8001aba:	22f0      	movs	r2, #240	; 0xf0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f001 f842 	bl	8002b48 <lcd_Fill>
            lcd_Fill(0, 20, 240, 40, BLACK);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2328      	movs	r3, #40	; 0x28
 8001aca:	22f0      	movs	r2, #240	; 0xf0
 8001acc:	2114      	movs	r1, #20
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f001 f83a 	bl	8002b48 <lcd_Fill>
            uart_Rs232SendString("\n");
 8001ad4:	482b      	ldr	r0, [pc, #172]	; (8001b84 <fsm_clock+0xf0c>)
 8001ad6:	f001 ff91 	bl	80039fc <uart_Rs232SendString>
            save_ClockSettings();
 8001ada:	f000 fd29 	bl	8002530 <save_ClockSettings>
        }
        break;
 8001ade:	e00f      	b.n	8001b00 <fsm_clock+0xe88>
    default:
        break;
 8001ae0:	bf00      	nop
 8001ae2:	e00e      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001ae4:	bf00      	nop
 8001ae6:	e00c      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001ae8:	bf00      	nop
 8001aea:	e00a      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001aec:	bf00      	nop
 8001aee:	e008      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001af0:	bf00      	nop
 8001af2:	e006      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001af4:	bf00      	nop
 8001af6:	e004      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001af8:	bf00      	nop
 8001afa:	e002      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <fsm_clock+0xe8a>
        break;
 8001b00:	bf00      	nop
    }

    if (flag_Error_TimeOut == 1)
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <fsm_clock+0xf1c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12f      	bne.n	8001b6a <fsm_clock+0xef2>
    {
        mode = MODE1;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <fsm_clock+0xf00>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
        mode_alarm = ALARM_MODE1;
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <fsm_clock+0xf20>)
 8001b12:	220a      	movs	r2, #10
 8001b14:	601a      	str	r2, [r3, #0]
        isSendStr = 0;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <fsm_clock+0xf04>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
        auto_change_mode = 0;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <fsm_clock+0xefc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
        flag_TimeOut = 0;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <fsm_clock+0xf24>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
        flag_Error_TimeOut = 0;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <fsm_clock+0xf1c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
        save_ClockSettings();
 8001b2e:	f000 fcff 	bl	8002530 <save_ClockSettings>
        save_AlarmSettings();
 8001b32:	f000 fd39 	bl	80025a8 <save_AlarmSettings>
        lcd_Fill(0, 0, 240, 20, BLACK);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2314      	movs	r3, #20
 8001b3c:	22f0      	movs	r2, #240	; 0xf0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2000      	movs	r0, #0
 8001b42:	f001 f801 	bl	8002b48 <lcd_Fill>
        lcd_Fill(0, 20, 240, 40, BLACK);
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2328      	movs	r3, #40	; 0x28
 8001b4c:	22f0      	movs	r2, #240	; 0xf0
 8001b4e:	2114      	movs	r1, #20
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 fff9 	bl	8002b48 <lcd_Fill>
        lcd_Fill(0, 270, 240, 290, BLACK);
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001b5e:	22f0      	movs	r2, #240	; 0xf0
 8001b60:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001b64:	2000      	movs	r0, #0
 8001b66:	f000 ffef 	bl	8002b48 <lcd_Fill>
    }
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000098 	.word	0x20000098
 8001b74:	200001bc 	.word	0x200001bc
 8001b78:	2000019c 	.word	0x2000019c
 8001b7c:	200001b4 	.word	0x200001b4
 8001b80:	200001a7 	.word	0x200001a7
 8001b84:	08009358 	.word	0x08009358
 8001b88:	200001a8 	.word	0x200001a8
 8001b8c:	200001a9 	.word	0x200001a9
 8001b90:	200001aa 	.word	0x200001aa
 8001b94:	200001cc 	.word	0x200001cc
 8001b98:	200001a0 	.word	0x200001a0
 8001b9c:	200001c8 	.word	0x200001c8

08001ba0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	615a      	str	r2, [r3, #20]
 8001bb8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001bce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001bd2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <MX_FSMC_Init+0xf0>)
 8001bd8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001bee:	2210      	movs	r2, #16
 8001bf0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001c32:	230f      	movs	r3, #15
 8001c34:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001c36:	230f      	movs	r3, #15
 8001c38:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001c3a:	233c      	movs	r3, #60	; 0x3c
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001c42:	2310      	movs	r3, #16
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001c46:	2311      	movs	r3, #17
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001c4e:	2308      	movs	r3, #8
 8001c50:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001c52:	230f      	movs	r3, #15
 8001c54:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001c56:	2309      	movs	r3, #9
 8001c58:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001c5e:	2310      	movs	r3, #16
 8001c60:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001c62:	2311      	movs	r3, #17
 8001c64:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001c6a:	463a      	mov	r2, r7
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <MX_FSMC_Init+0xec>)
 8001c74:	f004 ff5c 	bl	8006b30 <HAL_SRAM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001c7e:	f001 fcbb 	bl	80035f8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001c82:	bf00      	nop
 8001c84:	3738      	adds	r7, #56	; 0x38
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000d0 	.word	0x200000d0
 8001c90:	a0000104 	.word	0xa0000104

08001c94 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_FSMC_MspInit+0x88>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d131      	bne.n	8001d14 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_FSMC_MspInit+0x88>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_FSMC_MspInit+0x8c>)
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <HAL_FSMC_MspInit+0x8c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6393      	str	r3, [r2, #56]	; 0x38
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_FSMC_MspInit+0x8c>)
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001cd2:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001cd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <HAL_FSMC_MspInit+0x90>)
 8001cee:	f002 fb4f 	bl	8004390 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001cf2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001cf6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d04:	230c      	movs	r3, #12
 8001d06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4806      	ldr	r0, [pc, #24]	; (8001d28 <HAL_FSMC_MspInit+0x94>)
 8001d0e:	f002 fb3f 	bl	8004390 <HAL_GPIO_Init>
 8001d12:	e000      	b.n	8001d16 <HAL_FSMC_MspInit+0x82>
    return;
 8001d14:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000120 	.word	0x20000120
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40020c00 	.word	0x40020c00

08001d2c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001d34:	f7ff ffae 	bl	8001c94 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <init_value>:
int number = 0;

uint8_t tempUart[MAX_BUFFER_SIZE] = {0};

void init_value(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
    mode = MODE1;
 8001d44:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <init_value+0x100>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
    mode_alarm = ALARM_MODE1;
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <init_value+0x104>)
 8001d4c:	220a      	movs	r2, #10
 8001d4e:	601a      	str	r2, [r3, #0]

    statusNORMAL_1 = INIT;
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <init_value+0x108>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    statusNORMAL_2 = INIT;
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <init_value+0x10c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    statusSEC_1 = INIT;
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <init_value+0x110>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    statusSEC_2 = INIT;
 8001d62:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <init_value+0x114>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    statusSEC_3 = INIT;
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <init_value+0x118>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

    statusMIN_1 = INIT;
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <init_value+0x11c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
    statusMIN_2 = INIT;
 8001d74:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <init_value+0x120>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    statusMIN_3 = INIT;
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <init_value+0x124>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

    statusHOUR_1 = INIT;
 8001d80:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <init_value+0x128>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
    statusHOUR_2 = INIT;
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <init_value+0x12c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    statusHOUR_3 = INIT;
 8001d8c:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <init_value+0x130>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

    statusDAY_1 = INIT;
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <init_value+0x134>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
    statusDAY_2 = INIT;
 8001d98:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <init_value+0x138>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    statusDAY_3 = INIT;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <init_value+0x13c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

    statusDATE_1 = INIT;
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <init_value+0x140>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
    statusDATE_2 = INIT;
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <init_value+0x144>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
    statusDATE_3 = INIT;
 8001db0:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <init_value+0x148>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

    statusMONTH_1 = INIT;
 8001db6:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <init_value+0x14c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
    statusMONTH_2 = INIT;
 8001dbc:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <init_value+0x150>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    statusMONTH_3 = INIT;
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <init_value+0x154>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

    statusYEAR_1 = INIT;
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <init_value+0x158>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    statusYEAR_2 = INIT;
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <init_value+0x15c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    statusYEAR_3 = INIT;
 8001dd4:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <init_value+0x160>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]

    statusHOUR_ALARM_1 = INIT;
 8001dda:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <init_value+0x164>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    statusHOUR_ALARM_2 = INIT;
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <init_value+0x168>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
    statusHOUR_ALARM_3 = INIT;
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <init_value+0x16c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

    statusMIN_ALARM_1 = INIT;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <init_value+0x170>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
    statusMIN_ALARM_2 = INIT;
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <init_value+0x174>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    statusMIN_ALARM_3 = INIT;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <init_value+0x178>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

    counter_blink1 = INIT;
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <init_value+0x17c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
    counter_blink2 = INIT;
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <init_value+0x180>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]

    counter_alert1 = INIT;
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <init_value+0x184>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
    counter_alert2 = INIT;
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <init_value+0x188>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]

    counter_uartAlert = 0;
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <init_value+0x18c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
    counter_TimeOut = 0;
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <init_value+0x190>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
    flag_TimeOut = 0;
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <init_value+0x194>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

    isSendStr = 0;
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <init_value+0x198>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    flag_Error_TimeOut = 0;
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <init_value+0x19c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000019c 	.word	0x2000019c
 8001e44:	200001a0 	.word	0x200001a0
 8001e48:	20000124 	.word	0x20000124
 8001e4c:	20000128 	.word	0x20000128
 8001e50:	2000012c 	.word	0x2000012c
 8001e54:	20000130 	.word	0x20000130
 8001e58:	20000134 	.word	0x20000134
 8001e5c:	20000138 	.word	0x20000138
 8001e60:	2000013c 	.word	0x2000013c
 8001e64:	20000140 	.word	0x20000140
 8001e68:	20000144 	.word	0x20000144
 8001e6c:	20000148 	.word	0x20000148
 8001e70:	2000014c 	.word	0x2000014c
 8001e74:	20000150 	.word	0x20000150
 8001e78:	20000154 	.word	0x20000154
 8001e7c:	20000158 	.word	0x20000158
 8001e80:	2000015c 	.word	0x2000015c
 8001e84:	20000160 	.word	0x20000160
 8001e88:	20000164 	.word	0x20000164
 8001e8c:	20000168 	.word	0x20000168
 8001e90:	2000016c 	.word	0x2000016c
 8001e94:	20000170 	.word	0x20000170
 8001e98:	20000174 	.word	0x20000174
 8001e9c:	20000178 	.word	0x20000178
 8001ea0:	2000017c 	.word	0x2000017c
 8001ea4:	20000184 	.word	0x20000184
 8001ea8:	20000188 	.word	0x20000188
 8001eac:	2000018c 	.word	0x2000018c
 8001eb0:	20000190 	.word	0x20000190
 8001eb4:	20000194 	.word	0x20000194
 8001eb8:	20000198 	.word	0x20000198
 8001ebc:	200001ad 	.word	0x200001ad
 8001ec0:	200001ae 	.word	0x200001ae
 8001ec4:	200001af 	.word	0x200001af
 8001ec8:	200001b0 	.word	0x200001b0
 8001ecc:	200001c1 	.word	0x200001c1
 8001ed0:	200001c0 	.word	0x200001c0
 8001ed4:	200001c8 	.word	0x200001c8
 8001ed8:	200001b4 	.word	0x200001b4
 8001edc:	200001cc 	.word	0x200001cc

08001ee0 <init_counter>:

void init_counter(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
    counterSec = ds3231_sec;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <init_counter+0x48>)
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <init_counter+0x4c>)
 8001eea:	701a      	strb	r2, [r3, #0]
    counterMin = ds3231_min;
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <init_counter+0x50>)
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <init_counter+0x54>)
 8001ef2:	701a      	strb	r2, [r3, #0]
    counterHour = ds3231_hours;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <init_counter+0x58>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <init_counter+0x5c>)
 8001efa:	701a      	strb	r2, [r3, #0]
    counterDay = ds3231_day;
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <init_counter+0x60>)
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <init_counter+0x64>)
 8001f02:	701a      	strb	r2, [r3, #0]
    counterDate = ds3231_date;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <init_counter+0x68>)
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <init_counter+0x6c>)
 8001f0a:	701a      	strb	r2, [r3, #0]
    counterMonth = ds3231_month;
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <init_counter+0x70>)
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <init_counter+0x74>)
 8001f12:	701a      	strb	r2, [r3, #0]
    counterYear = ds3231_year;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <init_counter+0x78>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <init_counter+0x7c>)
 8001f1a:	701a      	strb	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200000c8 	.word	0x200000c8
 8001f2c:	200001a4 	.word	0x200001a4
 8001f30:	200000c7 	.word	0x200000c7
 8001f34:	200001a5 	.word	0x200001a5
 8001f38:	200000c6 	.word	0x200000c6
 8001f3c:	200001a6 	.word	0x200001a6
 8001f40:	200000ca 	.word	0x200000ca
 8001f44:	200001a7 	.word	0x200001a7
 8001f48:	200000c9 	.word	0x200000c9
 8001f4c:	200001a8 	.word	0x200001a8
 8001f50:	200000cb 	.word	0x200000cb
 8001f54:	200001a9 	.word	0x200001a9
 8001f58:	200000cc 	.word	0x200000cc
 8001f5c:	200001aa 	.word	0x200001aa

08001f60 <init_counter_alarm>:

void init_counter_alarm(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
    counterHour_Alarm = ds3231_alarm_hour;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <init_counter_alarm+0x20>)
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <init_counter_alarm+0x24>)
 8001f6a:	701a      	strb	r2, [r3, #0]
    counterMin_Alarm = ds3231_alarm_min;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <init_counter_alarm+0x28>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <init_counter_alarm+0x2c>)
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200000cd 	.word	0x200000cd
 8001f84:	200001ab 	.word	0x200001ab
 8001f88:	200000ce 	.word	0x200000ce
 8001f8c:	200001ac 	.word	0x200001ac

08001f90 <blinky>:

void blinky(int unit)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af04      	add	r7, sp, #16
 8001f96:	6078      	str	r0, [r7, #4]

    counter_blink1 = (counter_blink1 + 1) % 5;
 8001f98:	4b97      	ldr	r3, [pc, #604]	; (80021f8 <blinky+0x268>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	4b97      	ldr	r3, [pc, #604]	; (80021fc <blinky+0x26c>)
 8001fa0:	fb83 1302 	smull	r1, r3, r3, r2
 8001fa4:	1059      	asrs	r1, r3, #1
 8001fa6:	17d3      	asrs	r3, r2, #31
 8001fa8:	1ac9      	subs	r1, r1, r3
 8001faa:	460b      	mov	r3, r1
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	1ad1      	subs	r1, r2, r3
 8001fb2:	b2ca      	uxtb	r2, r1
 8001fb4:	4b90      	ldr	r3, [pc, #576]	; (80021f8 <blinky+0x268>)
 8001fb6:	701a      	strb	r2, [r3, #0]
    counter_blink2 = (counter_blink2 + 1) % 10;
 8001fb8:	4b91      	ldr	r3, [pc, #580]	; (8002200 <blinky+0x270>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	4b8f      	ldr	r3, [pc, #572]	; (80021fc <blinky+0x26c>)
 8001fc0:	fb83 1302 	smull	r1, r3, r3, r2
 8001fc4:	1099      	asrs	r1, r3, #2
 8001fc6:	17d3      	asrs	r3, r2, #31
 8001fc8:	1ac9      	subs	r1, r1, r3
 8001fca:	460b      	mov	r3, r1
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	1ad1      	subs	r1, r2, r3
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <blinky+0x270>)
 8001fd8:	701a      	strb	r2, [r3, #0]
    if (unit == HOUR)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d122      	bne.n	8002026 <blinky+0x96>
    {
        if (counter_blink1 == 0)
 8001fe0:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <blinky+0x268>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10e      	bne.n	8002006 <blinky+0x76>
        {
            lcd_ShowIntNum(70, 100, counterHour, 2, GREEN, BLACK, 24);
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <blinky+0x274>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	2318      	movs	r3, #24
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	2164      	movs	r1, #100	; 0x64
 8002000:	2046      	movs	r0, #70	; 0x46
 8002002:	f000 fedb 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 8002006:	4b7e      	ldr	r3, [pc, #504]	; (8002200 <blinky+0x270>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <blinky+0x96>
        {
            lcd_ShowIntNum(70, 100, 0, 2, BLACK, BLACK, 24);
 800200e:	2318      	movs	r3, #24
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	2300      	movs	r3, #0
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	2300      	movs	r3, #0
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2302      	movs	r3, #2
 800201c:	2200      	movs	r2, #0
 800201e:	2164      	movs	r1, #100	; 0x64
 8002020:	2046      	movs	r0, #70	; 0x46
 8002022:	f000 fecb 	bl	8002dbc <lcd_ShowIntNum>
            // lcd_Clear(BLACK);
        }
    }
    if (unit == MIN)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d122      	bne.n	8002072 <blinky+0xe2>
    {
        if (counter_blink1 == 0)
 800202c:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <blinky+0x268>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10e      	bne.n	8002052 <blinky+0xc2>
        {
            lcd_ShowIntNum(110, 100, counterMin, 2, GREEN, BLACK, 24);
 8002034:	4b74      	ldr	r3, [pc, #464]	; (8002208 <blinky+0x278>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b29a      	uxth	r2, r3
 800203a:	2318      	movs	r3, #24
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	2300      	movs	r3, #0
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2302      	movs	r3, #2
 800204a:	2164      	movs	r1, #100	; 0x64
 800204c:	206e      	movs	r0, #110	; 0x6e
 800204e:	f000 feb5 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 8002052:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <blinky+0x270>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10b      	bne.n	8002072 <blinky+0xe2>
        {
            lcd_ShowIntNum(110, 100, 0, 2, BLACK, BLACK, 24);
 800205a:	2318      	movs	r3, #24
 800205c:	9302      	str	r3, [sp, #8]
 800205e:	2300      	movs	r3, #0
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	2300      	movs	r3, #0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2302      	movs	r3, #2
 8002068:	2200      	movs	r2, #0
 800206a:	2164      	movs	r1, #100	; 0x64
 800206c:	206e      	movs	r0, #110	; 0x6e
 800206e:	f000 fea5 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
    if (unit == SEC)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d122      	bne.n	80020be <blinky+0x12e>
    {
        if (counter_blink1 == 0)
 8002078:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <blinky+0x268>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10e      	bne.n	800209e <blinky+0x10e>
        {
            lcd_ShowIntNum(150, 100, counterSec, 2, GREEN, BLACK, 24);
 8002080:	4b62      	ldr	r3, [pc, #392]	; (800220c <blinky+0x27c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b29a      	uxth	r2, r3
 8002086:	2318      	movs	r3, #24
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	2300      	movs	r3, #0
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2302      	movs	r3, #2
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	2096      	movs	r0, #150	; 0x96
 800209a:	f000 fe8f 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 800209e:	4b58      	ldr	r3, [pc, #352]	; (8002200 <blinky+0x270>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <blinky+0x12e>
        {
            lcd_ShowIntNum(150, 100, 0, 2, BLACK, BLACK, 24);
 80020a6:	2318      	movs	r3, #24
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	2300      	movs	r3, #0
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2302      	movs	r3, #2
 80020b4:	2200      	movs	r2, #0
 80020b6:	2164      	movs	r1, #100	; 0x64
 80020b8:	2096      	movs	r0, #150	; 0x96
 80020ba:	f000 fe7f 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
    if (unit == DAY)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d122      	bne.n	800210a <blinky+0x17a>
    {
        if (counter_blink1 == 0)
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <blinky+0x268>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10e      	bne.n	80020ea <blinky+0x15a>
        {
            lcd_ShowIntNum(20, 130, counterDay, 2, YELLOW, BLACK, 24);
 80020cc:	4b50      	ldr	r3, [pc, #320]	; (8002210 <blinky+0x280>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	2318      	movs	r3, #24
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2302      	movs	r3, #2
 80020e2:	2182      	movs	r1, #130	; 0x82
 80020e4:	2014      	movs	r0, #20
 80020e6:	f000 fe69 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <blinky+0x270>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10b      	bne.n	800210a <blinky+0x17a>
        {
            lcd_ShowIntNum(20, 130, 0, 2, BLACK, BLACK, 24);
 80020f2:	2318      	movs	r3, #24
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	2200      	movs	r2, #0
 8002102:	2182      	movs	r1, #130	; 0x82
 8002104:	2014      	movs	r0, #20
 8002106:	f000 fe59 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
    if (unit == DATE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d122      	bne.n	8002156 <blinky+0x1c6>
    {
        if (counter_blink1 == 0)
 8002110:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <blinky+0x268>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10e      	bne.n	8002136 <blinky+0x1a6>
        {
            lcd_ShowIntNum(70, 130, counterDate, 2, YELLOW, BLACK, 24);
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <blinky+0x284>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b29a      	uxth	r2, r3
 800211e:	2318      	movs	r3, #24
 8002120:	9302      	str	r3, [sp, #8]
 8002122:	2300      	movs	r3, #0
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2302      	movs	r3, #2
 800212e:	2182      	movs	r1, #130	; 0x82
 8002130:	2046      	movs	r0, #70	; 0x46
 8002132:	f000 fe43 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <blinky+0x270>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <blinky+0x1c6>
        {
            lcd_ShowIntNum(70, 130, 0, 2, BLACK, BLACK, 24);
 800213e:	2318      	movs	r3, #24
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2300      	movs	r3, #0
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2302      	movs	r3, #2
 800214c:	2200      	movs	r2, #0
 800214e:	2182      	movs	r1, #130	; 0x82
 8002150:	2046      	movs	r0, #70	; 0x46
 8002152:	f000 fe33 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
    if (unit == MONTH)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b06      	cmp	r3, #6
 800215a:	d122      	bne.n	80021a2 <blinky+0x212>
    {
        if (counter_blink1 == 0)
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <blinky+0x268>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10e      	bne.n	8002182 <blinky+0x1f2>
        {
            lcd_ShowIntNum(110, 130, counterMonth, 2, YELLOW, BLACK, 24);
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <blinky+0x288>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b29a      	uxth	r2, r3
 800216a:	2318      	movs	r3, #24
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	2300      	movs	r3, #0
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2302      	movs	r3, #2
 800217a:	2182      	movs	r1, #130	; 0x82
 800217c:	206e      	movs	r0, #110	; 0x6e
 800217e:	f000 fe1d 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <blinky+0x270>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10b      	bne.n	80021a2 <blinky+0x212>
        {
            lcd_ShowIntNum(110, 130, 0, 2, BLACK, BLACK, 24);
 800218a:	2318      	movs	r3, #24
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2300      	movs	r3, #0
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	2300      	movs	r3, #0
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2302      	movs	r3, #2
 8002198:	2200      	movs	r2, #0
 800219a:	2182      	movs	r1, #130	; 0x82
 800219c:	206e      	movs	r0, #110	; 0x6e
 800219e:	f000 fe0d 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
    if (unit == YEAR)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d122      	bne.n	80021ee <blinky+0x25e>
    {
        if (counter_blink1 == 0)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <blinky+0x268>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10e      	bne.n	80021ce <blinky+0x23e>
        {
            lcd_ShowIntNum(150, 130, counterYear, 2, YELLOW, BLACK, 24);
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <blinky+0x28c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	2318      	movs	r3, #24
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2302      	movs	r3, #2
 80021c6:	2182      	movs	r1, #130	; 0x82
 80021c8:	2096      	movs	r0, #150	; 0x96
 80021ca:	f000 fdf7 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <blinky+0x270>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10b      	bne.n	80021ee <blinky+0x25e>
        {
            lcd_ShowIntNum(150, 130, 0, 2, BLACK, BLACK, 24);
 80021d6:	2318      	movs	r3, #24
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2300      	movs	r3, #0
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2300      	movs	r3, #0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2302      	movs	r3, #2
 80021e4:	2200      	movs	r2, #0
 80021e6:	2182      	movs	r1, #130	; 0x82
 80021e8:	2096      	movs	r0, #150	; 0x96
 80021ea:	f000 fde7 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200001ad 	.word	0x200001ad
 80021fc:	66666667 	.word	0x66666667
 8002200:	200001ae 	.word	0x200001ae
 8002204:	200001a6 	.word	0x200001a6
 8002208:	200001a5 	.word	0x200001a5
 800220c:	200001a4 	.word	0x200001a4
 8002210:	200001a7 	.word	0x200001a7
 8002214:	200001a8 	.word	0x200001a8
 8002218:	200001a9 	.word	0x200001a9
 800221c:	200001aa 	.word	0x200001aa

08002220 <blinkyAlarm>:

void blinkyAlarm(int unit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af04      	add	r7, sp, #16
 8002226:	6078      	str	r0, [r7, #4]
    counter_alert1 = (counter_alert1 + 1) % 5;
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <blinkyAlarm+0xe8>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <blinkyAlarm+0xec>)
 8002230:	fb83 1302 	smull	r1, r3, r3, r2
 8002234:	1059      	asrs	r1, r3, #1
 8002236:	17d3      	asrs	r3, r2, #31
 8002238:	1ac9      	subs	r1, r1, r3
 800223a:	460b      	mov	r3, r1
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	1ad1      	subs	r1, r2, r3
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	4b30      	ldr	r3, [pc, #192]	; (8002308 <blinkyAlarm+0xe8>)
 8002246:	701a      	strb	r2, [r3, #0]
    counter_alert2 = (counter_alert2 + 1) % 10;
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <blinkyAlarm+0xf0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <blinkyAlarm+0xec>)
 8002250:	fb83 1302 	smull	r1, r3, r3, r2
 8002254:	1099      	asrs	r1, r3, #2
 8002256:	17d3      	asrs	r3, r2, #31
 8002258:	1ac9      	subs	r1, r1, r3
 800225a:	460b      	mov	r3, r1
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	1ad1      	subs	r1, r2, r3
 8002264:	b2ca      	uxtb	r2, r1
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <blinkyAlarm+0xf0>)
 8002268:	701a      	strb	r2, [r3, #0]
    if (unit == HOUR_A)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0a      	cmp	r3, #10
 800226e:	d121      	bne.n	80022b4 <blinkyAlarm+0x94>
    {
        if (counter_alert1 == 0)
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <blinkyAlarm+0xe8>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <blinkyAlarm+0x74>
        {
            lcd_ShowIntNum(70, 200, counterHour_Alarm, 2, BLUE, BLACK, 24);
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <blinkyAlarm+0xf4>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b29a      	uxth	r2, r3
 800227e:	2318      	movs	r3, #24
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	231f      	movs	r3, #31
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2302      	movs	r3, #2
 800228c:	21c8      	movs	r1, #200	; 0xc8
 800228e:	2046      	movs	r0, #70	; 0x46
 8002290:	f000 fd94 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_alert2 == 0)
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <blinkyAlarm+0xf0>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10b      	bne.n	80022b4 <blinkyAlarm+0x94>
        {
            lcd_ShowIntNum(70, 200, 0, 2, BLACK, BLACK, 24);
 800229c:	2318      	movs	r3, #24
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2300      	movs	r3, #0
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2302      	movs	r3, #2
 80022aa:	2200      	movs	r2, #0
 80022ac:	21c8      	movs	r1, #200	; 0xc8
 80022ae:	2046      	movs	r0, #70	; 0x46
 80022b0:	f000 fd84 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
    if (unit == MIN_A)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b0b      	cmp	r3, #11
 80022b8:	d121      	bne.n	80022fe <blinkyAlarm+0xde>
    {
        if (counter_alert1 == 0)
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <blinkyAlarm+0xe8>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <blinkyAlarm+0xbe>
        {
            lcd_ShowIntNum(110, 200, counterMin_Alarm, 2, BLUE, BLACK, 24);
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <blinkyAlarm+0xf8>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	2318      	movs	r3, #24
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	231f      	movs	r3, #31
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2302      	movs	r3, #2
 80022d6:	21c8      	movs	r1, #200	; 0xc8
 80022d8:	206e      	movs	r0, #110	; 0x6e
 80022da:	f000 fd6f 	bl	8002dbc <lcd_ShowIntNum>
        }
        if (counter_alert2 == 0)
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <blinkyAlarm+0xf0>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10b      	bne.n	80022fe <blinkyAlarm+0xde>
        {
            lcd_ShowIntNum(110, 200, 0, 2, BLACK, BLACK, 24);
 80022e6:	2318      	movs	r3, #24
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2302      	movs	r3, #2
 80022f4:	2200      	movs	r2, #0
 80022f6:	21c8      	movs	r1, #200	; 0xc8
 80022f8:	206e      	movs	r0, #110	; 0x6e
 80022fa:	f000 fd5f 	bl	8002dbc <lcd_ShowIntNum>
        }
    }
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200001af 	.word	0x200001af
 800230c:	66666667 	.word	0x66666667
 8002310:	200001b0 	.word	0x200001b0
 8002314:	200001ab 	.word	0x200001ab
 8002318:	200001ac 	.word	0x200001ac

0800231c <displayTime>:

void displayTime()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af04      	add	r7, sp, #16
    lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <displayTime+0xe0>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b29a      	uxth	r2, r3
 8002328:	2318      	movs	r3, #24
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	2300      	movs	r3, #0
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2302      	movs	r3, #2
 8002338:	2164      	movs	r1, #100	; 0x64
 800233a:	2046      	movs	r0, #70	; 0x46
 800233c:	f000 fd3e 	bl	8002dbc <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <displayTime+0xe4>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b29a      	uxth	r2, r3
 8002346:	2318      	movs	r3, #24
 8002348:	9302      	str	r3, [sp, #8]
 800234a:	2300      	movs	r3, #0
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2302      	movs	r3, #2
 8002356:	2164      	movs	r1, #100	; 0x64
 8002358:	206e      	movs	r0, #110	; 0x6e
 800235a:	f000 fd2f 	bl	8002dbc <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <displayTime+0xe8>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b29a      	uxth	r2, r3
 8002364:	2318      	movs	r3, #24
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	2300      	movs	r3, #0
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2302      	movs	r3, #2
 8002374:	2164      	movs	r1, #100	; 0x64
 8002376:	2096      	movs	r0, #150	; 0x96
 8002378:	f000 fd20 	bl	8002dbc <lcd_ShowIntNum>
    lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <displayTime+0xec>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b29a      	uxth	r2, r3
 8002382:	2318      	movs	r3, #24
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	2300      	movs	r3, #0
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2302      	movs	r3, #2
 8002392:	2182      	movs	r1, #130	; 0x82
 8002394:	2014      	movs	r0, #20
 8002396:	f000 fd11 	bl	8002dbc <lcd_ShowIntNum>
    lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <displayTime+0xf0>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2318      	movs	r3, #24
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	2300      	movs	r3, #0
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2302      	movs	r3, #2
 80023b0:	2182      	movs	r1, #130	; 0x82
 80023b2:	2046      	movs	r0, #70	; 0x46
 80023b4:	f000 fd02 	bl	8002dbc <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <displayTime+0xf4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	2318      	movs	r3, #24
 80023c0:	9302      	str	r3, [sp, #8]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2302      	movs	r3, #2
 80023ce:	2182      	movs	r1, #130	; 0x82
 80023d0:	206e      	movs	r0, #110	; 0x6e
 80023d2:	f000 fcf3 	bl	8002dbc <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <displayTime+0xf8>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	2318      	movs	r3, #24
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2302      	movs	r3, #2
 80023ec:	2182      	movs	r1, #130	; 0x82
 80023ee:	2096      	movs	r0, #150	; 0x96
 80023f0:	f000 fce4 	bl	8002dbc <lcd_ShowIntNum>
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200000c6 	.word	0x200000c6
 8002400:	200000c7 	.word	0x200000c7
 8002404:	200000c8 	.word	0x200000c8
 8002408:	200000ca 	.word	0x200000ca
 800240c:	200000c9 	.word	0x200000c9
 8002410:	200000cb 	.word	0x200000cb
 8002414:	200000cc 	.word	0x200000cc

08002418 <updateTime>:

void updateTime()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_YEAR, 23);
 800241c:	2117      	movs	r1, #23
 800241e:	2006      	movs	r0, #6
 8002420:	f7fe f928 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MONTH, 10);
 8002424:	210a      	movs	r1, #10
 8002426:	2005      	movs	r0, #5
 8002428:	f7fe f924 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DATE, 15);
 800242c:	210f      	movs	r1, #15
 800242e:	2004      	movs	r0, #4
 8002430:	f7fe f920 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DAY, 6);
 8002434:	2106      	movs	r1, #6
 8002436:	2003      	movs	r0, #3
 8002438:	f7fe f91c 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_HOUR, 15);
 800243c:	210f      	movs	r1, #15
 800243e:	2002      	movs	r0, #2
 8002440:	f7fe f918 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN, 30);
 8002444:	211e      	movs	r1, #30
 8002446:	2001      	movs	r0, #1
 8002448:	f7fe f914 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_SEC, 35);
 800244c:	2123      	movs	r1, #35	; 0x23
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe f910 	bl	8000674 <ds3231_Write>
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <displayAlarm>:

void displayAlarm(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af04      	add	r7, sp, #16
    lcd_ShowIntNum(70, 200, ds3231_alarm_hour, 2, BLUE, BLACK, 24);
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <displayAlarm+0x44>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b29a      	uxth	r2, r3
 8002464:	2318      	movs	r3, #24
 8002466:	9302      	str	r3, [sp, #8]
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	231f      	movs	r3, #31
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2302      	movs	r3, #2
 8002472:	21c8      	movs	r1, #200	; 0xc8
 8002474:	2046      	movs	r0, #70	; 0x46
 8002476:	f000 fca1 	bl	8002dbc <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 200, ds3231_alarm_min, 2, BLUE, BLACK, 24);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <displayAlarm+0x48>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2318      	movs	r3, #24
 8002482:	9302      	str	r3, [sp, #8]
 8002484:	2300      	movs	r3, #0
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	231f      	movs	r3, #31
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2302      	movs	r3, #2
 800248e:	21c8      	movs	r1, #200	; 0xc8
 8002490:	206e      	movs	r0, #110	; 0x6e
 8002492:	f000 fc93 	bl	8002dbc <lcd_ShowIntNum>
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200000cd 	.word	0x200000cd
 80024a0:	200000ce 	.word	0x200000ce

080024a4 <updateAlarm>:

void updateAlarm(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_HOUR_ALARM, 0);
 80024a8:	2100      	movs	r1, #0
 80024aa:	2009      	movs	r0, #9
 80024ac:	f7fe f8e2 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN_ALARM, 0);
 80024b0:	2100      	movs	r1, #0
 80024b2:	2008      	movs	r0, #8
 80024b4:	f7fe f8de 	bl	8000674 <ds3231_Write>
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <alert>:

void alert(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    counter_alert1 = (counter_alert1 + 1) % 5;
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <alert+0x68>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <alert+0x6c>)
 80024c8:	fb83 1302 	smull	r1, r3, r3, r2
 80024cc:	1059      	asrs	r1, r3, #1
 80024ce:	17d3      	asrs	r3, r2, #31
 80024d0:	1ac9      	subs	r1, r1, r3
 80024d2:	460b      	mov	r3, r1
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	1ad1      	subs	r1, r2, r3
 80024da:	b2ca      	uxtb	r2, r1
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <alert+0x68>)
 80024de:	701a      	strb	r2, [r3, #0]
    counter_alert2 = (counter_alert2 + 1) % 10;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <alert+0x70>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <alert+0x6c>)
 80024e8:	fb83 1302 	smull	r1, r3, r3, r2
 80024ec:	1099      	asrs	r1, r3, #2
 80024ee:	17d3      	asrs	r3, r2, #31
 80024f0:	1ac9      	subs	r1, r1, r3
 80024f2:	460b      	mov	r3, r1
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	1ad1      	subs	r1, r2, r3
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <alert+0x70>)
 8002500:	701a      	strb	r2, [r3, #0]
    if (counter_alert1 == 0)
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <alert+0x68>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <alert+0x56>
    {
        lcd_Clear(RED);
 800250a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800250e:	f000 fae1 	bl	8002ad4 <lcd_Clear>
    }
    if (counter_alert2 == 0)
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <alert+0x70>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <alert+0x64>
    {
        lcd_Clear(BLACK);
 800251a:	2000      	movs	r0, #0
 800251c:	f000 fada 	bl	8002ad4 <lcd_Clear>
    }
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200001af 	.word	0x200001af
 8002528:	66666667 	.word	0x66666667
 800252c:	200001b0 	.word	0x200001b0

08002530 <save_ClockSettings>:

void save_ClockSettings(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_YEAR, counterYear);
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <save_ClockSettings+0x5c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	2006      	movs	r0, #6
 800253c:	f7fe f89a 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MONTH, counterMonth);
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <save_ClockSettings+0x60>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	2005      	movs	r0, #5
 8002548:	f7fe f894 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DATE, counterDate);
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <save_ClockSettings+0x64>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	2004      	movs	r0, #4
 8002554:	f7fe f88e 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DAY, counterDay);
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <save_ClockSettings+0x68>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	2003      	movs	r0, #3
 8002560:	f7fe f888 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_SEC, counterSec);
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <save_ClockSettings+0x6c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe f882 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN, counterMin);
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <save_ClockSettings+0x70>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe f87c 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_HOUR, counterHour);
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <save_ClockSettings+0x74>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	2002      	movs	r0, #2
 8002584:	f7fe f876 	bl	8000674 <ds3231_Write>
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	200001aa 	.word	0x200001aa
 8002590:	200001a9 	.word	0x200001a9
 8002594:	200001a8 	.word	0x200001a8
 8002598:	200001a7 	.word	0x200001a7
 800259c:	200001a4 	.word	0x200001a4
 80025a0:	200001a5 	.word	0x200001a5
 80025a4:	200001a6 	.word	0x200001a6

080025a8 <save_AlarmSettings>:

void save_AlarmSettings(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <save_AlarmSettings+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	2009      	movs	r0, #9
 80025b4:	f7fe f85e 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <save_AlarmSettings+0x24>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	2008      	movs	r0, #8
 80025c0:	f7fe f858 	bl	8000674 <ds3231_Write>
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200001ab 	.word	0x200001ab
 80025cc:	200001ac 	.word	0x200001ac

080025d0 <uart_Flag>:

void uart_Flag(char *str)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af04      	add	r7, sp, #16
 80025d6:	6078      	str	r0, [r7, #4]
    counter_TimeOut = (counter_TimeOut + 1) % 200;
 80025d8:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <uart_Flag+0x108>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	4a3f      	ldr	r2, [pc, #252]	; (80026dc <uart_Flag+0x10c>)
 80025e0:	fb82 1203 	smull	r1, r2, r2, r3
 80025e4:	1191      	asrs	r1, r2, #6
 80025e6:	17da      	asrs	r2, r3, #31
 80025e8:	1a8a      	subs	r2, r1, r2
 80025ea:	21c8      	movs	r1, #200	; 0xc8
 80025ec:	fb01 f202 	mul.w	r2, r1, r2
 80025f0:	1a9a      	subs	r2, r3, r2
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <uart_Flag+0x108>)
 80025f6:	701a      	strb	r2, [r3, #0]
    if (counter_TimeOut == 0)
 80025f8:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <uart_Flag+0x108>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <uart_Flag+0x40>
    {
        flag_TimeOut++;
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <uart_Flag+0x110>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	4a36      	ldr	r2, [pc, #216]	; (80026e0 <uart_Flag+0x110>)
 8002608:	6013      	str	r3, [r2, #0]
        uart_Rs232SendString(str);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f001 f9f6 	bl	80039fc <uart_Rs232SendString>
    }
    if (flag_TimeOut == 3)
 8002610:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <uart_Flag+0x110>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d127      	bne.n	8002668 <uart_Flag+0x98>
    {
        counter_uartAlert = (counter_uartAlert + 1) % 60;
 8002618:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <uart_Flag+0x114>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <uart_Flag+0x118>)
 8002620:	fb83 1302 	smull	r1, r3, r3, r2
 8002624:	4413      	add	r3, r2
 8002626:	1159      	asrs	r1, r3, #5
 8002628:	17d3      	asrs	r3, r2, #31
 800262a:	1ac9      	subs	r1, r1, r3
 800262c:	460b      	mov	r3, r1
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a5b      	subs	r3, r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	1ad1      	subs	r1, r2, r3
 8002636:	b2ca      	uxtb	r2, r1
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <uart_Flag+0x114>)
 800263a:	701a      	strb	r2, [r3, #0]
        lcd_StrCenter(0, 270, "ERROR!!!", GREEN, BLACK, 16, 1);
 800263c:	2301      	movs	r3, #1
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2310      	movs	r3, #16
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800264c:	4a27      	ldr	r2, [pc, #156]	; (80026ec <uart_Flag+0x11c>)
 800264e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002652:	2000      	movs	r0, #0
 8002654:	f000 fe18 	bl	8003288 <lcd_StrCenter>
        if (counter_uartAlert == 0)
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <uart_Flag+0x114>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <uart_Flag+0x98>
        {
            flag_Error_TimeOut = 1;
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <uart_Flag+0x120>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]
            return;
 8002666:	e034      	b.n	80026d2 <uart_Flag+0x102>
        }
    }
    if (flag_Invalid == 1)
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <uart_Flag+0x124>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d130      	bne.n	80026d2 <uart_Flag+0x102>
    {
        counter_uartAlert = (counter_uartAlert + 1) % 60;
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <uart_Flag+0x114>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <uart_Flag+0x118>)
 8002678:	fb83 1302 	smull	r1, r3, r3, r2
 800267c:	4413      	add	r3, r2
 800267e:	1159      	asrs	r1, r3, #5
 8002680:	17d3      	asrs	r3, r2, #31
 8002682:	1ac9      	subs	r1, r1, r3
 8002684:	460b      	mov	r3, r1
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a5b      	subs	r3, r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	1ad1      	subs	r1, r2, r3
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <uart_Flag+0x114>)
 8002692:	701a      	strb	r2, [r3, #0]
        lcd_StrCenter(0, 270, "INVALID", GREEN, BLACK, 16, 1);
 8002694:	2301      	movs	r3, #1
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	2310      	movs	r3, #16
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	2300      	movs	r3, #0
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80026a4:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <uart_Flag+0x128>)
 80026a6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 fdec 	bl	8003288 <lcd_StrCenter>
        if (counter_uartAlert == 0)
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <uart_Flag+0x114>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10c      	bne.n	80026d2 <uart_Flag+0x102>
        {
            lcd_Fill(0, 270, 240, 290, BLACK);
 80026b8:	2300      	movs	r3, #0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	f44f 7391 	mov.w	r3, #290	; 0x122
 80026c0:	22f0      	movs	r2, #240	; 0xf0
 80026c2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80026c6:	2000      	movs	r0, #0
 80026c8:	f000 fa3e 	bl	8002b48 <lcd_Fill>
            flag_Invalid = 0;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <uart_Flag+0x124>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
        }
    }
}
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200001c0 	.word	0x200001c0
 80026dc:	51eb851f 	.word	0x51eb851f
 80026e0:	200001c8 	.word	0x200001c8
 80026e4:	200001c1 	.word	0x200001c1
 80026e8:	88888889 	.word	0x88888889
 80026ec:	0800935c 	.word	0x0800935c
 80026f0:	200001cc 	.word	0x200001cc
 80026f4:	200001c4 	.word	0x200001c4
 80026f8:	08009368 	.word	0x08009368

080026fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a67      	ldr	r2, [pc, #412]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a60      	ldr	r2, [pc, #384]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a59      	ldr	r2, [pc, #356]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a4b      	ldr	r2, [pc, #300]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 80027a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4b45      	ldr	r3, [pc, #276]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a44      	ldr	r2, [pc, #272]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <MX_GPIO_Init+0x1d8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2170      	movs	r1, #112	; 0x70
 80027da:	483f      	ldr	r0, [pc, #252]	; (80028d8 <MX_GPIO_Init+0x1dc>)
 80027dc:	f001 ff74 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80027e0:	2200      	movs	r2, #0
 80027e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027e6:	483d      	ldr	r0, [pc, #244]	; (80028dc <MX_GPIO_Init+0x1e0>)
 80027e8:	f001 ff6e 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2140      	movs	r1, #64	; 0x40
 80027f0:	483b      	ldr	r0, [pc, #236]	; (80028e0 <MX_GPIO_Init+0x1e4>)
 80027f2:	f001 ff69 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80027f6:	2200      	movs	r2, #0
 80027f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fc:	4839      	ldr	r0, [pc, #228]	; (80028e4 <MX_GPIO_Init+0x1e8>)
 80027fe:	f001 ff63 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	2108      	movs	r1, #8
 8002806:	4838      	ldr	r0, [pc, #224]	; (80028e8 <MX_GPIO_Init+0x1ec>)
 8002808:	f001 ff5e 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800280c:	2370      	movs	r3, #112	; 0x70
 800280e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002810:	2301      	movs	r3, #1
 8002812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	482d      	ldr	r0, [pc, #180]	; (80028d8 <MX_GPIO_Init+0x1dc>)
 8002824:	f001 fdb4 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8002828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4826      	ldr	r0, [pc, #152]	; (80028dc <MX_GPIO_Init+0x1e0>)
 8002842:	f001 fda5 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8002846:	23c0      	movs	r3, #192	; 0xc0
 8002848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4822      	ldr	r0, [pc, #136]	; (80028e4 <MX_GPIO_Init+0x1e8>)
 800285a:	f001 fd99 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800285e:	2330      	movs	r3, #48	; 0x30
 8002860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	481a      	ldr	r0, [pc, #104]	; (80028dc <MX_GPIO_Init+0x1e0>)
 8002872:	f001 fd8d 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8002876:	2340      	movs	r3, #64	; 0x40
 8002878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	4814      	ldr	r0, [pc, #80]	; (80028e0 <MX_GPIO_Init+0x1e4>)
 800288e:	f001 fd7f 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	4619      	mov	r1, r3
 80028aa:	480e      	ldr	r0, [pc, #56]	; (80028e4 <MX_GPIO_Init+0x1e8>)
 80028ac:	f001 fd70 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80028b0:	2308      	movs	r3, #8
 80028b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	4808      	ldr	r0, [pc, #32]	; (80028e8 <MX_GPIO_Init+0x1ec>)
 80028c8:	f001 fd62 	bl	8004390 <HAL_GPIO_Init>

}
 80028cc:	bf00      	nop
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40021800 	.word	0x40021800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020c00 	.word	0x40020c00

080028ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_I2C1_Init+0x50>)
 80028f2:	4a13      	ldr	r2, [pc, #76]	; (8002940 <MX_I2C1_Init+0x54>)
 80028f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_I2C1_Init+0x50>)
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <MX_I2C1_Init+0x58>)
 80028fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_I2C1_Init+0x50>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_I2C1_Init+0x50>)
 8002904:	2200      	movs	r2, #0
 8002906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_I2C1_Init+0x50>)
 800290a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800290e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <MX_I2C1_Init+0x50>)
 8002912:	2200      	movs	r2, #0
 8002914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_I2C1_Init+0x50>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <MX_I2C1_Init+0x50>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_I2C1_Init+0x50>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <MX_I2C1_Init+0x50>)
 800292a:	f001 ff01 	bl	8004730 <HAL_I2C_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002934:	f000 fe60 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200001f4 	.word	0x200001f4
 8002940:	40005400 	.word	0x40005400
 8002944:	000186a0 	.word	0x000186a0

08002948 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_I2C_MspInit+0x84>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d12b      	bne.n	80029c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_I2C_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_I2C_MspInit+0x88>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_I2C_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002996:	2304      	movs	r3, #4
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <HAL_I2C_MspInit+0x8c>)
 80029a2:	f001 fcf5 	bl	8004390 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_I2C_MspInit+0x88>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_I2C_MspInit+0x88>)
 80029b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_I2C_MspInit+0x88>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40005400 	.word	0x40005400
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020400 	.word	0x40020400

080029d8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <LCD_WR_REG+0x1c>)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	8013      	strh	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	600ffffe 	.word	0x600ffffe

080029f8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8002a02:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <LCD_WR_DATA+0x1c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	8053      	strh	r3, [r2, #2]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	600ffffe 	.word	0x600ffffe

08002a18 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <LCD_RD_DATA+0x20>)
 8002a20:	885b      	ldrh	r3, [r3, #2]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	b29b      	uxth	r3, r3
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	600ffffe 	.word	0x600ffffe

08002a3c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4604      	mov	r4, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	80fb      	strh	r3, [r7, #6]
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80bb      	strh	r3, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	807b      	strh	r3, [r7, #2]
 8002a56:	4613      	mov	r3, r2
 8002a58:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002a5a:	202a      	movs	r0, #42	; 0x2a
 8002a5c:	f7ff ffbc 	bl	80029d8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ffc6 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ffc0 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ffba 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ffb4 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8002a90:	202b      	movs	r0, #43	; 0x2b
 8002a92:	f7ff ffa1 	bl	80029d8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002a96:	88bb      	ldrh	r3, [r7, #4]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ffab 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8002aa2:	88bb      	ldrh	r3, [r7, #4]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ffa5 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8002aae:	883b      	ldrh	r3, [r7, #0]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff9f 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002aba:	883b      	ldrh	r3, [r7, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff99 	bl	80029f8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002ac6:	202c      	movs	r0, #44	; 0x2c
 8002ac8:	f7ff ff86 	bl	80029d8 <LCD_WR_REG>
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd90      	pop	{r4, r7, pc}

08002ad4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <lcd_Clear+0x70>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <lcd_Clear+0x70>)
 8002af8:	885b      	ldrh	r3, [r3, #2]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2100      	movs	r1, #0
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff ff9b 	bl	8002a3c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	81fb      	strh	r3, [r7, #14]
 8002b0a:	e011      	b.n	8002b30 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	81bb      	strh	r3, [r7, #12]
 8002b10:	e006      	b.n	8002b20 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff6f 	bl	80029f8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8002b1a:	89bb      	ldrh	r3, [r7, #12]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	81bb      	strh	r3, [r7, #12]
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <lcd_Clear+0x70>)
 8002b22:	885b      	ldrh	r3, [r3, #2]
 8002b24:	89ba      	ldrh	r2, [r7, #12]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3f3      	bcc.n	8002b12 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	81fb      	strh	r3, [r7, #14]
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <lcd_Clear+0x70>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	89fa      	ldrh	r2, [r7, #14]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3e8      	bcc.n	8002b0c <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000248 	.word	0x20000248

08002b48 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	80fb      	strh	r3, [r7, #6]
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80bb      	strh	r3, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	807b      	strh	r3, [r7, #2]
 8002b62:	4613      	mov	r3, r2
 8002b64:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	883b      	ldrh	r3, [r7, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	88b9      	ldrh	r1, [r7, #4]
 8002b74:	88f8      	ldrh	r0, [r7, #6]
 8002b76:	f7ff ff61 	bl	8002a3c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002b7a:	88bb      	ldrh	r3, [r7, #4]
 8002b7c:	81fb      	strh	r3, [r7, #14]
 8002b7e:	e010      	b.n	8002ba2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	81bb      	strh	r3, [r7, #12]
 8002b84:	e006      	b.n	8002b94 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002b86:	8c3b      	ldrh	r3, [r7, #32]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff35 	bl	80029f8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8002b8e:	89bb      	ldrh	r3, [r7, #12]
 8002b90:	3301      	adds	r3, #1
 8002b92:	81bb      	strh	r3, [r7, #12]
 8002b94:	89ba      	ldrh	r2, [r7, #12]
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3f4      	bcc.n	8002b86 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002b9c:	89fb      	ldrh	r3, [r7, #14]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	81fb      	strh	r3, [r7, #14]
 8002ba2:	89fa      	ldrh	r2, [r7, #14]
 8002ba4:	883b      	ldrh	r3, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3ea      	bcc.n	8002b80 <lcd_Fill+0x38>
		}
	}
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}

08002bb4 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	80bb      	strh	r3, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	88b9      	ldrh	r1, [r7, #4]
 8002bcc:	88f8      	ldrh	r0, [r7, #6]
 8002bce:	f7ff ff35 	bl	8002a3c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff0f 	bl	80029f8 <LCD_WR_DATA>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4604      	mov	r4, r0
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	80fb      	strh	r3, [r7, #6]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80bb      	strh	r3, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	70fb      	strb	r3, [r7, #3]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	fb12 f303 	smulbb	r3, r2, r3
 8002c3a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	3b20      	subs	r3, #32
 8002c40:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	4413      	add	r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29c      	uxth	r4, r3
 8002c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	88bb      	ldrh	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	88b9      	ldrh	r1, [r7, #4]
 8002c62:	88f8      	ldrh	r0, [r7, #6]
 8002c64:	4622      	mov	r2, r4
 8002c66:	f7ff fee9 	bl	8002a3c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	827b      	strh	r3, [r7, #18]
 8002c6e:	e07a      	b.n	8002d66 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002c70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d028      	beq.n	8002cca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8002c78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d108      	bne.n	8002c92 <lcd_ShowChar+0xae>
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	8a7b      	ldrh	r3, [r7, #18]
 8002c84:	493c      	ldr	r1, [pc, #240]	; (8002d78 <lcd_ShowChar+0x194>)
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	440a      	add	r2, r1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	75fb      	strb	r3, [r7, #23]
 8002c90:	e01b      	b.n	8002cca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8002c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c96:	2b18      	cmp	r3, #24
 8002c98:	d10b      	bne.n	8002cb2 <lcd_ShowChar+0xce>
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	8a79      	ldrh	r1, [r7, #18]
 8002c9e:	4837      	ldr	r0, [pc, #220]	; (8002d7c <lcd_ShowChar+0x198>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	4403      	add	r3, r0
 8002caa:	440b      	add	r3, r1
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	75fb      	strb	r3, [r7, #23]
 8002cb0:	e00b      	b.n	8002cca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8002cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d15a      	bne.n	8002d70 <lcd_ShowChar+0x18c>
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	8a7b      	ldrh	r3, [r7, #18]
 8002cbe:	4930      	ldr	r1, [pc, #192]	; (8002d80 <lcd_ShowChar+0x19c>)
 8002cc0:	0192      	lsls	r2, r2, #6
 8002cc2:	440a      	add	r2, r1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75bb      	strb	r3, [r7, #22]
 8002cce:	e044      	b.n	8002d5a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002cd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d120      	bne.n	8002d1a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002cd8:	7dfa      	ldrb	r2, [r7, #23]
 8002cda:	7dbb      	ldrb	r3, [r7, #22]
 8002cdc:	fa42 f303 	asr.w	r3, r2, r3
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <lcd_ShowChar+0x10e>
 8002ce8:	883b      	ldrh	r3, [r7, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fe84 	bl	80029f8 <LCD_WR_DATA>
 8002cf0:	e003      	b.n	8002cfa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fe7f 	bl	80029f8 <LCD_WR_DATA>
				m++;
 8002cfa:	7d7b      	ldrb	r3, [r7, #21]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002d00:	7d7b      	ldrb	r3, [r7, #21]
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d08:	fb01 f202 	mul.w	r2, r1, r2
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11f      	bne.n	8002d54 <lcd_ShowChar+0x170>
				{
					m=0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	757b      	strb	r3, [r7, #21]
					break;
 8002d18:	e022      	b.n	8002d60 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002d1a:	7dfa      	ldrb	r2, [r7, #23]
 8002d1c:	7dbb      	ldrb	r3, [r7, #22]
 8002d1e:	fa42 f303 	asr.w	r3, r2, r3
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <lcd_ShowChar+0x152>
 8002d2a:	883a      	ldrh	r2, [r7, #0]
 8002d2c:	88b9      	ldrh	r1, [r7, #4]
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff3f 	bl	8002bb4 <lcd_DrawPoint>
				x++;
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	8a3b      	ldrh	r3, [r7, #16]
 8002d40:	1ad2      	subs	r2, r2, r3
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d105      	bne.n	8002d54 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002d48:	8a3b      	ldrh	r3, [r7, #16]
 8002d4a:	80fb      	strh	r3, [r7, #6]
					y++;
 8002d4c:	88bb      	ldrh	r3, [r7, #4]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	80bb      	strh	r3, [r7, #4]
					break;
 8002d52:	e005      	b.n	8002d60 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002d54:	7dbb      	ldrb	r3, [r7, #22]
 8002d56:	3301      	adds	r3, #1
 8002d58:	75bb      	strb	r3, [r7, #22]
 8002d5a:	7dbb      	ldrb	r3, [r7, #22]
 8002d5c:	2b07      	cmp	r3, #7
 8002d5e:	d9b7      	bls.n	8002cd0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002d60:	8a7b      	ldrh	r3, [r7, #18]
 8002d62:	3301      	adds	r3, #1
 8002d64:	827b      	strh	r3, [r7, #18]
 8002d66:	8a7a      	ldrh	r2, [r7, #18]
 8002d68:	89bb      	ldrh	r3, [r7, #12]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d380      	bcc.n	8002c70 <lcd_ShowChar+0x8c>
 8002d6e:	e000      	b.n	8002d72 <lcd_ShowChar+0x18e>
		else return;
 8002d70:	bf00      	nop
				}
			}
		}
	}
}
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd90      	pop	{r4, r7, pc}
 8002d78:	08009398 	.word	0x08009398
 8002d7c:	08009988 	.word	0x08009988
 8002d80:	0800ab58 	.word	0x0800ab58

08002d84 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	71fb      	strb	r3, [r7, #7]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002d94:	2301      	movs	r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002d98:	e004      	b.n	8002da4 <mypow+0x20>
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	79bb      	ldrb	r3, [r7, #6]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	71ba      	strb	r2, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f5      	bne.n	8002d9a <mypow+0x16>
	return result;
 8002dae:	68fb      	ldr	r3, [r7, #12]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4623      	mov	r3, r4
 8002dcc:	80fb      	strh	r3, [r7, #6]
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80bb      	strh	r3, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	807b      	strh	r3, [r7, #2]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002dde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e059      	b.n	8002ea0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002dec:	887c      	ldrh	r4, [r7, #2]
 8002dee:	787a      	ldrb	r2, [r7, #1]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	200a      	movs	r0, #10
 8002dfe:	f7ff ffc1 	bl	8002d84 <mypow>
 8002e02:	4603      	mov	r3, r0
 8002e04:	fbb4 f1f3 	udiv	r1, r4, r3
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <lcd_ShowIntNum+0xf8>)
 8002e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	1aca      	subs	r2, r1, r3
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d121      	bne.n	8002e68 <lcd_ShowIntNum+0xac>
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	787b      	ldrb	r3, [r7, #1]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	da1c      	bge.n	8002e68 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d117      	bne.n	8002e64 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	7b7b      	ldrb	r3, [r7, #13]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	fb12 f303 	smulbb	r3, r2, r3
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	4413      	add	r3, r2
 8002e46:	b298      	uxth	r0, r3
 8002e48:	8c3a      	ldrh	r2, [r7, #32]
 8002e4a:	88b9      	ldrh	r1, [r7, #4]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f7ff fec1 	bl	8002be4 <lcd_ShowChar>
				continue;
 8002e62:	e01a      	b.n	8002e9a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	7b7b      	ldrb	r3, [r7, #13]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	fb12 f303 	smulbb	r3, r2, r3
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4413      	add	r3, r2
 8002e7a:	b298      	uxth	r0, r3
 8002e7c:	7b3b      	ldrb	r3, [r7, #12]
 8002e7e:	3330      	adds	r3, #48	; 0x30
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	8c3c      	ldrh	r4, [r7, #32]
 8002e84:	88b9      	ldrh	r1, [r7, #4]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4623      	mov	r3, r4
 8002e96:	f7ff fea5 	bl	8002be4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	787b      	ldrb	r3, [r7, #1]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d3a1      	bcc.n	8002dec <lcd_ShowIntNum+0x30>
	}
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	cccccccd 	.word	0xcccccccd

08002eb8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <lcd_SetDir+0x44>)
 8002ed4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ed8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <lcd_SetDir+0x44>)
 8002edc:	22f0      	movs	r2, #240	; 0xf0
 8002ede:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002ee0:	e006      	b.n	8002ef0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <lcd_SetDir+0x44>)
 8002ee4:	22f0      	movs	r2, #240	; 0xf0
 8002ee6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <lcd_SetDir+0x44>)
 8002eea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002eee:	805a      	strh	r2, [r3, #2]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	20000248 	.word	0x20000248

08002f00 <lcd_init>:


void lcd_init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002f04:	2200      	movs	r2, #0
 8002f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f0a:	48aa      	ldr	r0, [pc, #680]	; (80031b4 <lcd_init+0x2b4>)
 8002f0c:	f001 fbdc 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f14:	f001 f874 	bl	8004000 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f1e:	48a5      	ldr	r0, [pc, #660]	; (80031b4 <lcd_init+0x2b4>)
 8002f20:	f001 fbd2 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f28:	f001 f86a 	bl	8004000 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7ff ffc3 	bl	8002eb8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002f32:	20d3      	movs	r0, #211	; 0xd3
 8002f34:	f7ff fd50 	bl	80029d8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002f38:	f7ff fd6e 	bl	8002a18 <LCD_RD_DATA>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b9d      	ldr	r3, [pc, #628]	; (80031b8 <lcd_init+0x2b8>)
 8002f42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002f44:	f7ff fd68 	bl	8002a18 <LCD_RD_DATA>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b9a      	ldr	r3, [pc, #616]	; (80031b8 <lcd_init+0x2b8>)
 8002f4e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002f50:	f7ff fd62 	bl	8002a18 <LCD_RD_DATA>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b97      	ldr	r3, [pc, #604]	; (80031b8 <lcd_init+0x2b8>)
 8002f5a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002f5c:	4b96      	ldr	r3, [pc, #600]	; (80031b8 <lcd_init+0x2b8>)
 8002f5e:	889b      	ldrh	r3, [r3, #4]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b94      	ldr	r3, [pc, #592]	; (80031b8 <lcd_init+0x2b8>)
 8002f66:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002f68:	f7ff fd56 	bl	8002a18 <LCD_RD_DATA>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b91      	ldr	r3, [pc, #580]	; (80031b8 <lcd_init+0x2b8>)
 8002f72:	889b      	ldrh	r3, [r3, #4]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <lcd_init+0x2b8>)
 8002f7a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002f7c:	20cf      	movs	r0, #207	; 0xcf
 8002f7e:	f7ff fd2b 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff fd38 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002f88:	20c1      	movs	r0, #193	; 0xc1
 8002f8a:	f7ff fd35 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002f8e:	2030      	movs	r0, #48	; 0x30
 8002f90:	f7ff fd32 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002f94:	20ed      	movs	r0, #237	; 0xed
 8002f96:	f7ff fd1f 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002f9a:	2064      	movs	r0, #100	; 0x64
 8002f9c:	f7ff fd2c 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	f7ff fd29 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002fa6:	2012      	movs	r0, #18
 8002fa8:	f7ff fd26 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002fac:	2081      	movs	r0, #129	; 0x81
 8002fae:	f7ff fd23 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002fb2:	20e8      	movs	r0, #232	; 0xe8
 8002fb4:	f7ff fd10 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002fb8:	2085      	movs	r0, #133	; 0x85
 8002fba:	f7ff fd1d 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002fbe:	2010      	movs	r0, #16
 8002fc0:	f7ff fd1a 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002fc4:	207a      	movs	r0, #122	; 0x7a
 8002fc6:	f7ff fd17 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002fca:	20cb      	movs	r0, #203	; 0xcb
 8002fcc:	f7ff fd04 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002fd0:	2039      	movs	r0, #57	; 0x39
 8002fd2:	f7ff fd11 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002fd6:	202c      	movs	r0, #44	; 0x2c
 8002fd8:	f7ff fd0e 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7ff fd0b 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002fe2:	2034      	movs	r0, #52	; 0x34
 8002fe4:	f7ff fd08 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f7ff fd05 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002fee:	20f7      	movs	r0, #247	; 0xf7
 8002ff0:	f7ff fcf2 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002ff4:	2020      	movs	r0, #32
 8002ff6:	f7ff fcff 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002ffa:	20ea      	movs	r0, #234	; 0xea
 8002ffc:	f7ff fcec 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7ff fcf9 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f7ff fcf6 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800300c:	20c0      	movs	r0, #192	; 0xc0
 800300e:	f7ff fce3 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8003012:	201b      	movs	r0, #27
 8003014:	f7ff fcf0 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8003018:	20c1      	movs	r0, #193	; 0xc1
 800301a:	f7ff fcdd 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800301e:	2001      	movs	r0, #1
 8003020:	f7ff fcea 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8003024:	20c5      	movs	r0, #197	; 0xc5
 8003026:	f7ff fcd7 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800302a:	2030      	movs	r0, #48	; 0x30
 800302c:	f7ff fce4 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8003030:	2030      	movs	r0, #48	; 0x30
 8003032:	f7ff fce1 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8003036:	20c7      	movs	r0, #199	; 0xc7
 8003038:	f7ff fcce 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800303c:	20b7      	movs	r0, #183	; 0xb7
 800303e:	f7ff fcdb 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8003042:	2036      	movs	r0, #54	; 0x36
 8003044:	f7ff fcc8 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8003048:	2008      	movs	r0, #8
 800304a:	f7ff fcd5 	bl	80029f8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800304e:	203a      	movs	r0, #58	; 0x3a
 8003050:	f7ff fcc2 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8003054:	2055      	movs	r0, #85	; 0x55
 8003056:	f7ff fccf 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800305a:	20b1      	movs	r0, #177	; 0xb1
 800305c:	f7ff fcbc 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003060:	2000      	movs	r0, #0
 8003062:	f7ff fcc9 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8003066:	201a      	movs	r0, #26
 8003068:	f7ff fcc6 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800306c:	20b6      	movs	r0, #182	; 0xb6
 800306e:	f7ff fcb3 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8003072:	200a      	movs	r0, #10
 8003074:	f7ff fcc0 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8003078:	20a2      	movs	r0, #162	; 0xa2
 800307a:	f7ff fcbd 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800307e:	20f2      	movs	r0, #242	; 0xf2
 8003080:	f7ff fcaa 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003084:	2000      	movs	r0, #0
 8003086:	f7ff fcb7 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800308a:	2026      	movs	r0, #38	; 0x26
 800308c:	f7ff fca4 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8003090:	2001      	movs	r0, #1
 8003092:	f7ff fcb1 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8003096:	20e0      	movs	r0, #224	; 0xe0
 8003098:	f7ff fc9e 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800309c:	200f      	movs	r0, #15
 800309e:	f7ff fcab 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80030a2:	202a      	movs	r0, #42	; 0x2a
 80030a4:	f7ff fca8 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80030a8:	2028      	movs	r0, #40	; 0x28
 80030aa:	f7ff fca5 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80030ae:	2008      	movs	r0, #8
 80030b0:	f7ff fca2 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80030b4:	200e      	movs	r0, #14
 80030b6:	f7ff fc9f 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80030ba:	2008      	movs	r0, #8
 80030bc:	f7ff fc9c 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80030c0:	2054      	movs	r0, #84	; 0x54
 80030c2:	f7ff fc99 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80030c6:	20a9      	movs	r0, #169	; 0xa9
 80030c8:	f7ff fc96 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80030cc:	2043      	movs	r0, #67	; 0x43
 80030ce:	f7ff fc93 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80030d2:	200a      	movs	r0, #10
 80030d4:	f7ff fc90 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80030d8:	200f      	movs	r0, #15
 80030da:	f7ff fc8d 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7ff fc8a 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7ff fc87 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7ff fc84 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7ff fc81 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80030f6:	20e1      	movs	r0, #225	; 0xe1
 80030f8:	f7ff fc6e 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7ff fc7b 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8003102:	2015      	movs	r0, #21
 8003104:	f7ff fc78 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8003108:	2017      	movs	r0, #23
 800310a:	f7ff fc75 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800310e:	2007      	movs	r0, #7
 8003110:	f7ff fc72 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8003114:	2011      	movs	r0, #17
 8003116:	f7ff fc6f 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800311a:	2006      	movs	r0, #6
 800311c:	f7ff fc6c 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8003120:	202b      	movs	r0, #43	; 0x2b
 8003122:	f7ff fc69 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8003126:	2056      	movs	r0, #86	; 0x56
 8003128:	f7ff fc66 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800312c:	203c      	movs	r0, #60	; 0x3c
 800312e:	f7ff fc63 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8003132:	2005      	movs	r0, #5
 8003134:	f7ff fc60 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8003138:	2010      	movs	r0, #16
 800313a:	f7ff fc5d 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800313e:	200f      	movs	r0, #15
 8003140:	f7ff fc5a 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003144:	203f      	movs	r0, #63	; 0x3f
 8003146:	f7ff fc57 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800314a:	203f      	movs	r0, #63	; 0x3f
 800314c:	f7ff fc54 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8003150:	200f      	movs	r0, #15
 8003152:	f7ff fc51 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8003156:	202b      	movs	r0, #43	; 0x2b
 8003158:	f7ff fc3e 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7ff fc4b 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003162:	2000      	movs	r0, #0
 8003164:	f7ff fc48 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff fc45 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800316e:	203f      	movs	r0, #63	; 0x3f
 8003170:	f7ff fc42 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8003174:	202a      	movs	r0, #42	; 0x2a
 8003176:	f7ff fc2f 	bl	80029d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff fc3c 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff fc39 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f7ff fc36 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800318c:	20ef      	movs	r0, #239	; 0xef
 800318e:	f7ff fc33 	bl	80029f8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8003192:	2011      	movs	r0, #17
 8003194:	f7ff fc20 	bl	80029d8 <LCD_WR_REG>
	HAL_Delay(120);
 8003198:	2078      	movs	r0, #120	; 0x78
 800319a:	f000 ff31 	bl	8004000 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800319e:	2029      	movs	r0, #41	; 0x29
 80031a0:	f7ff fc1a 	bl	80029d8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80031a4:	2201      	movs	r2, #1
 80031a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031aa:	4804      	ldr	r0, [pc, #16]	; (80031bc <lcd_init+0x2bc>)
 80031ac:	f001 fa8c 	bl	80046c8 <HAL_GPIO_WritePin>
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40020800 	.word	0x40020800
 80031b8:	20000248 	.word	0x20000248
 80031bc:	40020000 	.word	0x40020000

080031c0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b08b      	sub	sp, #44	; 0x2c
 80031c4:	af04      	add	r7, sp, #16
 80031c6:	60ba      	str	r2, [r7, #8]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	81fb      	strh	r3, [r7, #14]
 80031ce:	460b      	mov	r3, r1
 80031d0:	81bb      	strh	r3, [r7, #12]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80031de:	e048      	b.n	8003272 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d145      	bne.n	8003272 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80031e6:	89fa      	ldrh	r2, [r7, #14]
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <lcd_ShowStr+0xc4>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	1acb      	subs	r3, r1, r3
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dc3f      	bgt.n	800327c <lcd_ShowStr+0xbc>
 80031fc:	89ba      	ldrh	r2, [r7, #12]
 80031fe:	4b21      	ldr	r3, [pc, #132]	; (8003284 <lcd_ShowStr+0xc4>)
 8003200:	885b      	ldrh	r3, [r3, #2]
 8003202:	4619      	mov	r1, r3
 8003204:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003208:	1acb      	subs	r3, r1, r3
 800320a:	429a      	cmp	r2, r3
 800320c:	dc36      	bgt.n	800327c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b80      	cmp	r3, #128	; 0x80
 8003214:	d902      	bls.n	800321c <lcd_ShowStr+0x5c>
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
 800321a:	e02a      	b.n	8003272 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b0d      	cmp	r3, #13
 8003222:	d10b      	bne.n	800323c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8003224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003228:	b29a      	uxth	r2, r3
 800322a:	89bb      	ldrh	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8003230:	8abb      	ldrh	r3, [r7, #20]
 8003232:	81fb      	strh	r3, [r7, #14]
					str++;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	e017      	b.n	800326c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	88fc      	ldrh	r4, [r7, #6]
 8003242:	89b9      	ldrh	r1, [r7, #12]
 8003244:	89f8      	ldrh	r0, [r7, #14]
 8003246:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800324a:	9302      	str	r3, [sp, #8]
 800324c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4623      	mov	r3, r4
 8003258:	f7ff fcc4 	bl	8002be4 <lcd_ShowChar>
					x+=sizey/2;
 800325c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	b29a      	uxth	r2, r3
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	4413      	add	r3, r2
 800326a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3301      	adds	r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1b2      	bne.n	80031e0 <lcd_ShowStr+0x20>
 800327a:	e000      	b.n	800327e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800327c:	bf00      	nop
			}
		}
	}
}
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	20000248 	.word	0x20000248

08003288 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af04      	add	r7, sp, #16
 800328e:	60ba      	str	r2, [r7, #8]
 8003290:	461a      	mov	r2, r3
 8003292:	4603      	mov	r3, r0
 8003294:	81fb      	strh	r3, [r7, #14]
 8003296:	460b      	mov	r3, r1
 8003298:	81bb      	strh	r3, [r7, #12]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800329e:	68b8      	ldr	r0, [r7, #8]
 80032a0:	f7fc ff96 	bl	80001d0 <strlen>
 80032a4:	4603      	mov	r3, r0
 80032a6:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <lcd_StrCenter+0x60>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	8afb      	ldrh	r3, [r7, #22]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	0fda      	lsrs	r2, r3, #31
 80032b6:	4413      	add	r3, r2
 80032b8:	105b      	asrs	r3, r3, #1
 80032ba:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80032bc:	89fa      	ldrh	r2, [r7, #14]
 80032be:	8abb      	ldrh	r3, [r7, #20]
 80032c0:	4413      	add	r3, r2
 80032c2:	b298      	uxth	r0, r3
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	89b9      	ldrh	r1, [r7, #12]
 80032c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032cc:	9302      	str	r3, [sp, #8]
 80032ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	8c3b      	ldrh	r3, [r7, #32]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f7ff ff70 	bl	80031c0 <lcd_ShowStr>
}
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000248 	.word	0x20000248

080032ec <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80032f0:	2201      	movs	r2, #1
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <led7_init+0x14>)
 80032f6:	f001 f9e7 	bl	80046c8 <HAL_GPIO_WritePin>
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40021800 	.word	0x40021800

08003304 <led7_Scan>:

void led7_Scan(){
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8003308:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <led7_Scan+0x104>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	b29a      	uxth	r2, r3
 8003310:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <led7_Scan+0x104>)
 8003312:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8003314:	4b3d      	ldr	r3, [pc, #244]	; (800340c <led7_Scan+0x108>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <led7_Scan+0x10c>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	b21a      	sxth	r2, r3
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <led7_Scan+0x104>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b21b      	sxth	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	b21b      	sxth	r3, r3
 800332a:	b29a      	uxth	r2, r3
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <led7_Scan+0x104>)
 800332e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8003330:	4b36      	ldr	r3, [pc, #216]	; (800340c <led7_Scan+0x108>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d847      	bhi.n	80033c8 <led7_Scan+0xc4>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <led7_Scan+0x3c>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003351 	.word	0x08003351
 8003344:	0800336f 	.word	0x0800336f
 8003348:	0800338d 	.word	0x0800338d
 800334c:	080033ab 	.word	0x080033ab
	case 0:
		spi_buffer |= 0x00b0;
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <led7_Scan+0x104>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <led7_Scan+0x104>)
 800335c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <led7_Scan+0x104>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <led7_Scan+0x104>)
 800336a:	801a      	strh	r2, [r3, #0]
		break;
 800336c:	e02d      	b.n	80033ca <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <led7_Scan+0x104>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8003376:	b29a      	uxth	r2, r3
 8003378:	4b23      	ldr	r3, [pc, #140]	; (8003408 <led7_Scan+0x104>)
 800337a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <led7_Scan+0x104>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f023 0320 	bic.w	r3, r3, #32
 8003384:	b29a      	uxth	r2, r3
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <led7_Scan+0x104>)
 8003388:	801a      	strh	r2, [r3, #0]
		break;
 800338a:	e01e      	b.n	80033ca <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <led7_Scan+0x104>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <led7_Scan+0x104>)
 8003398:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <led7_Scan+0x104>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	f023 0310 	bic.w	r3, r3, #16
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <led7_Scan+0x104>)
 80033a6:	801a      	strh	r2, [r3, #0]
		break;
 80033a8:	e00f      	b.n	80033ca <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <led7_Scan+0x104>)
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	4b14      	ldr	r3, [pc, #80]	; (8003408 <led7_Scan+0x104>)
 80033b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <led7_Scan+0x104>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <led7_Scan+0x104>)
 80033c4:	801a      	strh	r2, [r3, #0]
		break;
 80033c6:	e000      	b.n	80033ca <led7_Scan+0xc6>
	default:
		break;
 80033c8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <led7_Scan+0x108>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	425a      	negs	r2, r3
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	f002 0203 	and.w	r2, r2, #3
 80033da:	bf58      	it	pl
 80033dc:	4253      	negpl	r3, r2
 80033de:	4a0b      	ldr	r2, [pc, #44]	; (800340c <led7_Scan+0x108>)
 80033e0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	480b      	ldr	r0, [pc, #44]	; (8003414 <led7_Scan+0x110>)
 80033e8:	f001 f96e 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80033ec:	2301      	movs	r3, #1
 80033ee:	2202      	movs	r2, #2
 80033f0:	4905      	ldr	r1, [pc, #20]	; (8003408 <led7_Scan+0x104>)
 80033f2:	4809      	ldr	r0, [pc, #36]	; (8003418 <led7_Scan+0x114>)
 80033f4:	f002 fe7d 	bl	80060f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80033f8:	2201      	movs	r2, #1
 80033fa:	2140      	movs	r1, #64	; 0x40
 80033fc:	4805      	ldr	r0, [pc, #20]	; (8003414 <led7_Scan+0x110>)
 80033fe:	f001 f963 	bl	80046c8 <HAL_GPIO_WritePin>
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000004 	.word	0x20000004
 800340c:	20000250 	.word	0x20000250
 8003410:	20000000 	.word	0x20000000
 8003414:	40021800 	.word	0x40021800
 8003418:	2000025c 	.word	0x2000025c

0800341c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003420:	f000 fd7c 	bl	8003f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003424:	f000 f838 	bl	8003498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003428:	f7ff f968 	bl	80026fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800342c:	f000 fa66 	bl	80038fc <MX_TIM2_Init>
  MX_SPI1_Init();
 8003430:	f000 f938 	bl	80036a4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8003434:	f7fe fbb4 	bl	8001ba0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8003438:	f7ff fa58 	bl	80028ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800343c:	f000 fc8c 	bl	8003d58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8003440:	f000 f894 	bl	800356c <system_init>
  /* USER CODE END 2 */
  init_value();
 8003444:	f7fe fc7c 	bl	8001d40 <init_value>
  updateTime();
 8003448:	f7fe ffe6 	bl	8002418 <updateTime>
  updateAlarm();
 800344c:	f7ff f82a 	bl	80024a4 <updateAlarm>
  lcd_Clear(BLACK);
 8003450:	2000      	movs	r0, #0
 8003452:	f7ff fb3f 	bl	8002ad4 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (flag_timer2 == 1)
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <main+0x74>)
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10e      	bne.n	800347c <main+0x60>
    {
      flag_timer2 = 0;
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <main+0x74>)
 8003460:	2200      	movs	r2, #0
 8003462:	801a      	strh	r2, [r3, #0]
      button_Scan();
 8003464:	f7fd f89a 	bl	800059c <button_Scan>
      test_LedDebug();
 8003468:	f000 f8a2 	bl	80035b0 <test_LedDebug>
      ds3231_ReadTime();
 800346c:	f7fd f924 	bl	80006b8 <ds3231_ReadTime>
      // test_Uart();
      uart_communication();
 8003470:	f000 fbe2 	bl	8003c38 <uart_communication>
      fsm_clock();
 8003474:	f7fd fc00 	bl	8000c78 <fsm_clock>
      fsm_alarm();
 8003478:	f7fd f9ae 	bl	80007d8 <fsm_alarm>
    }
    if (buffer_flag == 1)
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <main+0x78>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d1e8      	bne.n	8003456 <main+0x3a>
    {
      buffer_flag = 0;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <main+0x78>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
      comm_parser_fsm();
 800348a:	f000 fb25 	bl	8003ad8 <comm_parser_fsm>
    if (flag_timer2 == 1)
 800348e:	e7e2      	b.n	8003456 <main+0x3a>
 8003490:	20000256 	.word	0x20000256
 8003494:	20000323 	.word	0x20000323

08003498 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b094      	sub	sp, #80	; 0x50
 800349c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800349e:	f107 0320 	add.w	r3, r7, #32
 80034a2:	2230      	movs	r2, #48	; 0x30
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f005 f97a 	bl	80087a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <SystemClock_Config+0xcc>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4a27      	ldr	r2, [pc, #156]	; (8003564 <SystemClock_Config+0xcc>)
 80034c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	; 0x40
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <SystemClock_Config+0xcc>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <SystemClock_Config+0xd0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <SystemClock_Config+0xd0>)
 80034e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <SystemClock_Config+0xd0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034f4:	2302      	movs	r3, #2
 80034f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f8:	2301      	movs	r3, #1
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034fc:	2310      	movs	r3, #16
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003500:	2302      	movs	r3, #2
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003504:	2300      	movs	r3, #0
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003508:	2308      	movs	r3, #8
 800350a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800350c:	23a8      	movs	r3, #168	; 0xa8
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003510:	2302      	movs	r3, #2
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003514:	2304      	movs	r3, #4
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003518:	f107 0320 	add.w	r3, r7, #32
 800351c:	4618      	mov	r0, r3
 800351e:	f002 f8c7 	bl	80056b0 <HAL_RCC_OscConfig>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003528:	f000 f866 	bl	80035f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800352c:	230f      	movs	r3, #15
 800352e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003530:	2302      	movs	r3, #2
 8003532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003538:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800353c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800353e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003542:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	2105      	movs	r1, #5
 800354a:	4618      	mov	r0, r3
 800354c:	f002 fb28 	bl	8005ba0 <HAL_RCC_ClockConfig>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003556:	f000 f84f 	bl	80035f8 <Error_Handler>
  }
}
 800355a:	bf00      	nop
 800355c:	3750      	adds	r7, #80	; 0x50
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	40007000 	.word	0x40007000

0800356c <system_init>:

/* USER CODE BEGIN 4 */
void system_init()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8003570:	2200      	movs	r2, #0
 8003572:	2120      	movs	r1, #32
 8003574:	480d      	ldr	r0, [pc, #52]	; (80035ac <system_init+0x40>)
 8003576:	f001 f8a7 	bl	80046c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2140      	movs	r1, #64	; 0x40
 800357e:	480b      	ldr	r0, [pc, #44]	; (80035ac <system_init+0x40>)
 8003580:	f001 f8a2 	bl	80046c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2110      	movs	r1, #16
 8003588:	4808      	ldr	r0, [pc, #32]	; (80035ac <system_init+0x40>)
 800358a:	f001 f89d 	bl	80046c8 <HAL_GPIO_WritePin>
  timer_init();
 800358e:	f000 f839 	bl	8003604 <timer_init>
  led7_init();
 8003592:	f7ff feab 	bl	80032ec <led7_init>
  button_init();
 8003596:	f7fc fff5 	bl	8000584 <button_init>
  lcd_init();
 800359a:	f7ff fcb1 	bl	8002f00 <lcd_init>
  uart_init_rs232();
 800359e:	f000 fa1f 	bl	80039e0 <uart_init_rs232>
  setTimer2(50);
 80035a2:	2032      	movs	r0, #50	; 0x32
 80035a4:	f000 f838 	bl	8003618 <setTimer2>
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  count_led_debug = (count_led_debug + 1) % 20;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <test_LedDebug+0x3c>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <test_LedDebug+0x40>)
 80035bc:	fb83 1302 	smull	r1, r3, r3, r2
 80035c0:	10d9      	asrs	r1, r3, #3
 80035c2:	17d3      	asrs	r3, r2, #31
 80035c4:	1ac9      	subs	r1, r1, r3
 80035c6:	460b      	mov	r3, r1
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	1ad1      	subs	r1, r2, r3
 80035d0:	b28a      	uxth	r2, r1
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <test_LedDebug+0x3c>)
 80035d4:	801a      	strh	r2, [r3, #0]
  if (count_led_debug == 0)
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <test_LedDebug+0x3c>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <test_LedDebug+0x36>
  {
    HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80035de:	2110      	movs	r1, #16
 80035e0:	4804      	ldr	r0, [pc, #16]	; (80035f4 <test_LedDebug+0x44>)
 80035e2:	f001 f88a 	bl	80046fa <HAL_GPIO_TogglePin>
  }
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000254 	.word	0x20000254
 80035f0:	66666667 	.word	0x66666667
 80035f4:	40021000 	.word	0x40021000

080035f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035fc:	b672      	cpsid	i
}
 80035fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003600:	e7fe      	b.n	8003600 <Error_Handler+0x8>
	...

08003604 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <timer_init+0x10>)
 800360a:	f003 fb25 	bl	8006c58 <HAL_TIM_Base_Start_IT>
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200002b8 	.word	0x200002b8

08003618 <setTimer2>:

void setTimer2(uint16_t duration){
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <setTimer2+0x2c>)
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <setTimer2+0x2c>)
 800362a:	881a      	ldrh	r2, [r3, #0]
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <setTimer2+0x30>)
 800362e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <setTimer2+0x34>)
 8003632:	2200      	movs	r2, #0
 8003634:	801a      	strh	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000025a 	.word	0x2000025a
 8003648:	20000258 	.word	0x20000258
 800364c:	20000256 	.word	0x20000256

08003650 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003660:	d116      	bne.n	8003690 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003674:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003680:	2201      	movs	r2, #1
 8003682:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800368a:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800368c:	f7ff fe3a 	bl	8003304 <led7_Scan>
	}
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000258 	.word	0x20000258
 800369c:	20000256 	.word	0x20000256
 80036a0:	2000025a 	.word	0x2000025a

080036a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80036a8:	4b17      	ldr	r3, [pc, #92]	; (8003708 <MX_SPI1_Init+0x64>)
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <MX_SPI1_Init+0x68>)
 80036ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <MX_SPI1_Init+0x64>)
 80036b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <MX_SPI1_Init+0x64>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <MX_SPI1_Init+0x64>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <MX_SPI1_Init+0x64>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <MX_SPI1_Init+0x64>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <MX_SPI1_Init+0x64>)
 80036d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <MX_SPI1_Init+0x64>)
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <MX_SPI1_Init+0x64>)
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <MX_SPI1_Init+0x64>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <MX_SPI1_Init+0x64>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <MX_SPI1_Init+0x64>)
 80036f0:	220a      	movs	r2, #10
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036f4:	4804      	ldr	r0, [pc, #16]	; (8003708 <MX_SPI1_Init+0x64>)
 80036f6:	f002 fc73 	bl	8005fe0 <HAL_SPI_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003700:	f7ff ff7a 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	2000025c 	.word	0x2000025c
 800370c:	40013000 	.word	0x40013000

08003710 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_SPI_MspInit+0x84>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12b      	bne.n	800378a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_SPI_MspInit+0x88>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <HAL_SPI_MspInit+0x88>)
 800373c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_SPI_MspInit+0x88>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_SPI_MspInit+0x88>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <HAL_SPI_MspInit+0x88>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_SPI_MspInit+0x88>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800376a:	2338      	movs	r3, #56	; 0x38
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003776:	2303      	movs	r3, #3
 8003778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800377a:	2305      	movs	r3, #5
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	4805      	ldr	r0, [pc, #20]	; (800379c <HAL_SPI_MspInit+0x8c>)
 8003786:	f000 fe03 	bl	8004390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800378a:	bf00      	nop
 800378c:	3728      	adds	r7, #40	; 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40013000 	.word	0x40013000
 8003798:	40023800 	.word	0x40023800
 800379c:	40020400 	.word	0x40020400

080037a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_MspInit+0x4c>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a0f      	ldr	r2, [pc, #60]	; (80037ec <HAL_MspInit+0x4c>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_MspInit+0x4c>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_MspInit+0x4c>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HAL_MspInit+0x4c>)
 80037cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_MspInit+0x4c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800

080037f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037f4:	e7fe      	b.n	80037f4 <NMI_Handler+0x4>

080037f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <HardFault_Handler+0x4>

080037fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <MemManage_Handler+0x4>

08003802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <BusFault_Handler+0x4>

08003808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <UsageFault_Handler+0x4>

0800380e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383c:	f000 fbc0 	bl	8003fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}

08003844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <TIM2_IRQHandler+0x10>)
 800384a:	f003 fa75 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200002b8 	.word	0x200002b8

08003858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <USART1_IRQHandler+0x10>)
 800385e:	f003 ff3d 	bl	80076dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200003cc 	.word	0x200003cc

0800386c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <_sbrk+0x5c>)
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <_sbrk+0x60>)
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <_sbrk+0x64>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <_sbrk+0x64>)
 800388a:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <_sbrk+0x68>)
 800388c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <_sbrk+0x64>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d207      	bcs.n	80038ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800389c:	f004 ff56 	bl	800874c <__errno>
 80038a0:	4603      	mov	r3, r0
 80038a2:	220c      	movs	r2, #12
 80038a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
 80038aa:	e009      	b.n	80038c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_sbrk+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <_sbrk+0x64>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <_sbrk+0x64>)
 80038bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20020000 	.word	0x20020000
 80038cc:	00000400 	.word	0x00000400
 80038d0:	200002b4 	.word	0x200002b4
 80038d4:	20000428 	.word	0x20000428

080038d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <SystemInit+0x20>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <SystemInit+0x20>)
 80038e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003902:	f107 0308 	add.w	r3, r7, #8
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003910:	463b      	mov	r3, r7
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <MX_TIM2_Init+0x94>)
 800391a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800391e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <MX_TIM2_Init+0x94>)
 8003922:	f240 3247 	movw	r2, #839	; 0x347
 8003926:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <MX_TIM2_Init+0x94>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <MX_TIM2_Init+0x94>)
 8003930:	2263      	movs	r2, #99	; 0x63
 8003932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <MX_TIM2_Init+0x94>)
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <MX_TIM2_Init+0x94>)
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003940:	4813      	ldr	r0, [pc, #76]	; (8003990 <MX_TIM2_Init+0x94>)
 8003942:	f003 f939 	bl	8006bb8 <HAL_TIM_Base_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800394c:	f7ff fe54 	bl	80035f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	4619      	mov	r1, r3
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <MX_TIM2_Init+0x94>)
 800395e:	f003 faf3 	bl	8006f48 <HAL_TIM_ConfigClockSource>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003968:	f7ff fe46 	bl	80035f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003974:	463b      	mov	r3, r7
 8003976:	4619      	mov	r1, r3
 8003978:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_TIM2_Init+0x94>)
 800397a:	f003 fd0f 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003984:	f7ff fe38 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200002b8 	.word	0x200002b8

08003994 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d115      	bne.n	80039d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <HAL_TIM_Base_MspInit+0x48>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <HAL_TIM_Base_MspInit+0x48>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_TIM_Base_MspInit+0x48>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	201c      	movs	r0, #28
 80039c8:	f000 fc19 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039cc:	201c      	movs	r0, #28
 80039ce:	f000 fc32 	bl	8004236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <uart_init_rs232>:
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
uint8_t msg[100];

void uart_init_rs232()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &byte_recv, 1);
 80039e4:	2201      	movs	r2, #1
 80039e6:	4903      	ldr	r1, [pc, #12]	; (80039f4 <uart_init_rs232+0x14>)
 80039e8:	4803      	ldr	r0, [pc, #12]	; (80039f8 <uart_init_rs232+0x18>)
 80039ea:	f003 fe46 	bl	800767a <HAL_UART_Receive_IT>
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000300 	.word	0x20000300
 80039f8:	200003cc 	.word	0x200003cc

080039fc <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t *str)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (void *)msg, sprintf((void *)msg, "%s", str), 10);
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4907      	ldr	r1, [pc, #28]	; (8003a24 <uart_Rs232SendString+0x28>)
 8003a08:	4807      	ldr	r0, [pc, #28]	; (8003a28 <uart_Rs232SendString+0x2c>)
 8003a0a:	f004 fed1 	bl	80087b0 <siprintf>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	230a      	movs	r3, #10
 8003a14:	4904      	ldr	r1, [pc, #16]	; (8003a28 <uart_Rs232SendString+0x2c>)
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <uart_Rs232SendString+0x30>)
 8003a18:	f003 fd9d 	bl	8007556 <HAL_UART_Transmit>
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	08009370 	.word	0x08009370
 8003a28:	20000324 	.word	0x20000324
 8003a2c:	200003cc 	.word	0x200003cc

08003a30 <HAL_UART_RxCpltCallback>:
    sprintf((void *)msg, "%ld", num % 100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a11      	ldr	r2, [pc, #68]	; (8003a84 <HAL_UART_RxCpltCallback+0x54>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d11b      	bne.n	8003a7a <HAL_UART_RxCpltCallback+0x4a>
    {
        // rs232 isr
        // can be modified
        // HAL_UART_Transmit(&huart1, &byte_recv, 1, 10);
        buffer_byte[index_buffer] = byte_recv;
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_UART_RxCpltCallback+0x58>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <HAL_UART_RxCpltCallback+0x5c>)
 8003a4a:	7819      	ldrb	r1, [r3, #0]
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_UART_RxCpltCallback+0x60>)
 8003a4e:	5499      	strb	r1, [r3, r2]
        index_buffer++;
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_UART_RxCpltCallback+0x58>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_UART_RxCpltCallback+0x58>)
 8003a5a:	701a      	strb	r2, [r3, #0]
        if (index_buffer == MAX_BUFFER_SIZE)
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_UART_RxCpltCallback+0x58>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b1e      	cmp	r3, #30
 8003a62:	d102      	bne.n	8003a6a <HAL_UART_RxCpltCallback+0x3a>
            index_buffer = 0;
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_UART_RxCpltCallback+0x58>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
        buffer_flag = 1;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_UART_RxCpltCallback+0x64>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
        // turn on the receice interrupt
        HAL_UART_Receive_IT(&huart1, &byte_recv, 1);
 8003a70:	2201      	movs	r2, #1
 8003a72:	4906      	ldr	r1, [pc, #24]	; (8003a8c <HAL_UART_RxCpltCallback+0x5c>)
 8003a74:	4808      	ldr	r0, [pc, #32]	; (8003a98 <HAL_UART_RxCpltCallback+0x68>)
 8003a76:	f003 fe00 	bl	800767a <HAL_UART_Receive_IT>
    }
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40011000 	.word	0x40011000
 8003a88:	20000322 	.word	0x20000322
 8003a8c:	20000300 	.word	0x20000300
 8003a90:	20000304 	.word	0x20000304
 8003a94:	20000323 	.word	0x20000323
 8003a98:	200003cc 	.word	0x200003cc

08003a9c <str_cpy>:
uint8_t index_cmd_data = 0;

uint8_t empty_str[MAX_BUFFER_SIZE] = {0};

void str_cpy(uint8_t *str1, uint8_t *str2)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_BUFFER_SIZE; i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e00a      	b.n	8003ac2 <str_cpy+0x26>
    {
        str1[i] = str2[i];
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	440b      	add	r3, r1
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_BUFFER_SIZE; i++)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b1d      	cmp	r3, #29
 8003ac6:	ddf1      	ble.n	8003aac <str_cpy+0x10>
    }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <comm_parser_fsm>:

void comm_parser_fsm(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
    switch (command_status)
 8003ade:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <comm_parser_fsm+0x13c>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <comm_parser_fsm+0x14>
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d015      	beq.n	8003b16 <comm_parser_fsm+0x3e>
            command_status = READING;
            command_flag = 0;
        }
        break;
    default:
        break;
 8003aea:	e08e      	b.n	8003c0a <comm_parser_fsm+0x132>
        if (buffer_byte[index_buffer - 1] == '!')
 8003aec:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <comm_parser_fsm+0x140>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	4a4a      	ldr	r2, [pc, #296]	; (8003c1c <comm_parser_fsm+0x144>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	2b21      	cmp	r3, #33	; 0x21
 8003af8:	d109      	bne.n	8003b0e <comm_parser_fsm+0x36>
            command_status = READING;
 8003afa:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <comm_parser_fsm+0x13c>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
            str_cpy(command_data, empty_str);
 8003b00:	4947      	ldr	r1, [pc, #284]	; (8003c20 <comm_parser_fsm+0x148>)
 8003b02:	4848      	ldr	r0, [pc, #288]	; (8003c24 <comm_parser_fsm+0x14c>)
 8003b04:	f7ff ffca 	bl	8003a9c <str_cpy>
            index_cmd_data = 0;
 8003b08:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <comm_parser_fsm+0x150>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
        command_flag = 0;
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <comm_parser_fsm+0x154>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
        break;
 8003b14:	e079      	b.n	8003c0a <comm_parser_fsm+0x132>
        if (buffer_byte[index_buffer - 1] != '!' && buffer_byte[index_buffer - 1] != '#')
 8003b16:	4b40      	ldr	r3, [pc, #256]	; (8003c18 <comm_parser_fsm+0x140>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	4a3f      	ldr	r2, [pc, #252]	; (8003c1c <comm_parser_fsm+0x144>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	2b21      	cmp	r3, #33	; 0x21
 8003b22:	d016      	beq.n	8003b52 <comm_parser_fsm+0x7a>
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <comm_parser_fsm+0x140>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <comm_parser_fsm+0x144>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	2b23      	cmp	r3, #35	; 0x23
 8003b30:	d00f      	beq.n	8003b52 <comm_parser_fsm+0x7a>
            command_data[index_cmd_data] = buffer_byte[index_buffer - 1];
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <comm_parser_fsm+0x140>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	4a3b      	ldr	r2, [pc, #236]	; (8003c28 <comm_parser_fsm+0x150>)
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4a37      	ldr	r2, [pc, #220]	; (8003c1c <comm_parser_fsm+0x144>)
 8003b40:	5cd2      	ldrb	r2, [r2, r3]
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <comm_parser_fsm+0x14c>)
 8003b44:	545a      	strb	r2, [r3, r1]
            index_cmd_data++;
 8003b46:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <comm_parser_fsm+0x150>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <comm_parser_fsm+0x150>)
 8003b50:	701a      	strb	r2, [r3, #0]
        if (buffer_byte[index_buffer - 1] == '#')
 8003b52:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <comm_parser_fsm+0x140>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	4a30      	ldr	r2, [pc, #192]	; (8003c1c <comm_parser_fsm+0x144>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	2b23      	cmp	r3, #35	; 0x23
 8003b5e:	d12c      	bne.n	8003bba <comm_parser_fsm+0xe2>
            for (int i = 0; i < index_cmd_data; i++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	e012      	b.n	8003b8c <comm_parser_fsm+0xb4>
                if (command_data[i] <= 47 || command_data[i] >= 58)
 8003b66:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <comm_parser_fsm+0x14c>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b70:	d905      	bls.n	8003b7e <comm_parser_fsm+0xa6>
 8003b72:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <comm_parser_fsm+0x14c>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b39      	cmp	r3, #57	; 0x39
 8003b7c:	d903      	bls.n	8003b86 <comm_parser_fsm+0xae>
                    flag_Invalid = 1;
 8003b7e:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <comm_parser_fsm+0x158>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
                    break;
 8003b84:	e008      	b.n	8003b98 <comm_parser_fsm+0xc0>
            for (int i = 0; i < index_cmd_data; i++)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <comm_parser_fsm+0x150>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4293      	cmp	r3, r2
 8003b96:	dbe6      	blt.n	8003b66 <comm_parser_fsm+0x8e>
            str_cpy(buffer_byte, empty_str);
 8003b98:	4921      	ldr	r1, [pc, #132]	; (8003c20 <comm_parser_fsm+0x148>)
 8003b9a:	4820      	ldr	r0, [pc, #128]	; (8003c1c <comm_parser_fsm+0x144>)
 8003b9c:	f7ff ff7e 	bl	8003a9c <str_cpy>
            index_buffer = 0;
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <comm_parser_fsm+0x140>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
            uart_status = END_UART;
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <comm_parser_fsm+0x15c>)
 8003ba8:	2205      	movs	r2, #5
 8003baa:	701a      	strb	r2, [r3, #0]
            command_status = START_COMMAND;
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <comm_parser_fsm+0x13c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
            command_flag = 1;
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <comm_parser_fsm+0x154>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
        break;
 8003bb8:	e026      	b.n	8003c08 <comm_parser_fsm+0x130>
        else if (buffer_byte[index_buffer - 1] == '!')
 8003bba:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <comm_parser_fsm+0x140>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <comm_parser_fsm+0x144>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	2b21      	cmp	r3, #33	; 0x21
 8003bc6:	d11f      	bne.n	8003c08 <comm_parser_fsm+0x130>
            str_cpy(buffer_byte, empty_str);
 8003bc8:	4915      	ldr	r1, [pc, #84]	; (8003c20 <comm_parser_fsm+0x148>)
 8003bca:	4814      	ldr	r0, [pc, #80]	; (8003c1c <comm_parser_fsm+0x144>)
 8003bcc:	f7ff ff66 	bl	8003a9c <str_cpy>
            str_cpy(command_data, empty_str);
 8003bd0:	4913      	ldr	r1, [pc, #76]	; (8003c20 <comm_parser_fsm+0x148>)
 8003bd2:	4814      	ldr	r0, [pc, #80]	; (8003c24 <comm_parser_fsm+0x14c>)
 8003bd4:	f7ff ff62 	bl	8003a9c <str_cpy>
            index_buffer = 0;
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <comm_parser_fsm+0x140>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
            index_cmd_data = 0;
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <comm_parser_fsm+0x150>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
            buffer_byte[index_buffer] = '!';
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <comm_parser_fsm+0x140>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <comm_parser_fsm+0x144>)
 8003bec:	2121      	movs	r1, #33	; 0x21
 8003bee:	5499      	strb	r1, [r3, r2]
            index_buffer++;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <comm_parser_fsm+0x140>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <comm_parser_fsm+0x140>)
 8003bfa:	701a      	strb	r2, [r3, #0]
            command_status = READING;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <comm_parser_fsm+0x13c>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
            command_flag = 0;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <comm_parser_fsm+0x154>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
        break;
 8003c08:	bf00      	nop
    }
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000388 	.word	0x20000388
 8003c18:	20000322 	.word	0x20000322
 8003c1c:	20000304 	.word	0x20000304
 8003c20:	200003ac 	.word	0x200003ac
 8003c24:	2000038c 	.word	0x2000038c
 8003c28:	200003aa 	.word	0x200003aa
 8003c2c:	20000389 	.word	0x20000389
 8003c30:	200001c4 	.word	0x200001c4
 8003c34:	2000000c 	.word	0x2000000c

08003c38 <uart_communication>:

void uart_communication(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af04      	add	r7, sp, #16
    switch (uart_status)
 8003c3e:	4b3a      	ldr	r3, [pc, #232]	; (8003d28 <uart_communication+0xf0>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d069      	beq.n	8003d1a <uart_communication+0xe2>
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d000      	beq.n	8003c4c <uart_communication+0x14>
            flag_TimeOut = 0;
            counter_TimeOut = 0;
        }
        break;
    default:
        break;
 8003c4a:	e069      	b.n	8003d20 <uart_communication+0xe8>
        if (command_flag == 1)
 8003c4c:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <uart_communication+0xf4>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d164      	bne.n	8003d1e <uart_communication+0xe6>
            command_flag = 0;
 8003c54:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <uart_communication+0xf4>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
            str_cpy(tempUart, empty_str);
 8003c5a:	4935      	ldr	r1, [pc, #212]	; (8003d30 <uart_communication+0xf8>)
 8003c5c:	4835      	ldr	r0, [pc, #212]	; (8003d34 <uart_communication+0xfc>)
 8003c5e:	f7ff ff1d 	bl	8003a9c <str_cpy>
            str_cpy(tempUart, command_data);
 8003c62:	4935      	ldr	r1, [pc, #212]	; (8003d38 <uart_communication+0x100>)
 8003c64:	4833      	ldr	r0, [pc, #204]	; (8003d34 <uart_communication+0xfc>)
 8003c66:	f7ff ff19 	bl	8003a9c <str_cpy>
            lcd_Fill(0, 40, 240, 70, BLACK);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2346      	movs	r3, #70	; 0x46
 8003c70:	22f0      	movs	r2, #240	; 0xf0
 8003c72:	2128      	movs	r1, #40	; 0x28
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7fe ff67 	bl	8002b48 <lcd_Fill>
            lcd_ShowStr(70, 50, "INPUT: ", GREEN, BLACK, 16, 1);
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	9302      	str	r3, [sp, #8]
 8003c7e:	2310      	movs	r3, #16
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	2300      	movs	r3, #0
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <uart_communication+0x104>)
 8003c8c:	2132      	movs	r1, #50	; 0x32
 8003c8e:	2046      	movs	r0, #70	; 0x46
 8003c90:	f7ff fa96 	bl	80031c0 <lcd_ShowStr>
            lcd_ShowStr(140, 50, tempUart, GREEN, BLACK, 16, 1);
 8003c94:	2301      	movs	r3, #1
 8003c96:	9302      	str	r3, [sp, #8]
 8003c98:	2310      	movs	r3, #16
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <uart_communication+0xfc>)
 8003ca6:	2132      	movs	r1, #50	; 0x32
 8003ca8:	208c      	movs	r0, #140	; 0x8c
 8003caa:	f7ff fa89 	bl	80031c0 <lcd_ShowStr>
            if (flag_Invalid == 0)
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <uart_communication+0x108>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d12a      	bne.n	8003d0c <uart_communication+0xd4>
                uart_valid = 1;
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <uart_communication+0x10c>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
                number = atoi((void *)tempUart);
 8003cbc:	481d      	ldr	r0, [pc, #116]	; (8003d34 <uart_communication+0xfc>)
 8003cbe:	f004 fd41 	bl	8008744 <atoi>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <uart_communication+0x110>)
 8003cc6:	6013      	str	r3, [r2, #0]
                lcd_Fill(0, 70, 240, 100, BLACK);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2364      	movs	r3, #100	; 0x64
 8003cce:	22f0      	movs	r2, #240	; 0xf0
 8003cd0:	2146      	movs	r1, #70	; 0x46
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f7fe ff38 	bl	8002b48 <lcd_Fill>
                lcd_ShowStr(70, 70, "NUMBER: ", GREEN, BLACK, 16, 1);
 8003cd8:	2301      	movs	r3, #1
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	2310      	movs	r3, #16
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ce8:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <uart_communication+0x114>)
 8003cea:	2146      	movs	r1, #70	; 0x46
 8003cec:	2046      	movs	r0, #70	; 0x46
 8003cee:	f7ff fa67 	bl	80031c0 <lcd_ShowStr>
                lcd_ShowStr(140, 70, tempUart, GREEN, BLACK, 16, 1);
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	9302      	str	r3, [sp, #8]
 8003cf6:	2310      	movs	r3, #16
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d02:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <uart_communication+0xfc>)
 8003d04:	2146      	movs	r1, #70	; 0x46
 8003d06:	208c      	movs	r0, #140	; 0x8c
 8003d08:	f7ff fa5a 	bl	80031c0 <lcd_ShowStr>
            flag_TimeOut = 0;
 8003d0c:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <uart_communication+0x118>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
            counter_TimeOut = 0;
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <uart_communication+0x11c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
        break;
 8003d18:	e001      	b.n	8003d1e <uart_communication+0xe6>
        break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <uart_communication+0xe8>
        break;
 8003d1e:	bf00      	nop
    }
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c
 8003d2c:	20000389 	.word	0x20000389
 8003d30:	200003ac 	.word	0x200003ac
 8003d34:	200001d4 	.word	0x200001d4
 8003d38:	2000038c 	.word	0x2000038c
 8003d3c:	08009384 	.word	0x08009384
 8003d40:	200001c4 	.word	0x200001c4
 8003d44:	200001b8 	.word	0x200001b8
 8003d48:	200001d0 	.word	0x200001d0
 8003d4c:	0800938c 	.word	0x0800938c
 8003d50:	200001c8 	.word	0x200001c8
 8003d54:	200001c0 	.word	0x200001c0

08003d58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <MX_USART1_UART_Init+0x50>)
 8003d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d8e:	4805      	ldr	r0, [pc, #20]	; (8003da4 <MX_USART1_UART_Init+0x4c>)
 8003d90:	f003 fb94 	bl	80074bc <HAL_UART_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d9a:	f7ff fc2d 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200003cc 	.word	0x200003cc
 8003da8:	40011000 	.word	0x40011000

08003dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_UART_MspInit+0x94>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d134      	bne.n	8003e38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <HAL_UART_MspInit+0x98>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_UART_MspInit+0x98>)
 8003dd8:	f043 0310 	orr.w	r3, r3, #16
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_UART_MspInit+0x98>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_UART_MspInit+0x98>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_UART_MspInit+0x98>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_UART_MspInit+0x98>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e14:	2303      	movs	r3, #3
 8003e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e18:	2307      	movs	r3, #7
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	4619      	mov	r1, r3
 8003e22:	4809      	ldr	r0, [pc, #36]	; (8003e48 <HAL_UART_MspInit+0x9c>)
 8003e24:	f000 fab4 	bl	8004390 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2025      	movs	r0, #37	; 0x25
 8003e2e:	f000 f9e6 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e32:	2025      	movs	r0, #37	; 0x25
 8003e34:	f000 f9ff 	bl	8004236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3728      	adds	r7, #40	; 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40011000 	.word	0x40011000
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40020000 	.word	0x40020000

08003e4c <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	0092      	lsls	r2, r2, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	b2db      	uxtb	r3, r3
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <DEC2BCD+0x44>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	08db      	lsrs	r3, r3, #3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	b258      	sxtb	r0, r3
 8003e9a:	79fa      	ldrb	r2, [r7, #7]
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <DEC2BCD+0x44>)
 8003e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea2:	08d9      	lsrs	r1, r3, #3
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	4303      	orrs	r3, r0
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	cccccccd 	.word	0xcccccccd

08003ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ece:	490e      	ldr	r1, [pc, #56]	; (8003f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ed0:	4a0e      	ldr	r2, [pc, #56]	; (8003f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed4:	e002      	b.n	8003edc <LoopCopyDataInit>

08003ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eda:	3304      	adds	r3, #4

08003edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee0:	d3f9      	bcc.n	8003ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee2:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ee4:	4c0b      	ldr	r4, [pc, #44]	; (8003f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee8:	e001      	b.n	8003eee <LoopFillZerobss>

08003eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eec:	3204      	adds	r2, #4

08003eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef0:	d3fb      	bcc.n	8003eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ef2:	f7ff fcf1 	bl	80038d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ef6:	f004 fc2f 	bl	8008758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003efa:	f7ff fa8f 	bl	800341c <main>
  bx  lr    
 8003efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f08:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003f0c:	0800c474 	.word	0x0800c474
  ldr r2, =_sbss
 8003f10:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003f14:	20000424 	.word	0x20000424

08003f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC_IRQHandler>
	...

08003f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f20:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <HAL_Init+0x40>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <HAL_Init+0x40>)
 8003f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_Init+0x40>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <HAL_Init+0x40>)
 8003f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_Init+0x40>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <HAL_Init+0x40>)
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f44:	2003      	movs	r0, #3
 8003f46:	f000 f94f 	bl	80041e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f4a:	200f      	movs	r0, #15
 8003f4c:	f000 f808 	bl	8003f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f50:	f7ff fc26 	bl	80037a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00

08003f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_InitTick+0x54>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_InitTick+0x58>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	4619      	mov	r1, r3
 8003f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f967 	bl	8004252 <HAL_SYSTICK_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e00e      	b.n	8003fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b0f      	cmp	r3, #15
 8003f92:	d80a      	bhi.n	8003faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f94:	2200      	movs	r2, #0
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	f000 f92f 	bl	80041fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fa0:	4a06      	ldr	r2, [pc, #24]	; (8003fbc <HAL_InitTick+0x5c>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000008 	.word	0x20000008
 8003fb8:	20000014 	.word	0x20000014
 8003fbc:	20000010 	.word	0x20000010

08003fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_IncTick+0x20>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000014 	.word	0x20000014
 8003fe4:	20000410 	.word	0x20000410

08003fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return uwTick;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_GetTick+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000410 	.word	0x20000410

08004000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff ffee 	bl	8003fe8 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d005      	beq.n	8004026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_Delay+0x44>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004026:	bf00      	nop
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	429a      	cmp	r2, r3
 8004036:	d8f7      	bhi.n	8004028 <HAL_Delay+0x28>
  {
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000014 	.word	0x20000014

08004048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004064:	4013      	ands	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407a:	4a04      	ldr	r2, [pc, #16]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60d3      	str	r3, [r2, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0307 	and.w	r3, r3, #7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0b      	blt.n	80040d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <__NVIC_EnableIRQ+0x38>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	db0a      	blt.n	8004112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	490c      	ldr	r1, [pc, #48]	; (8004134 <__NVIC_SetPriority+0x4c>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	440b      	add	r3, r1
 800410c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004110:	e00a      	b.n	8004128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <__NVIC_SetPriority+0x50>)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3b04      	subs	r3, #4
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	440b      	add	r3, r1
 8004126:	761a      	strb	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000e100 	.word	0xe000e100
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f1c3 0307 	rsb	r3, r3, #7
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf28      	it	cs
 800415a:	2304      	movcs	r3, #4
 800415c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3304      	adds	r3, #4
 8004162:	2b06      	cmp	r3, #6
 8004164:	d902      	bls.n	800416c <NVIC_EncodePriority+0x30>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3b03      	subs	r3, #3
 800416a:	e000      	b.n	800416e <NVIC_EncodePriority+0x32>
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	401a      	ands	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004184:	f04f 31ff 	mov.w	r1, #4294967295
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43d9      	mvns	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	4313      	orrs	r3, r2
         );
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b4:	d301      	bcc.n	80041ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b6:	2301      	movs	r3, #1
 80041b8:	e00f      	b.n	80041da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <SysTick_Config+0x40>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3b01      	subs	r3, #1
 80041c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041c2:	210f      	movs	r1, #15
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	f7ff ff8e 	bl	80040e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <SysTick_Config+0x40>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041d2:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <SysTick_Config+0x40>)
 80041d4:	2207      	movs	r2, #7
 80041d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	e000e010 	.word	0xe000e010

080041e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff29 	bl	8004048 <__NVIC_SetPriorityGrouping>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	4603      	mov	r3, r0
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004210:	f7ff ff3e 	bl	8004090 <__NVIC_GetPriorityGrouping>
 8004214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	6978      	ldr	r0, [r7, #20]
 800421c:	f7ff ff8e 	bl	800413c <NVIC_EncodePriority>
 8004220:	4602      	mov	r2, r0
 8004222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ff5d 	bl	80040e8 <__NVIC_SetPriority>
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	4603      	mov	r3, r0
 800423e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff31 	bl	80040ac <__NVIC_EnableIRQ>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ffa2 	bl	80041a4 <SysTick_Config>
 8004260:	4603      	mov	r3, r0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004278:	f7ff feb6 	bl	8003fe8 <HAL_GetTick>
 800427c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d008      	beq.n	800429c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e052      	b.n	8004342 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0216 	bic.w	r2, r2, #22
 80042aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d103      	bne.n	80042cc <HAL_DMA_Abort+0x62>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0208 	bic.w	r2, r2, #8
 80042da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ec:	e013      	b.n	8004316 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042ee:	f7ff fe7b 	bl	8003fe8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d90c      	bls.n	8004316 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2203      	movs	r2, #3
 8004306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e015      	b.n	8004342 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e4      	bne.n	80042ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	223f      	movs	r2, #63	; 0x3f
 800432a:	409a      	lsls	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d004      	beq.n	8004368 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e00c      	b.n	8004382 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2205      	movs	r2, #5
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e16b      	b.n	8004684 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043ac:	2201      	movs	r2, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	f040 815a 	bne.w	800467e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d005      	beq.n	80043e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d130      	bne.n	8004444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2203      	movs	r2, #3
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004418:	2201      	movs	r2, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f003 0201 	and.w	r2, r3, #1
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	2b03      	cmp	r3, #3
 800444e:	d017      	beq.n	8004480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2203      	movs	r2, #3
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d123      	bne.n	80044d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	08da      	lsrs	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3208      	adds	r2, #8
 8004494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	220f      	movs	r2, #15
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	08da      	lsrs	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3208      	adds	r2, #8
 80044ce:	69b9      	ldr	r1, [r7, #24]
 80044d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	2203      	movs	r2, #3
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0203 	and.w	r2, r3, #3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80b4 	beq.w	800467e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	4b60      	ldr	r3, [pc, #384]	; (800469c <HAL_GPIO_Init+0x30c>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	4a5f      	ldr	r2, [pc, #380]	; (800469c <HAL_GPIO_Init+0x30c>)
 8004520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004524:	6453      	str	r3, [r2, #68]	; 0x44
 8004526:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_GPIO_Init+0x30c>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004532:	4a5b      	ldr	r2, [pc, #364]	; (80046a0 <HAL_GPIO_Init+0x310>)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	089b      	lsrs	r3, r3, #2
 8004538:	3302      	adds	r3, #2
 800453a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	220f      	movs	r2, #15
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <HAL_GPIO_Init+0x314>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d02b      	beq.n	80045b6 <HAL_GPIO_Init+0x226>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a51      	ldr	r2, [pc, #324]	; (80046a8 <HAL_GPIO_Init+0x318>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d025      	beq.n	80045b2 <HAL_GPIO_Init+0x222>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a50      	ldr	r2, [pc, #320]	; (80046ac <HAL_GPIO_Init+0x31c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01f      	beq.n	80045ae <HAL_GPIO_Init+0x21e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a4f      	ldr	r2, [pc, #316]	; (80046b0 <HAL_GPIO_Init+0x320>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d019      	beq.n	80045aa <HAL_GPIO_Init+0x21a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a4e      	ldr	r2, [pc, #312]	; (80046b4 <HAL_GPIO_Init+0x324>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_GPIO_Init+0x216>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a4d      	ldr	r2, [pc, #308]	; (80046b8 <HAL_GPIO_Init+0x328>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00d      	beq.n	80045a2 <HAL_GPIO_Init+0x212>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a4c      	ldr	r2, [pc, #304]	; (80046bc <HAL_GPIO_Init+0x32c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d007      	beq.n	800459e <HAL_GPIO_Init+0x20e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a4b      	ldr	r2, [pc, #300]	; (80046c0 <HAL_GPIO_Init+0x330>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <HAL_GPIO_Init+0x20a>
 8004596:	2307      	movs	r3, #7
 8004598:	e00e      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 800459a:	2308      	movs	r3, #8
 800459c:	e00c      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 800459e:	2306      	movs	r3, #6
 80045a0:	e00a      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 80045a2:	2305      	movs	r3, #5
 80045a4:	e008      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 80045a6:	2304      	movs	r3, #4
 80045a8:	e006      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 80045aa:	2303      	movs	r3, #3
 80045ac:	e004      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e002      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_GPIO_Init+0x228>
 80045b6:	2300      	movs	r3, #0
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	f002 0203 	and.w	r2, r2, #3
 80045be:	0092      	lsls	r2, r2, #2
 80045c0:	4093      	lsls	r3, r2
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045c8:	4935      	ldr	r1, [pc, #212]	; (80046a0 <HAL_GPIO_Init+0x310>)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	089b      	lsrs	r3, r3, #2
 80045ce:	3302      	adds	r3, #2
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d6:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <HAL_GPIO_Init+0x334>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045fa:	4a32      	ldr	r2, [pc, #200]	; (80046c4 <HAL_GPIO_Init+0x334>)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004600:	4b30      	ldr	r3, [pc, #192]	; (80046c4 <HAL_GPIO_Init+0x334>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004624:	4a27      	ldr	r2, [pc, #156]	; (80046c4 <HAL_GPIO_Init+0x334>)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800462a:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <HAL_GPIO_Init+0x334>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800464e:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <HAL_GPIO_Init+0x334>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_GPIO_Init+0x334>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004678:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <HAL_GPIO_Init+0x334>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3301      	adds	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b0f      	cmp	r3, #15
 8004688:	f67f ae90 	bls.w	80043ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	40013800 	.word	0x40013800
 80046a4:	40020000 	.word	0x40020000
 80046a8:	40020400 	.word	0x40020400
 80046ac:	40020800 	.word	0x40020800
 80046b0:	40020c00 	.word	0x40020c00
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40021400 	.word	0x40021400
 80046bc:	40021800 	.word	0x40021800
 80046c0:	40021c00 	.word	0x40021c00
 80046c4:	40013c00 	.word	0x40013c00

080046c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
 80046d4:	4613      	mov	r3, r2
 80046d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046d8:	787b      	ldrb	r3, [r7, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046de:	887a      	ldrh	r2, [r7, #2]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046e4:	e003      	b.n	80046ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	041a      	lsls	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	619a      	str	r2, [r3, #24]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800470c:	887a      	ldrh	r2, [r7, #2]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4013      	ands	r3, r2
 8004712:	041a      	lsls	r2, r3, #16
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43d9      	mvns	r1, r3
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	400b      	ands	r3, r1
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	619a      	str	r2, [r3, #24]
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e12b      	b.n	800499a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fe f8f6 	bl	8002948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	; 0x24
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004794:	f001 fbfc 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 8004798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4a81      	ldr	r2, [pc, #516]	; (80049a4 <HAL_I2C_Init+0x274>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d807      	bhi.n	80047b4 <HAL_I2C_Init+0x84>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a80      	ldr	r2, [pc, #512]	; (80049a8 <HAL_I2C_Init+0x278>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bf94      	ite	ls
 80047ac:	2301      	movls	r3, #1
 80047ae:	2300      	movhi	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e006      	b.n	80047c2 <HAL_I2C_Init+0x92>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a7d      	ldr	r2, [pc, #500]	; (80049ac <HAL_I2C_Init+0x27c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	bf94      	ite	ls
 80047bc:	2301      	movls	r3, #1
 80047be:	2300      	movhi	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0e7      	b.n	800499a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a78      	ldr	r2, [pc, #480]	; (80049b0 <HAL_I2C_Init+0x280>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0c9b      	lsrs	r3, r3, #18
 80047d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4a6a      	ldr	r2, [pc, #424]	; (80049a4 <HAL_I2C_Init+0x274>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d802      	bhi.n	8004804 <HAL_I2C_Init+0xd4>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3301      	adds	r3, #1
 8004802:	e009      	b.n	8004818 <HAL_I2C_Init+0xe8>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	4a69      	ldr	r2, [pc, #420]	; (80049b4 <HAL_I2C_Init+0x284>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	3301      	adds	r3, #1
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800482a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	495c      	ldr	r1, [pc, #368]	; (80049a4 <HAL_I2C_Init+0x274>)
 8004834:	428b      	cmp	r3, r1
 8004836:	d819      	bhi.n	800486c <HAL_I2C_Init+0x13c>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1e59      	subs	r1, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	fbb1 f3f3 	udiv	r3, r1, r3
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	f640 73fc 	movw	r3, #4092	; 0xffc
 800484c:	400b      	ands	r3, r1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_I2C_Init+0x138>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1e59      	subs	r1, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004860:	3301      	adds	r3, #1
 8004862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004866:	e051      	b.n	800490c <HAL_I2C_Init+0x1dc>
 8004868:	2304      	movs	r3, #4
 800486a:	e04f      	b.n	800490c <HAL_I2C_Init+0x1dc>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d111      	bne.n	8004898 <HAL_I2C_Init+0x168>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1e58      	subs	r0, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6859      	ldr	r1, [r3, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	440b      	add	r3, r1
 8004882:	fbb0 f3f3 	udiv	r3, r0, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e012      	b.n	80048be <HAL_I2C_Init+0x18e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e58      	subs	r0, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	0099      	lsls	r1, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Init+0x196>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e022      	b.n	800490c <HAL_I2C_Init+0x1dc>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10e      	bne.n	80048ec <HAL_I2C_Init+0x1bc>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1e58      	subs	r0, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	440b      	add	r3, r1
 80048dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ea:	e00f      	b.n	800490c <HAL_I2C_Init+0x1dc>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1e58      	subs	r0, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	0099      	lsls	r1, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004902:	3301      	adds	r3, #1
 8004904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	6809      	ldr	r1, [r1, #0]
 8004910:	4313      	orrs	r3, r2
 8004912:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800493a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6911      	ldr	r1, [r2, #16]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	4311      	orrs	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	430b      	orrs	r3, r1
 800494e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	000186a0 	.word	0x000186a0
 80049a8:	001e847f 	.word	0x001e847f
 80049ac:	003d08ff 	.word	0x003d08ff
 80049b0:	431bde83 	.word	0x431bde83
 80049b4:	10624dd3 	.word	0x10624dd3

080049b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	817b      	strh	r3, [r7, #10]
 80049ca:	460b      	mov	r3, r1
 80049cc:	813b      	strh	r3, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d2:	f7ff fb09 	bl	8003fe8 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	f040 80d9 	bne.w	8004b98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2319      	movs	r3, #25
 80049ec:	2201      	movs	r2, #1
 80049ee:	496d      	ldr	r1, [pc, #436]	; (8004ba4 <HAL_I2C_Mem_Write+0x1ec>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fc7f 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
 80049fe:	e0cc      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_I2C_Mem_Write+0x56>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0c5      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d007      	beq.n	8004a34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2221      	movs	r2, #33	; 0x21
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a4d      	ldr	r2, [pc, #308]	; (8004ba8 <HAL_I2C_Mem_Write+0x1f0>)
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a76:	88f8      	ldrh	r0, [r7, #6]
 8004a78:	893a      	ldrh	r2, [r7, #8]
 8004a7a:	8979      	ldrh	r1, [r7, #10]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4603      	mov	r3, r0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fab6 	bl	8004ff8 <I2C_RequestMemoryWrite>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d052      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e081      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fd00 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d107      	bne.n	8004abe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06b      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d11b      	bne.n	8004b38 <HAL_I2C_Mem_Write+0x180>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d017      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1aa      	bne.n	8004a96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fcec 	bl	8005522 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d107      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e016      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e000      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b98:	2302      	movs	r3, #2
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	00100002 	.word	0x00100002
 8004ba8:	ffff0000 	.word	0xffff0000

08004bac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	813b      	strh	r3, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bc6:	f7ff fa0f 	bl	8003fe8 <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	f040 8208 	bne.w	8004fea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2319      	movs	r3, #25
 8004be0:	2201      	movs	r2, #1
 8004be2:	497b      	ldr	r1, [pc, #492]	; (8004dd0 <HAL_I2C_Mem_Read+0x224>)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fb85 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e1fb      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_I2C_Mem_Read+0x56>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e1f4      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d007      	beq.n	8004c28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2222      	movs	r2, #34	; 0x22
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a5b      	ldr	r2, [pc, #364]	; (8004dd4 <HAL_I2C_Mem_Read+0x228>)
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c6a:	88f8      	ldrh	r0, [r7, #6]
 8004c6c:	893a      	ldrh	r2, [r7, #8]
 8004c6e:	8979      	ldrh	r1, [r7, #10]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fa52 	bl	8005124 <I2C_RequestMemoryRead>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1b0      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d113      	bne.n	8004cba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e184      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d11b      	bne.n	8004cfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e164      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d11b      	bne.n	8004d3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	e144      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d50:	e138      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	f200 80f1 	bhi.w	8004f3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d123      	bne.n	8004dac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fc1b 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e139      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004daa:	e10b      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d14e      	bne.n	8004e52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	2200      	movs	r2, #0
 8004dbc:	4906      	ldr	r1, [pc, #24]	; (8004dd8 <HAL_I2C_Mem_Read+0x22c>)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fa98 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e10e      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
 8004dce:	bf00      	nop
 8004dd0:	00100002 	.word	0x00100002
 8004dd4:	ffff0000 	.word	0xffff0000
 8004dd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e50:	e0b8      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4966      	ldr	r1, [pc, #408]	; (8004ff4 <HAL_I2C_Mem_Read+0x448>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fa49 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0bf      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	494f      	ldr	r1, [pc, #316]	; (8004ff4 <HAL_I2C_Mem_Read+0x448>)
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fa1b 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e091      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f3c:	e042      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fb2e 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e04c      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d118      	bne.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f aec2 	bne.w	8004d52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3728      	adds	r7, #40	; 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	00010004 	.word	0x00010004

08004ff8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4603      	mov	r3, r0
 8005008:	817b      	strh	r3, [r7, #10]
 800500a:	460b      	mov	r3, r1
 800500c:	813b      	strh	r3, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005020:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2200      	movs	r2, #0
 800502a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f960 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005048:	d103      	bne.n	8005052 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e05f      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005064:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	6a3a      	ldr	r2, [r7, #32]
 800506a:	492d      	ldr	r1, [pc, #180]	; (8005120 <I2C_RequestMemoryWrite+0x128>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f998 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e04c      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005094:	6a39      	ldr	r1, [r7, #32]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fa02 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00d      	beq.n	80050be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d107      	bne.n	80050ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e02b      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c4:	893b      	ldrh	r3, [r7, #8]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]
 80050ce:	e021      	b.n	8005114 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050d0:	893b      	ldrh	r3, [r7, #8]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	6a39      	ldr	r1, [r7, #32]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f9dc 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d107      	bne.n	8005106 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005104:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e005      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800510a:	893b      	ldrh	r3, [r7, #8]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	00010002 	.word	0x00010002

08005124 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	4603      	mov	r3, r0
 8005134:	817b      	strh	r3, [r7, #10]
 8005136:	460b      	mov	r3, r1
 8005138:	813b      	strh	r3, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	2200      	movs	r2, #0
 8005166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f8c2 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d103      	bne.n	800518e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0aa      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	4952      	ldr	r1, [pc, #328]	; (80052f0 <I2C_RequestMemoryRead+0x1cc>)
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f8fa 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e097      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6a39      	ldr	r1, [r7, #32]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f964 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e076      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d105      	bne.n	800520c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]
 800520a:	e021      	b.n	8005250 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800520c:	893b      	ldrh	r3, [r7, #8]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	b29b      	uxth	r3, r3
 8005212:	b2da      	uxtb	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	6a39      	ldr	r1, [r7, #32]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f93e 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d107      	bne.n	8005242 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e050      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005246:	893b      	ldrh	r3, [r7, #8]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	6a39      	ldr	r1, [r7, #32]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f923 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	2b04      	cmp	r3, #4
 8005266:	d107      	bne.n	8005278 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005276:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e035      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2200      	movs	r2, #0
 8005294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f82b 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b2:	d103      	bne.n	80052bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e013      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052c0:	897b      	ldrh	r3, [r7, #10]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	4906      	ldr	r1, [pc, #24]	; (80052f0 <I2C_RequestMemoryRead+0x1cc>)
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f863 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	00010002 	.word	0x00010002

080052f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005304:	e025      	b.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d021      	beq.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530e:	f7fe fe6b 	bl	8003fe8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d116      	bne.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e023      	b.n	800539a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10d      	bne.n	8005378 <I2C_WaitOnFlagUntilTimeout+0x84>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	43da      	mvns	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4013      	ands	r3, r2
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	e00c      	b.n	8005392 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	43da      	mvns	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4013      	ands	r3, r2
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	429a      	cmp	r2, r3
 8005396:	d0b6      	beq.n	8005306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b0:	e051      	b.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c0:	d123      	bne.n	800540a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e046      	b.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d021      	beq.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fe fde9 	bl	8003fe8 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e020      	b.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10c      	bne.n	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf14      	ite	ne
 8005472:	2301      	movne	r3, #1
 8005474:	2300      	moveq	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	e00b      	b.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	43da      	mvns	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d18d      	bne.n	80053b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ac:	e02d      	b.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f8ce 	bl	8005650 <I2C_IsAcknowledgeFailed>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e02d      	b.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d021      	beq.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fe fd8f 	bl	8003fe8 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e007      	b.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d1ca      	bne.n	80054ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800552e:	e02d      	b.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f88d 	bl	8005650 <I2C_IsAcknowledgeFailed>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e02d      	b.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d021      	beq.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005548:	f7fe fd4e 	bl	8003fe8 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	429a      	cmp	r2, r3
 8005556:	d302      	bcc.n	800555e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e007      	b.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d1ca      	bne.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b0:	e042      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d119      	bne.n	80055f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e029      	b.n	8005648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f4:	f7fe fcf8 	bl	8003fe8 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d116      	bne.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f043 0220 	orr.w	r2, r3, #32
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e007      	b.n	8005648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d1b5      	bne.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d11b      	bne.n	80056a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	f043 0204 	orr.w	r2, r3, #4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e267      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d075      	beq.n	80057ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ce:	4b88      	ldr	r3, [pc, #544]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00c      	beq.n	80056f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056da:	4b85      	ldr	r3, [pc, #532]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d112      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e6:	4b82      	ldr	r3, [pc, #520]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056f2:	d10b      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	4b7e      	ldr	r3, [pc, #504]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05b      	beq.n	80057b8 <HAL_RCC_OscConfig+0x108>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d157      	bne.n	80057b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e242      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005714:	d106      	bne.n	8005724 <HAL_RCC_OscConfig+0x74>
 8005716:	4b76      	ldr	r3, [pc, #472]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a75      	ldr	r2, [pc, #468]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e01d      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x98>
 800572e:	4b70      	ldr	r3, [pc, #448]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6f      	ldr	r2, [pc, #444]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b6d      	ldr	r3, [pc, #436]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6c      	ldr	r2, [pc, #432]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005748:	4b69      	ldr	r3, [pc, #420]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a68      	ldr	r2, [pc, #416]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b66      	ldr	r3, [pc, #408]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a65      	ldr	r2, [pc, #404]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800575a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800575e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fe fc3e 	bl	8003fe8 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005770:	f7fe fc3a 	bl	8003fe8 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e207      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b5b      	ldr	r3, [pc, #364]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0xc0>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fe fc2a 	bl	8003fe8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005798:	f7fe fc26 	bl	8003fe8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1f3      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	4b51      	ldr	r3, [pc, #324]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0xe8>
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d063      	beq.n	800588e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057c6:	4b4a      	ldr	r3, [pc, #296]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d2:	4b47      	ldr	r3, [pc, #284]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11c      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057de:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e1c7      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4937      	ldr	r1, [pc, #220]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	e03a      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005820:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <HAL_RCC_OscConfig+0x244>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005826:	f7fe fbdf 	bl	8003fe8 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800582e:	f7fe fbdb 	bl	8003fe8 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1a8      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005840:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584c:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4925      	ldr	r1, [pc, #148]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
 8005860:	e015      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005862:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <HAL_RCC_OscConfig+0x244>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fe fbbe 	bl	8003fe8 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005870:	f7fe fbba 	bl	8003fe8 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e187      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005882:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d036      	beq.n	8005908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCC_OscConfig+0x248>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a8:	f7fe fb9e 	bl	8003fe8 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b0:	f7fe fb9a 	bl	8003fe8 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e167      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0x200>
 80058ce:	e01b      	b.n	8005908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_RCC_OscConfig+0x248>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d6:	f7fe fb87 	bl	8003fe8 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058dc:	e00e      	b.n	80058fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058de:	f7fe fb83 	bl	8003fe8 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d907      	bls.n	80058fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e150      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
 80058f0:	40023800 	.word	0x40023800
 80058f4:	42470000 	.word	0x42470000
 80058f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fc:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ea      	bne.n	80058de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8097 	beq.w	8005a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591a:	4b81      	ldr	r3, [pc, #516]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	4b7d      	ldr	r3, [pc, #500]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	4a7c      	ldr	r2, [pc, #496]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005934:	6413      	str	r3, [r2, #64]	; 0x40
 8005936:	4b7a      	ldr	r3, [pc, #488]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005946:	4b77      	ldr	r3, [pc, #476]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d118      	bne.n	8005984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005952:	4b74      	ldr	r3, [pc, #464]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a73      	ldr	r2, [pc, #460]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800595e:	f7fe fb43 	bl	8003fe8 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005966:	f7fe fb3f 	bl	8003fe8 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e10c      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005978:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d106      	bne.n	800599a <HAL_RCC_OscConfig+0x2ea>
 800598c:	4b64      	ldr	r3, [pc, #400]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4a63      	ldr	r2, [pc, #396]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6713      	str	r3, [r2, #112]	; 0x70
 8005998:	e01c      	b.n	80059d4 <HAL_RCC_OscConfig+0x324>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d10c      	bne.n	80059bc <HAL_RCC_OscConfig+0x30c>
 80059a2:	4b5f      	ldr	r3, [pc, #380]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	4a5e      	ldr	r2, [pc, #376]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059a8:	f043 0304 	orr.w	r3, r3, #4
 80059ac:	6713      	str	r3, [r2, #112]	; 0x70
 80059ae:	4b5c      	ldr	r3, [pc, #368]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a5b      	ldr	r2, [pc, #364]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ba:	e00b      	b.n	80059d4 <HAL_RCC_OscConfig+0x324>
 80059bc:	4b58      	ldr	r3, [pc, #352]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	4a57      	ldr	r2, [pc, #348]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	6713      	str	r3, [r2, #112]	; 0x70
 80059c8:	4b55      	ldr	r3, [pc, #340]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	4a54      	ldr	r2, [pc, #336]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059ce:	f023 0304 	bic.w	r3, r3, #4
 80059d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fe fb04 	bl	8003fe8 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e4:	f7fe fb00 	bl	8003fe8 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0cb      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fa:	4b49      	ldr	r3, [pc, #292]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ee      	beq.n	80059e4 <HAL_RCC_OscConfig+0x334>
 8005a06:	e014      	b.n	8005a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a08:	f7fe faee 	bl	8003fe8 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a10:	f7fe faea 	bl	8003fe8 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e0b5      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a26:	4b3e      	ldr	r3, [pc, #248]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ee      	bne.n	8005a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d105      	bne.n	8005a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a38:	4b39      	ldr	r3, [pc, #228]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	4a38      	ldr	r2, [pc, #224]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80a1 	beq.w	8005b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a4e:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d05c      	beq.n	8005b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d141      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a62:	4b31      	ldr	r3, [pc, #196]	; (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fabe 	bl	8003fe8 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a70:	f7fe faba 	bl	8003fe8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e087      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	4b27      	ldr	r3, [pc, #156]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	491b      	ldr	r1, [pc, #108]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abe:	f7fe fa93 	bl	8003fe8 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac6:	f7fe fa8f 	bl	8003fe8 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e05c      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x416>
 8005ae4:	e054      	b.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fe fa7c 	bl	8003fe8 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af4:	f7fe fa78 	bl	8003fe8 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e045      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x444>
 8005b12:	e03d      	b.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e038      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40007000 	.word	0x40007000
 8005b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <HAL_RCC_OscConfig+0x4ec>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d028      	beq.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d121      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d11a      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	3b01      	subs	r3, #1
 8005b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023800 	.word	0x40023800

08005ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0cc      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b68      	ldr	r3, [pc, #416]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d90c      	bls.n	8005bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b65      	ldr	r3, [pc, #404]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b63      	ldr	r3, [pc, #396]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0b8      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d020      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf4:	4b59      	ldr	r3, [pc, #356]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4a58      	ldr	r2, [pc, #352]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c0c:	4b53      	ldr	r3, [pc, #332]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4a52      	ldr	r2, [pc, #328]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c18:	4b50      	ldr	r3, [pc, #320]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	494d      	ldr	r1, [pc, #308]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d044      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3e:	4b47      	ldr	r3, [pc, #284]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d119      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e07f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d003      	beq.n	8005c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e06f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c6e:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e067      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c7e:	4b37      	ldr	r3, [pc, #220]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f023 0203 	bic.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4934      	ldr	r1, [pc, #208]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c90:	f7fe f9aa 	bl	8003fe8 <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7fe f9a6 	bl	8003fe8 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e04f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	4b2b      	ldr	r3, [pc, #172]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 020c 	and.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1eb      	bne.n	8005c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d20c      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e032      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf4:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4916      	ldr	r1, [pc, #88]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	490e      	ldr	r1, [pc, #56]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d26:	f000 f821 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	490a      	ldr	r1, [pc, #40]	; (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005d38:	5ccb      	ldrb	r3, [r1, r3]
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe f90a 	bl	8003f60 <HAL_InitTick>

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023c00 	.word	0x40023c00
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0800c318 	.word	0x0800c318
 8005d64:	20000008 	.word	0x20000008
 8005d68:	20000010 	.word	0x20000010

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d70:	b094      	sub	sp, #80	; 0x50
 8005d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	647b      	str	r3, [r7, #68]	; 0x44
 8005d78:	2300      	movs	r3, #0
 8005d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d84:	4b79      	ldr	r3, [pc, #484]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d00d      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x40>
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	f200 80e1 	bhi.w	8005f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x34>
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d9e:	e0db      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da0:	4b73      	ldr	r3, [pc, #460]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005da2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005da4:	e0db      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005da6:	4b73      	ldr	r3, [pc, #460]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8005da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005daa:	e0d8      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dac:	4b6f      	ldr	r3, [pc, #444]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005db6:	4b6d      	ldr	r3, [pc, #436]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d063      	beq.n	8005e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc2:	4b6a      	ldr	r3, [pc, #424]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	2200      	movs	r2, #0
 8005dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dde:	4622      	mov	r2, r4
 8005de0:	462b      	mov	r3, r5
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f04f 0100 	mov.w	r1, #0
 8005dea:	0159      	lsls	r1, r3, #5
 8005dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df0:	0150      	lsls	r0, r2, #5
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4621      	mov	r1, r4
 8005df8:	1a51      	subs	r1, r2, r1
 8005dfa:	6139      	str	r1, [r7, #16]
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e10:	4659      	mov	r1, fp
 8005e12:	018b      	lsls	r3, r1, #6
 8005e14:	4651      	mov	r1, sl
 8005e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	018a      	lsls	r2, r1, #6
 8005e1e:	4651      	mov	r1, sl
 8005e20:	ebb2 0801 	subs.w	r8, r2, r1
 8005e24:	4659      	mov	r1, fp
 8005e26:	eb63 0901 	sbc.w	r9, r3, r1
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3e:	4690      	mov	r8, r2
 8005e40:	4699      	mov	r9, r3
 8005e42:	4623      	mov	r3, r4
 8005e44:	eb18 0303 	adds.w	r3, r8, r3
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	eb49 0303 	adc.w	r3, r9, r3
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e5e:	4629      	mov	r1, r5
 8005e60:	024b      	lsls	r3, r1, #9
 8005e62:	4621      	mov	r1, r4
 8005e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e68:	4621      	mov	r1, r4
 8005e6a:	024a      	lsls	r2, r1, #9
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e72:	2200      	movs	r2, #0
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e7c:	f7fa fa00 	bl	8000280 <__aeabi_uldivmod>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4613      	mov	r3, r2
 8005e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e88:	e058      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8a:	4b38      	ldr	r3, [pc, #224]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	2200      	movs	r2, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	4611      	mov	r1, r2
 8005e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e9a:	623b      	str	r3, [r7, #32]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	f04f 0000 	mov.w	r0, #0
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	0159      	lsls	r1, r3, #5
 8005eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eb6:	0150      	lsls	r0, r2, #5
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005edc:	ebb2 040a 	subs.w	r4, r2, sl
 8005ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	00eb      	lsls	r3, r5, #3
 8005eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ef2:	00e2      	lsls	r2, r4, #3
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	4643      	mov	r3, r8
 8005efa:	18e3      	adds	r3, r4, r3
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	464b      	mov	r3, r9
 8005f00:	eb45 0303 	adc.w	r3, r5, r3
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f12:	4629      	mov	r1, r5
 8005f14:	028b      	lsls	r3, r1, #10
 8005f16:	4621      	mov	r1, r4
 8005f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	028a      	lsls	r2, r1, #10
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f26:	2200      	movs	r2, #0
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	61fa      	str	r2, [r7, #28]
 8005f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f30:	f7fa f9a6 	bl	8000280 <__aeabi_uldivmod>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4613      	mov	r3, r2
 8005f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	3301      	adds	r3, #1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f56:	e002      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3750      	adds	r7, #80	; 0x50
 8005f64:	46bd      	mov	sp, r7
 8005f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	00f42400 	.word	0x00f42400
 8005f74:	007a1200 	.word	0x007a1200

08005f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f7c:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000008 	.word	0x20000008

08005f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f94:	f7ff fff0 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	0a9b      	lsrs	r3, r3, #10
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	4903      	ldr	r1, [pc, #12]	; (8005fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa6:	5ccb      	ldrb	r3, [r1, r3]
 8005fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	0800c328 	.word	0x0800c328

08005fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fbc:	f7ff ffdc 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	0b5b      	lsrs	r3, r3, #13
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	4903      	ldr	r1, [pc, #12]	; (8005fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fce:	5ccb      	ldrb	r3, [r1, r3]
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	0800c328 	.word	0x0800c328

08005fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e07b      	b.n	80060ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006002:	d009      	beq.n	8006018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	61da      	str	r2, [r3, #28]
 800600a:	e005      	b.n	8006018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fd fb6c 	bl	8003710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609c:	ea42 0103 	orr.w	r1, r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	0c1b      	lsrs	r3, r3, #16
 80060b6:	f003 0104 	and.w	r1, r3, #4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	f003 0210 	and.w	r2, r3, #16
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b088      	sub	sp, #32
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	603b      	str	r3, [r7, #0]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_SPI_Transmit+0x22>
 8006110:	2302      	movs	r3, #2
 8006112:	e126      	b.n	8006362 <HAL_SPI_Transmit+0x270>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800611c:	f7fd ff64 	bl	8003fe8 <HAL_GetTick>
 8006120:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d002      	beq.n	8006138 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006132:	2302      	movs	r3, #2
 8006134:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006136:	e10b      	b.n	8006350 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Transmit+0x52>
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006148:	e102      	b.n	8006350 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2203      	movs	r2, #3
 800614e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006190:	d10f      	bne.n	80061b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	d007      	beq.n	80061d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d14b      	bne.n	8006272 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_SPI_Transmit+0xf6>
 80061e2:	8afb      	ldrh	r3, [r7, #22]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d13e      	bne.n	8006266 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	1c9a      	adds	r2, r3, #2
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800620c:	e02b      	b.n	8006266 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b02      	cmp	r3, #2
 800621a:	d112      	bne.n	8006242 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	881a      	ldrh	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	1c9a      	adds	r2, r3, #2
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006240:	e011      	b.n	8006266 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006242:	f7fd fed1 	bl	8003fe8 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d803      	bhi.n	800625a <HAL_SPI_Transmit+0x168>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Transmit+0x16e>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006264:	e074      	b.n	8006350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ce      	bne.n	800620e <HAL_SPI_Transmit+0x11c>
 8006270:	e04c      	b.n	800630c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_SPI_Transmit+0x18e>
 800627a:	8afb      	ldrh	r3, [r7, #22]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d140      	bne.n	8006302 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	7812      	ldrb	r2, [r2, #0]
 800628c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062a6:	e02c      	b.n	8006302 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d113      	bne.n	80062de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	7812      	ldrb	r2, [r2, #0]
 80062c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	86da      	strh	r2, [r3, #54]	; 0x36
 80062dc:	e011      	b.n	8006302 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062de:	f7fd fe83 	bl	8003fe8 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d803      	bhi.n	80062f6 <HAL_SPI_Transmit+0x204>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d102      	bne.n	80062fc <HAL_SPI_Transmit+0x20a>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006300:	e026      	b.n	8006350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1cd      	bne.n	80062a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fbcb 	bl	8006aac <SPI_EndRxTxTransaction>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e000      	b.n	8006350 <HAL_SPI_Transmit+0x25e>
  }

error:
 800634e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006360:	7ffb      	ldrb	r3, [r7, #31]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b088      	sub	sp, #32
 800636e:	af02      	add	r7, sp, #8
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006386:	d112      	bne.n	80063ae <HAL_SPI_Receive+0x44>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10e      	bne.n	80063ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2204      	movs	r2, #4
 8006394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006398:	88fa      	ldrh	r2, [r7, #6]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4613      	mov	r3, r2
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f8f1 	bl	800658c <HAL_SPI_TransmitReceive>
 80063aa:	4603      	mov	r3, r0
 80063ac:	e0ea      	b.n	8006584 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_SPI_Receive+0x52>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e0e3      	b.n	8006584 <HAL_SPI_Receive+0x21a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c4:	f7fd fe10 	bl	8003fe8 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d002      	beq.n	80063dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063da:	e0ca      	b.n	8006572 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SPI_Receive+0x7e>
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063ec:	e0c1      	b.n	8006572 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2204      	movs	r2, #4
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006434:	d10f      	bne.n	8006456 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006454:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d007      	beq.n	8006474 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d162      	bne.n	8006542 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800647c:	e02e      	b.n	80064dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d115      	bne.n	80064b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f103 020c 	add.w	r2, r3, #12
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064b6:	e011      	b.n	80064dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b8:	f7fd fd96 	bl	8003fe8 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d803      	bhi.n	80064d0 <HAL_SPI_Receive+0x166>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Receive+0x16c>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064da:	e04a      	b.n	8006572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1cb      	bne.n	800647e <HAL_SPI_Receive+0x114>
 80064e6:	e031      	b.n	800654c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d113      	bne.n	800651e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	b292      	uxth	r2, r2
 8006502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	1c9a      	adds	r2, r3, #2
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800651c:	e011      	b.n	8006542 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800651e:	f7fd fd63 	bl	8003fe8 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d803      	bhi.n	8006536 <HAL_SPI_Receive+0x1cc>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d102      	bne.n	800653c <HAL_SPI_Receive+0x1d2>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006540:	e017      	b.n	8006572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1cd      	bne.n	80064e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fa45 	bl	80069e0 <SPI_EndRxTransaction>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
 800656e:	e000      	b.n	8006572 <HAL_SPI_Receive+0x208>
  }

error :
 8006570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	; 0x30
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800659a:	2301      	movs	r3, #1
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_SPI_TransmitReceive+0x26>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e18a      	b.n	80068c8 <HAL_SPI_TransmitReceive+0x33c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ba:	f7fd fd15 	bl	8003fe8 <HAL_GetTick>
 80065be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065d0:	887b      	ldrh	r3, [r7, #2]
 80065d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d00f      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x70>
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e2:	d107      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x68>
 80065ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d003      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065f4:	2302      	movs	r3, #2
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065fa:	e15b      	b.n	80068b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_SPI_TransmitReceive+0x82>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_SPI_TransmitReceive+0x82>
 8006608:	887b      	ldrh	r3, [r7, #2]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006614:	e14e      	b.n	80068b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b04      	cmp	r3, #4
 8006620:	d003      	beq.n	800662a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2205      	movs	r2, #5
 8006626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	887a      	ldrh	r2, [r7, #2]
 800663a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	887a      	ldrh	r2, [r7, #2]
 8006640:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	887a      	ldrh	r2, [r7, #2]
 800664c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	887a      	ldrh	r2, [r7, #2]
 8006652:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d007      	beq.n	800667e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006686:	d178      	bne.n	800677a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_SPI_TransmitReceive+0x10a>
 8006690:	8b7b      	ldrh	r3, [r7, #26]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d166      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ba:	e053      	b.n	8006764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d11b      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x176>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d016      	beq.n	8006702 <HAL_SPI_TransmitReceive+0x176>
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d113      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	881a      	ldrh	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b01      	cmp	r3, #1
 800670e:	d119      	bne.n	8006744 <HAL_SPI_TransmitReceive+0x1b8>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	b292      	uxth	r2, r2
 8006726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	1c9a      	adds	r2, r3, #2
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006740:	2301      	movs	r3, #1
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006744:	f7fd fc50 	bl	8003fe8 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006750:	429a      	cmp	r2, r3
 8006752:	d807      	bhi.n	8006764 <HAL_SPI_TransmitReceive+0x1d8>
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	d003      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006762:	e0a7      	b.n	80068b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1a6      	bne.n	80066bc <HAL_SPI_TransmitReceive+0x130>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1a1      	bne.n	80066bc <HAL_SPI_TransmitReceive+0x130>
 8006778:	e07c      	b.n	8006874 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <HAL_SPI_TransmitReceive+0x1fc>
 8006782:	8b7b      	ldrh	r3, [r7, #26]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d16b      	bne.n	8006860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	7812      	ldrb	r2, [r2, #0]
 8006794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ae:	e057      	b.n	8006860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d11c      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x26c>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d017      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x26c>
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d114      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	7812      	ldrb	r2, [r2, #0]
 80067da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d119      	bne.n	800683a <HAL_SPI_TransmitReceive+0x2ae>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d014      	beq.n	800683a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006836:	2301      	movs	r3, #1
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800683a:	f7fd fbd5 	bl	8003fe8 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006846:	429a      	cmp	r2, r3
 8006848:	d803      	bhi.n	8006852 <HAL_SPI_TransmitReceive+0x2c6>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d102      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x2cc>
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800685e:	e029      	b.n	80068b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1a2      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0x224>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d19d      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f917 	bl	8006aac <SPI_EndRxTxTransaction>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006890:	e010      	b.n	80068b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	e000      	b.n	80068b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3730      	adds	r7, #48	; 0x30
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	4613      	mov	r3, r2
 80068de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068e0:	f7fd fb82 	bl	8003fe8 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068f0:	f7fd fb7a 	bl	8003fe8 <HAL_GetTick>
 80068f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068f6:	4b39      	ldr	r3, [pc, #228]	; (80069dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	015b      	lsls	r3, r3, #5
 80068fc:	0d1b      	lsrs	r3, r3, #20
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006906:	e054      	b.n	80069b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d050      	beq.n	80069b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006910:	f7fd fb6a 	bl	8003fe8 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	429a      	cmp	r2, r3
 800691e:	d902      	bls.n	8006926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d13d      	bne.n	80069a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693e:	d111      	bne.n	8006964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d004      	beq.n	8006954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006952:	d107      	bne.n	8006964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696c:	d10f      	bne.n	800698e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800698c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e017      	b.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4013      	ands	r3, r2
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	bf0c      	ite	eq
 80069c2:	2301      	moveq	r3, #1
 80069c4:	2300      	movne	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d19b      	bne.n	8006908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000008 	.word	0x20000008

080069e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f4:	d111      	bne.n	8006a1a <SPI_EndRxTransaction+0x3a>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fe:	d004      	beq.n	8006a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a08:	d107      	bne.n	8006a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a22:	d12a      	bne.n	8006a7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2c:	d012      	beq.n	8006a54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	2180      	movs	r1, #128	; 0x80
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff ff49 	bl	80068d0 <SPI_WaitFlagStateUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02d      	beq.n	8006aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e026      	b.n	8006aa2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff ff36 	bl	80068d0 <SPI_WaitFlagStateUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d01a      	beq.n	8006aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	f043 0220 	orr.w	r2, r3, #32
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e013      	b.n	8006aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	2101      	movs	r1, #1
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7ff ff23 	bl	80068d0 <SPI_WaitFlagStateUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f043 0220 	orr.w	r2, r3, #32
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e000      	b.n	8006aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <SPI_EndRxTxTransaction+0x7c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a1b      	ldr	r2, [pc, #108]	; (8006b2c <SPI_EndRxTxTransaction+0x80>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	0d5b      	lsrs	r3, r3, #21
 8006ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ac8:	fb02 f303 	mul.w	r3, r2, r3
 8006acc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad6:	d112      	bne.n	8006afe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2180      	movs	r1, #128	; 0x80
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff fef4 	bl	80068d0 <SPI_WaitFlagStateUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d016      	beq.n	8006b1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e00f      	b.n	8006b1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b14:	2b80      	cmp	r3, #128	; 0x80
 8006b16:	d0f2      	beq.n	8006afe <SPI_EndRxTxTransaction+0x52>
 8006b18:	e000      	b.n	8006b1c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b1a:	bf00      	nop
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000008 	.word	0x20000008
 8006b2c:	165e9f81 	.word	0x165e9f81

08006b30 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e034      	b.n	8006bb0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7fb f8e6 	bl	8001d2c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3308      	adds	r3, #8
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f001 fd1a 	bl	80085a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	f001 fd64 	bl	8008648 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6858      	ldr	r0, [r3, #4]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	f001 fd99 	bl	80086c4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6892      	ldr	r2, [r2, #8]
 8006b9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	6892      	ldr	r2, [r2, #8]
 8006ba6:	f041 0101 	orr.w	r1, r1, #1
 8006baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e041      	b.n	8006c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fc fed8 	bl	8003994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	f000 fa96 	bl	8007128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d001      	beq.n	8006c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e04e      	b.n	8006d0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a23      	ldr	r2, [pc, #140]	; (8006d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d022      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d013      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a18      	ldr	r2, [pc, #96]	; (8006d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d111      	bne.n	8006cfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d010      	beq.n	8006d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0201 	orr.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfa:	e007      	b.n	8006d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40010400 	.word	0x40010400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40001800 	.word	0x40001800

08006d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d122      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0202 	mvn.w	r2, #2
 8006d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f9b5 	bl	80070ea <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9a7 	bl	80070d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f9b8 	bl	80070fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d122      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d11b      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0204 	mvn.w	r2, #4
 8006db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f98b 	bl	80070ea <HAL_TIM_IC_CaptureCallback>
 8006dd4:	e005      	b.n	8006de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f97d 	bl	80070d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f98e 	bl	80070fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d122      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d11b      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0208 	mvn.w	r2, #8
 8006e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f961 	bl	80070ea <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f953 	bl	80070d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f964 	bl	80070fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d122      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d11b      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0210 	mvn.w	r2, #16
 8006e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2208      	movs	r2, #8
 8006e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f937 	bl	80070ea <HAL_TIM_IC_CaptureCallback>
 8006e7c:	e005      	b.n	8006e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f929 	bl	80070d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f93a 	bl	80070fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10e      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0201 	mvn.w	r2, #1
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fc fbca 	bl	8003650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b80      	cmp	r3, #128	; 0x80
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b80      	cmp	r3, #128	; 0x80
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fae0 	bl	80074a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d10e      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f8ff 	bl	8007112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0220 	mvn.w	r2, #32
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 faaa 	bl	8007494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <HAL_TIM_ConfigClockSource+0x1c>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e0b4      	b.n	80070ce <HAL_TIM_ConfigClockSource+0x186>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f9c:	d03e      	beq.n	800701c <HAL_TIM_ConfigClockSource+0xd4>
 8006f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa2:	f200 8087 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006faa:	f000 8086 	beq.w	80070ba <HAL_TIM_ConfigClockSource+0x172>
 8006fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb2:	d87f      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb4:	2b70      	cmp	r3, #112	; 0x70
 8006fb6:	d01a      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0xa6>
 8006fb8:	2b70      	cmp	r3, #112	; 0x70
 8006fba:	d87b      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fbc:	2b60      	cmp	r3, #96	; 0x60
 8006fbe:	d050      	beq.n	8007062 <HAL_TIM_ConfigClockSource+0x11a>
 8006fc0:	2b60      	cmp	r3, #96	; 0x60
 8006fc2:	d877      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc4:	2b50      	cmp	r3, #80	; 0x50
 8006fc6:	d03c      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0xfa>
 8006fc8:	2b50      	cmp	r3, #80	; 0x50
 8006fca:	d873      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d058      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0x13a>
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d86f      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd4:	2b30      	cmp	r3, #48	; 0x30
 8006fd6:	d064      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x15a>
 8006fd8:	2b30      	cmp	r3, #48	; 0x30
 8006fda:	d86b      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d060      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x15a>
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d867      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d05c      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x15a>
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d05a      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x15a>
 8006fec:	e062      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6899      	ldr	r1, [r3, #8]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f000 f9ad 	bl	800735c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	609a      	str	r2, [r3, #8]
      break;
 800701a:	e04f      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	6899      	ldr	r1, [r3, #8]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f000 f996 	bl	800735c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800703e:	609a      	str	r2, [r3, #8]
      break;
 8007040:	e03c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6859      	ldr	r1, [r3, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	461a      	mov	r2, r3
 8007050:	f000 f90a 	bl	8007268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2150      	movs	r1, #80	; 0x50
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f963 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8007060:	e02c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6859      	ldr	r1, [r3, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	461a      	mov	r2, r3
 8007070:	f000 f929 	bl	80072c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2160      	movs	r1, #96	; 0x60
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f953 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8007080:	e01c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6859      	ldr	r1, [r3, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	461a      	mov	r2, r3
 8007090:	f000 f8ea 	bl	8007268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2140      	movs	r1, #64	; 0x40
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f943 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 80070a0:	e00c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	4610      	mov	r0, r2
 80070ae:	f000 f93a 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 80070b2:	e003      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	73fb      	strb	r3, [r7, #15]
      break;
 80070b8:	e000      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a40      	ldr	r2, [pc, #256]	; (800723c <TIM_Base_SetConfig+0x114>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d013      	beq.n	8007168 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007146:	d00f      	beq.n	8007168 <TIM_Base_SetConfig+0x40>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a3d      	ldr	r2, [pc, #244]	; (8007240 <TIM_Base_SetConfig+0x118>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00b      	beq.n	8007168 <TIM_Base_SetConfig+0x40>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a3c      	ldr	r2, [pc, #240]	; (8007244 <TIM_Base_SetConfig+0x11c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d007      	beq.n	8007168 <TIM_Base_SetConfig+0x40>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a3b      	ldr	r2, [pc, #236]	; (8007248 <TIM_Base_SetConfig+0x120>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_Base_SetConfig+0x40>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a3a      	ldr	r2, [pc, #232]	; (800724c <TIM_Base_SetConfig+0x124>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d108      	bne.n	800717a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2f      	ldr	r2, [pc, #188]	; (800723c <TIM_Base_SetConfig+0x114>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d02b      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007188:	d027      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2c      	ldr	r2, [pc, #176]	; (8007240 <TIM_Base_SetConfig+0x118>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d023      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2b      	ldr	r2, [pc, #172]	; (8007244 <TIM_Base_SetConfig+0x11c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d01f      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a2a      	ldr	r2, [pc, #168]	; (8007248 <TIM_Base_SetConfig+0x120>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01b      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a29      	ldr	r2, [pc, #164]	; (800724c <TIM_Base_SetConfig+0x124>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d017      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a28      	ldr	r2, [pc, #160]	; (8007250 <TIM_Base_SetConfig+0x128>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a27      	ldr	r2, [pc, #156]	; (8007254 <TIM_Base_SetConfig+0x12c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00f      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a26      	ldr	r2, [pc, #152]	; (8007258 <TIM_Base_SetConfig+0x130>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00b      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a25      	ldr	r2, [pc, #148]	; (800725c <TIM_Base_SetConfig+0x134>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d007      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a24      	ldr	r2, [pc, #144]	; (8007260 <TIM_Base_SetConfig+0x138>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d003      	beq.n	80071da <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a23      	ldr	r2, [pc, #140]	; (8007264 <TIM_Base_SetConfig+0x13c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d108      	bne.n	80071ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a0a      	ldr	r2, [pc, #40]	; (800723c <TIM_Base_SetConfig+0x114>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_Base_SetConfig+0xf8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a0c      	ldr	r2, [pc, #48]	; (800724c <TIM_Base_SetConfig+0x124>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d103      	bne.n	8007228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	615a      	str	r2, [r3, #20]
}
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40010000 	.word	0x40010000
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40010400 	.word	0x40010400
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800
 800725c:	40001800 	.word	0x40001800
 8007260:	40001c00 	.word	0x40001c00
 8007264:	40002000 	.word	0x40002000

08007268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0201 	bic.w	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 030a 	bic.w	r3, r3, #10
 80072a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b087      	sub	sp, #28
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0210 	bic.w	r2, r3, #16
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	031b      	lsls	r3, r3, #12
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	f043 0307 	orr.w	r3, r3, #7
 8007348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	609a      	str	r2, [r3, #8]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	021a      	lsls	r2, r3, #8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	431a      	orrs	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4313      	orrs	r3, r2
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e05a      	b.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a21      	ldr	r2, [pc, #132]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007400:	d01d      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a1d      	ldr	r2, [pc, #116]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a18      	ldr	r2, [pc, #96]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a17      	ldr	r2, [pc, #92]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a15      	ldr	r2, [pc, #84]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d10c      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4313      	orrs	r3, r2
 800744e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40010000 	.word	0x40010000
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40000c00 	.word	0x40000c00
 8007488:	40010400 	.word	0x40010400
 800748c:	40014000 	.word	0x40014000
 8007490:	40001800 	.word	0x40001800

08007494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e03f      	b.n	800754e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fc fc62 	bl	8003dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2224      	movs	r2, #36	; 0x24
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fddb 	bl	80080bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695a      	ldr	r2, [r3, #20]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b08a      	sub	sp, #40	; 0x28
 800755a:	af02      	add	r7, sp, #8
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	4613      	mov	r3, r2
 8007564:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b20      	cmp	r3, #32
 8007574:	d17c      	bne.n	8007670 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_UART_Transmit+0x2c>
 800757c:	88fb      	ldrh	r3, [r7, #6]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e075      	b.n	8007672 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_UART_Transmit+0x3e>
 8007590:	2302      	movs	r3, #2
 8007592:	e06e      	b.n	8007672 <HAL_UART_Transmit+0x11c>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2221      	movs	r2, #33	; 0x21
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075aa:	f7fc fd1d 	bl	8003fe8 <HAL_GetTick>
 80075ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c4:	d108      	bne.n	80075d8 <HAL_UART_Transmit+0x82>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d104      	bne.n	80075d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	e003      	b.n	80075e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80075e8:	e02a      	b.n	8007640 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2180      	movs	r1, #128	; 0x80
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fb1f 	bl	8007c38 <UART_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e036      	b.n	8007672 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	3302      	adds	r3, #2
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	e007      	b.n	8007632 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	3301      	adds	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1cf      	bne.n	80075ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2200      	movs	r2, #0
 8007652:	2140      	movs	r1, #64	; 0x40
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 faef 	bl	8007c38 <UART_WaitOnFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e006      	b.n	8007672 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	4613      	mov	r3, r2
 8007686:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b20      	cmp	r3, #32
 8007692:	d11d      	bne.n	80076d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_UART_Receive_IT+0x26>
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e016      	b.n	80076d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_UART_Receive_IT+0x38>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e00f      	b.n	80076d2 <HAL_UART_Receive_IT+0x58>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076c0:	88fb      	ldrh	r3, [r7, #6]
 80076c2:	461a      	mov	r2, r3
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fb24 	bl	8007d14 <UART_Start_Receive_IT>
 80076cc:	4603      	mov	r3, r0
 80076ce:	e000      	b.n	80076d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b0ba      	sub	sp, #232	; 0xe8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007702:	2300      	movs	r3, #0
 8007704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007708:	2300      	movs	r3, #0
 800770a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800771a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10f      	bne.n	8007742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <HAL_UART_IRQHandler+0x66>
 800772e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc03 	bl	8007f46 <UART_Receive_IT>
      return;
 8007740:	e256      	b.n	8007bf0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 80de 	beq.w	8007908 <HAL_UART_IRQHandler+0x22c>
 800774c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800775c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 80d1 	beq.w	8007908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <HAL_UART_IRQHandler+0xae>
 8007772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	f043 0201 	orr.w	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800778a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <HAL_UART_IRQHandler+0xd2>
 8007796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f043 0202 	orr.w	r2, r3, #2
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <HAL_UART_IRQHandler+0xf6>
 80077ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f043 0204 	orr.w	r2, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0308 	and.w	r3, r3, #8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d011      	beq.n	8007802 <HAL_UART_IRQHandler+0x126>
 80077de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f043 0208 	orr.w	r2, r3, #8
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 81ed 	beq.w	8007be6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800780c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_UART_IRQHandler+0x14e>
 8007818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fb8e 	bl	8007f46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b40      	cmp	r3, #64	; 0x40
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d103      	bne.n	8007856 <HAL_UART_IRQHandler+0x17a>
 800784e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d04f      	beq.n	80078f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa96 	bl	8007d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d141      	bne.n	80078ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3314      	adds	r3, #20
 8007870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3314      	adds	r3, #20
 8007892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800789a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1d9      	bne.n	800786a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d013      	beq.n	80078e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c2:	4a7d      	ldr	r2, [pc, #500]	; (8007ab8 <HAL_UART_IRQHandler+0x3dc>)
 80078c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fc fd3d 	bl	800434a <HAL_DMA_Abort_IT>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d016      	beq.n	8007904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e00e      	b.n	8007904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f990 	bl	8007c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	e00a      	b.n	8007904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f98c 	bl	8007c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f4:	e006      	b.n	8007904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f988 	bl	8007c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007902:	e170      	b.n	8007be6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007904:	bf00      	nop
    return;
 8007906:	e16e      	b.n	8007be6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	2b01      	cmp	r3, #1
 800790e:	f040 814a 	bne.w	8007ba6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8143 	beq.w	8007ba6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 813c 	beq.w	8007ba6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	60bb      	str	r3, [r7, #8]
 8007942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	f040 80b4 	bne.w	8007abc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8140 	beq.w	8007bea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800796e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007972:	429a      	cmp	r2, r3
 8007974:	f080 8139 	bcs.w	8007bea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800797e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800798a:	f000 8088 	beq.w	8007a9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	330c      	adds	r3, #12
 8007994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	330c      	adds	r3, #12
 80079b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1d9      	bne.n	800798e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3314      	adds	r3, #20
 80079e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ec:	f023 0301 	bic.w	r3, r3, #1
 80079f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3314      	adds	r3, #20
 80079fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e1      	bne.n	80079da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3314      	adds	r3, #20
 8007a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e3      	bne.n	8007a16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6e:	f023 0310 	bic.w	r3, r3, #16
 8007a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a80:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e3      	bne.n	8007a5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fc fbe6 	bl	800426a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f8b6 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ab4:	e099      	b.n	8007bea <HAL_UART_IRQHandler+0x50e>
 8007ab6:	bf00      	nop
 8007ab8:	08007e4f 	.word	0x08007e4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 808b 	beq.w	8007bee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8086 	beq.w	8007bee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b06:	647a      	str	r2, [r7, #68]	; 0x44
 8007b08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e3      	bne.n	8007ae2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3314      	adds	r3, #20
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3314      	adds	r3, #20
 8007b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e3      	bne.n	8007b1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	330c      	adds	r3, #12
 8007b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0310 	bic.w	r3, r3, #16
 8007b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b84:	61fa      	str	r2, [r7, #28]
 8007b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	69b9      	ldr	r1, [r7, #24]
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	617b      	str	r3, [r7, #20]
   return(result);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e3      	bne.n	8007b60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f83e 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ba4:	e023      	b.n	8007bee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x4ea>
 8007bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f959 	bl	8007e76 <UART_Transmit_IT>
    return;
 8007bc4:	e014      	b.n	8007bf0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x514>
 8007bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d008      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f999 	bl	8007f16 <UART_EndTransmit_IT>
    return;
 8007be4:	e004      	b.n	8007bf0 <HAL_UART_IRQHandler+0x514>
    return;
 8007be6:	bf00      	nop
 8007be8:	e002      	b.n	8007bf0 <HAL_UART_IRQHandler+0x514>
      return;
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <HAL_UART_IRQHandler+0x514>
      return;
 8007bee:	bf00      	nop
  }
}
 8007bf0:	37e8      	adds	r7, #232	; 0xe8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop

08007bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b090      	sub	sp, #64	; 0x40
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c48:	e050      	b.n	8007cec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c50:	d04c      	beq.n	8007cec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c58:	f7fc f9c6 	bl	8003fe8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d241      	bcs.n	8007cec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	330c      	adds	r3, #12
 8007c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c88:	637a      	str	r2, [r7, #52]	; 0x34
 8007c8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e5      	bne.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	613b      	str	r3, [r7, #16]
   return(result);
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f023 0301 	bic.w	r3, r3, #1
 8007cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3314      	adds	r3, #20
 8007cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cbc:	623a      	str	r2, [r7, #32]
 8007cbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	69f9      	ldr	r1, [r7, #28]
 8007cc2:	6a3a      	ldr	r2, [r7, #32]
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e5      	bne.n	8007c9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e00f      	b.n	8007d0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2301      	moveq	r3, #1
 8007cfe:	2300      	movne	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d09f      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3740      	adds	r7, #64	; 0x40
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	88fa      	ldrh	r2, [r7, #6]
 8007d2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2222      	movs	r2, #34	; 0x22
 8007d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d58:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	695a      	ldr	r2, [r3, #20]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0201 	orr.w	r2, r2, #1
 8007d68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0220 	orr.w	r2, r2, #32
 8007d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b095      	sub	sp, #84	; 0x54
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	330c      	adds	r3, #12
 8007dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007db0:	643a      	str	r2, [r7, #64]	; 0x40
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e5      	bne.n	8007d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f023 0301 	bic.w	r3, r3, #1
 8007dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3314      	adds	r3, #20
 8007de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e5      	bne.n	8007dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d119      	bne.n	8007e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	330c      	adds	r3, #12
 8007e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f023 0310 	bic.w	r3, r3, #16
 8007e16:	647b      	str	r3, [r7, #68]	; 0x44
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e20:	61ba      	str	r2, [r7, #24]
 8007e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6979      	ldr	r1, [r7, #20]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e5      	bne.n	8007e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e42:	bf00      	nop
 8007e44:	3754      	adds	r7, #84	; 0x54
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fecf 	bl	8007c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b21      	cmp	r3, #33	; 0x21
 8007e88:	d13e      	bne.n	8007f08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e92:	d114      	bne.n	8007ebe <UART_Transmit_IT+0x48>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d110      	bne.n	8007ebe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	1c9a      	adds	r2, r3, #2
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	621a      	str	r2, [r3, #32]
 8007ebc:	e008      	b.n	8007ed0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	1c59      	adds	r1, r3, #1
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6211      	str	r1, [r2, #32]
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	4619      	mov	r1, r3
 8007ede:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10f      	bne.n	8007f04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e000      	b.n	8007f0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f08:	2302      	movs	r3, #2
  }
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff fe5e 	bl	8007bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b08c      	sub	sp, #48	; 0x30
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b22      	cmp	r3, #34	; 0x22
 8007f58:	f040 80ab 	bne.w	80080b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f64:	d117      	bne.n	8007f96 <UART_Receive_IT+0x50>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d113      	bne.n	8007f96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	1c9a      	adds	r2, r3, #2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28
 8007f94:	e026      	b.n	8007fe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa8:	d007      	beq.n	8007fba <UART_Receive_IT+0x74>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10a      	bne.n	8007fc8 <UART_Receive_IT+0x82>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	e008      	b.n	8007fda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d15a      	bne.n	80080ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0220 	bic.w	r2, r2, #32
 8008006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	2b01      	cmp	r3, #1
 8008036:	d135      	bne.n	80080a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	330c      	adds	r3, #12
 8008044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	613b      	str	r3, [r7, #16]
   return(result);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f023 0310 	bic.w	r3, r3, #16
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	330c      	adds	r3, #12
 800805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805e:	623a      	str	r2, [r7, #32]
 8008060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	69f9      	ldr	r1, [r7, #28]
 8008064:	6a3a      	ldr	r2, [r7, #32]
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	61bb      	str	r3, [r7, #24]
   return(result);
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e5      	bne.n	800803e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b10      	cmp	r3, #16
 800807e:	d10a      	bne.n	8008096 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff fdbf 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
 80080a2:	e002      	b.n	80080aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7fb fcc3 	bl	8003a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e002      	b.n	80080b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e000      	b.n	80080b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080b2:	2302      	movs	r3, #2
  }
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3730      	adds	r7, #48	; 0x30
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c0:	b0c0      	sub	sp, #256	; 0x100
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d8:	68d9      	ldr	r1, [r3, #12]
 80080da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	ea40 0301 	orr.w	r3, r0, r1
 80080e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	4313      	orrs	r3, r2
 8008104:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008114:	f021 010c 	bic.w	r1, r1, #12
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008122:	430b      	orrs	r3, r1
 8008124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008136:	6999      	ldr	r1, [r3, #24]
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	ea40 0301 	orr.w	r3, r0, r1
 8008142:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4b8f      	ldr	r3, [pc, #572]	; (8008388 <UART_SetConfig+0x2cc>)
 800814c:	429a      	cmp	r2, r3
 800814e:	d005      	beq.n	800815c <UART_SetConfig+0xa0>
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	4b8d      	ldr	r3, [pc, #564]	; (800838c <UART_SetConfig+0x2d0>)
 8008158:	429a      	cmp	r2, r3
 800815a:	d104      	bne.n	8008166 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800815c:	f7fd ff2c 	bl	8005fb8 <HAL_RCC_GetPCLK2Freq>
 8008160:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008164:	e003      	b.n	800816e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008166:	f7fd ff13 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 800816a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008178:	f040 810c 	bne.w	8008394 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800817c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008180:	2200      	movs	r2, #0
 8008182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008186:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800818a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800818e:	4622      	mov	r2, r4
 8008190:	462b      	mov	r3, r5
 8008192:	1891      	adds	r1, r2, r2
 8008194:	65b9      	str	r1, [r7, #88]	; 0x58
 8008196:	415b      	adcs	r3, r3
 8008198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800819a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800819e:	4621      	mov	r1, r4
 80081a0:	eb12 0801 	adds.w	r8, r2, r1
 80081a4:	4629      	mov	r1, r5
 80081a6:	eb43 0901 	adc.w	r9, r3, r1
 80081aa:	f04f 0200 	mov.w	r2, #0
 80081ae:	f04f 0300 	mov.w	r3, #0
 80081b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081be:	4690      	mov	r8, r2
 80081c0:	4699      	mov	r9, r3
 80081c2:	4623      	mov	r3, r4
 80081c4:	eb18 0303 	adds.w	r3, r8, r3
 80081c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081cc:	462b      	mov	r3, r5
 80081ce:	eb49 0303 	adc.w	r3, r9, r3
 80081d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081ea:	460b      	mov	r3, r1
 80081ec:	18db      	adds	r3, r3, r3
 80081ee:	653b      	str	r3, [r7, #80]	; 0x50
 80081f0:	4613      	mov	r3, r2
 80081f2:	eb42 0303 	adc.w	r3, r2, r3
 80081f6:	657b      	str	r3, [r7, #84]	; 0x54
 80081f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008200:	f7f8 f83e 	bl	8000280 <__aeabi_uldivmod>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4b61      	ldr	r3, [pc, #388]	; (8008390 <UART_SetConfig+0x2d4>)
 800820a:	fba3 2302 	umull	r2, r3, r3, r2
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	011c      	lsls	r4, r3, #4
 8008212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008216:	2200      	movs	r2, #0
 8008218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800821c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008220:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	1891      	adds	r1, r2, r2
 800822a:	64b9      	str	r1, [r7, #72]	; 0x48
 800822c:	415b      	adcs	r3, r3
 800822e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008230:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008234:	4641      	mov	r1, r8
 8008236:	eb12 0a01 	adds.w	sl, r2, r1
 800823a:	4649      	mov	r1, r9
 800823c:	eb43 0b01 	adc.w	fp, r3, r1
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800824c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008254:	4692      	mov	sl, r2
 8008256:	469b      	mov	fp, r3
 8008258:	4643      	mov	r3, r8
 800825a:	eb1a 0303 	adds.w	r3, sl, r3
 800825e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008262:	464b      	mov	r3, r9
 8008264:	eb4b 0303 	adc.w	r3, fp, r3
 8008268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008278:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800827c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008280:	460b      	mov	r3, r1
 8008282:	18db      	adds	r3, r3, r3
 8008284:	643b      	str	r3, [r7, #64]	; 0x40
 8008286:	4613      	mov	r3, r2
 8008288:	eb42 0303 	adc.w	r3, r2, r3
 800828c:	647b      	str	r3, [r7, #68]	; 0x44
 800828e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008292:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008296:	f7f7 fff3 	bl	8000280 <__aeabi_uldivmod>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4611      	mov	r1, r2
 80082a0:	4b3b      	ldr	r3, [pc, #236]	; (8008390 <UART_SetConfig+0x2d4>)
 80082a2:	fba3 2301 	umull	r2, r3, r3, r1
 80082a6:	095b      	lsrs	r3, r3, #5
 80082a8:	2264      	movs	r2, #100	; 0x64
 80082aa:	fb02 f303 	mul.w	r3, r2, r3
 80082ae:	1acb      	subs	r3, r1, r3
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082b6:	4b36      	ldr	r3, [pc, #216]	; (8008390 <UART_SetConfig+0x2d4>)
 80082b8:	fba3 2302 	umull	r2, r3, r3, r2
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082c4:	441c      	add	r4, r3
 80082c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	1891      	adds	r1, r2, r2
 80082de:	63b9      	str	r1, [r7, #56]	; 0x38
 80082e0:	415b      	adcs	r3, r3
 80082e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082e8:	4641      	mov	r1, r8
 80082ea:	1851      	adds	r1, r2, r1
 80082ec:	6339      	str	r1, [r7, #48]	; 0x30
 80082ee:	4649      	mov	r1, r9
 80082f0:	414b      	adcs	r3, r1
 80082f2:	637b      	str	r3, [r7, #52]	; 0x34
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008300:	4659      	mov	r1, fp
 8008302:	00cb      	lsls	r3, r1, #3
 8008304:	4651      	mov	r1, sl
 8008306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800830a:	4651      	mov	r1, sl
 800830c:	00ca      	lsls	r2, r1, #3
 800830e:	4610      	mov	r0, r2
 8008310:	4619      	mov	r1, r3
 8008312:	4603      	mov	r3, r0
 8008314:	4642      	mov	r2, r8
 8008316:	189b      	adds	r3, r3, r2
 8008318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800831c:	464b      	mov	r3, r9
 800831e:	460a      	mov	r2, r1
 8008320:	eb42 0303 	adc.w	r3, r2, r3
 8008324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008334:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800833c:	460b      	mov	r3, r1
 800833e:	18db      	adds	r3, r3, r3
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
 8008342:	4613      	mov	r3, r2
 8008344:	eb42 0303 	adc.w	r3, r2, r3
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800834e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008352:	f7f7 ff95 	bl	8000280 <__aeabi_uldivmod>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4b0d      	ldr	r3, [pc, #52]	; (8008390 <UART_SetConfig+0x2d4>)
 800835c:	fba3 1302 	umull	r1, r3, r3, r2
 8008360:	095b      	lsrs	r3, r3, #5
 8008362:	2164      	movs	r1, #100	; 0x64
 8008364:	fb01 f303 	mul.w	r3, r1, r3
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	3332      	adds	r3, #50	; 0x32
 800836e:	4a08      	ldr	r2, [pc, #32]	; (8008390 <UART_SetConfig+0x2d4>)
 8008370:	fba2 2303 	umull	r2, r3, r2, r3
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	f003 0207 	and.w	r2, r3, #7
 800837a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4422      	add	r2, r4
 8008382:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008384:	e105      	b.n	8008592 <UART_SetConfig+0x4d6>
 8008386:	bf00      	nop
 8008388:	40011000 	.word	0x40011000
 800838c:	40011400 	.word	0x40011400
 8008390:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008398:	2200      	movs	r2, #0
 800839a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800839e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083a6:	4642      	mov	r2, r8
 80083a8:	464b      	mov	r3, r9
 80083aa:	1891      	adds	r1, r2, r2
 80083ac:	6239      	str	r1, [r7, #32]
 80083ae:	415b      	adcs	r3, r3
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
 80083b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083b6:	4641      	mov	r1, r8
 80083b8:	1854      	adds	r4, r2, r1
 80083ba:	4649      	mov	r1, r9
 80083bc:	eb43 0501 	adc.w	r5, r3, r1
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	00eb      	lsls	r3, r5, #3
 80083ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ce:	00e2      	lsls	r2, r4, #3
 80083d0:	4614      	mov	r4, r2
 80083d2:	461d      	mov	r5, r3
 80083d4:	4643      	mov	r3, r8
 80083d6:	18e3      	adds	r3, r4, r3
 80083d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083dc:	464b      	mov	r3, r9
 80083de:	eb45 0303 	adc.w	r3, r5, r3
 80083e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008402:	4629      	mov	r1, r5
 8008404:	008b      	lsls	r3, r1, #2
 8008406:	4621      	mov	r1, r4
 8008408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800840c:	4621      	mov	r1, r4
 800840e:	008a      	lsls	r2, r1, #2
 8008410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008414:	f7f7 ff34 	bl	8000280 <__aeabi_uldivmod>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4b60      	ldr	r3, [pc, #384]	; (80085a0 <UART_SetConfig+0x4e4>)
 800841e:	fba3 2302 	umull	r2, r3, r3, r2
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	011c      	lsls	r4, r3, #4
 8008426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842a:	2200      	movs	r2, #0
 800842c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008430:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008434:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	1891      	adds	r1, r2, r2
 800843e:	61b9      	str	r1, [r7, #24]
 8008440:	415b      	adcs	r3, r3
 8008442:	61fb      	str	r3, [r7, #28]
 8008444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008448:	4641      	mov	r1, r8
 800844a:	1851      	adds	r1, r2, r1
 800844c:	6139      	str	r1, [r7, #16]
 800844e:	4649      	mov	r1, r9
 8008450:	414b      	adcs	r3, r1
 8008452:	617b      	str	r3, [r7, #20]
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008460:	4659      	mov	r1, fp
 8008462:	00cb      	lsls	r3, r1, #3
 8008464:	4651      	mov	r1, sl
 8008466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846a:	4651      	mov	r1, sl
 800846c:	00ca      	lsls	r2, r1, #3
 800846e:	4610      	mov	r0, r2
 8008470:	4619      	mov	r1, r3
 8008472:	4603      	mov	r3, r0
 8008474:	4642      	mov	r2, r8
 8008476:	189b      	adds	r3, r3, r2
 8008478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800847c:	464b      	mov	r3, r9
 800847e:	460a      	mov	r2, r1
 8008480:	eb42 0303 	adc.w	r3, r2, r3
 8008484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	67bb      	str	r3, [r7, #120]	; 0x78
 8008492:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084a0:	4649      	mov	r1, r9
 80084a2:	008b      	lsls	r3, r1, #2
 80084a4:	4641      	mov	r1, r8
 80084a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084aa:	4641      	mov	r1, r8
 80084ac:	008a      	lsls	r2, r1, #2
 80084ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084b2:	f7f7 fee5 	bl	8000280 <__aeabi_uldivmod>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4b39      	ldr	r3, [pc, #228]	; (80085a0 <UART_SetConfig+0x4e4>)
 80084bc:	fba3 1302 	umull	r1, r3, r3, r2
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	2164      	movs	r1, #100	; 0x64
 80084c4:	fb01 f303 	mul.w	r3, r1, r3
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	3332      	adds	r3, #50	; 0x32
 80084ce:	4a34      	ldr	r2, [pc, #208]	; (80085a0 <UART_SetConfig+0x4e4>)
 80084d0:	fba2 2303 	umull	r2, r3, r2, r3
 80084d4:	095b      	lsrs	r3, r3, #5
 80084d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084da:	441c      	add	r4, r3
 80084dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e0:	2200      	movs	r2, #0
 80084e2:	673b      	str	r3, [r7, #112]	; 0x70
 80084e4:	677a      	str	r2, [r7, #116]	; 0x74
 80084e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084ea:	4642      	mov	r2, r8
 80084ec:	464b      	mov	r3, r9
 80084ee:	1891      	adds	r1, r2, r2
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	415b      	adcs	r3, r3
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084fa:	4641      	mov	r1, r8
 80084fc:	1851      	adds	r1, r2, r1
 80084fe:	6039      	str	r1, [r7, #0]
 8008500:	4649      	mov	r1, r9
 8008502:	414b      	adcs	r3, r1
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008512:	4659      	mov	r1, fp
 8008514:	00cb      	lsls	r3, r1, #3
 8008516:	4651      	mov	r1, sl
 8008518:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800851c:	4651      	mov	r1, sl
 800851e:	00ca      	lsls	r2, r1, #3
 8008520:	4610      	mov	r0, r2
 8008522:	4619      	mov	r1, r3
 8008524:	4603      	mov	r3, r0
 8008526:	4642      	mov	r2, r8
 8008528:	189b      	adds	r3, r3, r2
 800852a:	66bb      	str	r3, [r7, #104]	; 0x68
 800852c:	464b      	mov	r3, r9
 800852e:	460a      	mov	r2, r1
 8008530:	eb42 0303 	adc.w	r3, r2, r3
 8008534:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	663b      	str	r3, [r7, #96]	; 0x60
 8008540:	667a      	str	r2, [r7, #100]	; 0x64
 8008542:	f04f 0200 	mov.w	r2, #0
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800854e:	4649      	mov	r1, r9
 8008550:	008b      	lsls	r3, r1, #2
 8008552:	4641      	mov	r1, r8
 8008554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008558:	4641      	mov	r1, r8
 800855a:	008a      	lsls	r2, r1, #2
 800855c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008560:	f7f7 fe8e 	bl	8000280 <__aeabi_uldivmod>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <UART_SetConfig+0x4e4>)
 800856a:	fba3 1302 	umull	r1, r3, r3, r2
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	2164      	movs	r1, #100	; 0x64
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	3332      	adds	r3, #50	; 0x32
 800857c:	4a08      	ldr	r2, [pc, #32]	; (80085a0 <UART_SetConfig+0x4e4>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4422      	add	r2, r4
 8008590:	609a      	str	r2, [r3, #8]
}
 8008592:	bf00      	nop
 8008594:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008598:	46bd      	mov	sp, r7
 800859a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800859e:	bf00      	nop
 80085a0:	51eb851f 	.word	0x51eb851f

080085a4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085bc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4b20      	ldr	r3, [pc, #128]	; (8008644 <FSMC_NORSRAM_Init+0xa0>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80085ce:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80085d4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80085da:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80085e0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80085e6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80085ec:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80085f2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80085f8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80085fe:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008604:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800860a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008610:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b08      	cmp	r3, #8
 800861e:	d103      	bne.n	8008628 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008626:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68f9      	ldr	r1, [r7, #12]
 8008630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	fff00080 	.word	0xfff00080

08008648 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008662:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800866a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008676:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800867e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008686:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	3b01      	subs	r3, #1
 800868e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008690:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	3b02      	subs	r3, #2
 8008698:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800869a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086a0:	4313      	orrs	r3, r2
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
	...

080086c4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086dc:	d122      	bne.n	8008724 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4b15      	ldr	r3, [pc, #84]	; (8008740 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086fa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008702:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800870a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008710:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	4313      	orrs	r3, r2
 8008716:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6979      	ldr	r1, [r7, #20]
 800871e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008722:	e005      	b.n	8008730 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800872c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	cff00000 	.word	0xcff00000

08008744 <atoi>:
 8008744:	220a      	movs	r2, #10
 8008746:	2100      	movs	r1, #0
 8008748:	f000 b8d4 	b.w	80088f4 <strtol>

0800874c <__errno>:
 800874c:	4b01      	ldr	r3, [pc, #4]	; (8008754 <__errno+0x8>)
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000018 	.word	0x20000018

08008758 <__libc_init_array>:
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	4d0d      	ldr	r5, [pc, #52]	; (8008790 <__libc_init_array+0x38>)
 800875c:	4c0d      	ldr	r4, [pc, #52]	; (8008794 <__libc_init_array+0x3c>)
 800875e:	1b64      	subs	r4, r4, r5
 8008760:	10a4      	asrs	r4, r4, #2
 8008762:	2600      	movs	r6, #0
 8008764:	42a6      	cmp	r6, r4
 8008766:	d109      	bne.n	800877c <__libc_init_array+0x24>
 8008768:	4d0b      	ldr	r5, [pc, #44]	; (8008798 <__libc_init_array+0x40>)
 800876a:	4c0c      	ldr	r4, [pc, #48]	; (800879c <__libc_init_array+0x44>)
 800876c:	f000 fd1a 	bl	80091a4 <_init>
 8008770:	1b64      	subs	r4, r4, r5
 8008772:	10a4      	asrs	r4, r4, #2
 8008774:	2600      	movs	r6, #0
 8008776:	42a6      	cmp	r6, r4
 8008778:	d105      	bne.n	8008786 <__libc_init_array+0x2e>
 800877a:	bd70      	pop	{r4, r5, r6, pc}
 800877c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008780:	4798      	blx	r3
 8008782:	3601      	adds	r6, #1
 8008784:	e7ee      	b.n	8008764 <__libc_init_array+0xc>
 8008786:	f855 3b04 	ldr.w	r3, [r5], #4
 800878a:	4798      	blx	r3
 800878c:	3601      	adds	r6, #1
 800878e:	e7f2      	b.n	8008776 <__libc_init_array+0x1e>
 8008790:	0800c46c 	.word	0x0800c46c
 8008794:	0800c46c 	.word	0x0800c46c
 8008798:	0800c46c 	.word	0x0800c46c
 800879c:	0800c470 	.word	0x0800c470

080087a0 <memset>:
 80087a0:	4402      	add	r2, r0
 80087a2:	4603      	mov	r3, r0
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d100      	bne.n	80087aa <memset+0xa>
 80087a8:	4770      	bx	lr
 80087aa:	f803 1b01 	strb.w	r1, [r3], #1
 80087ae:	e7f9      	b.n	80087a4 <memset+0x4>

080087b0 <siprintf>:
 80087b0:	b40e      	push	{r1, r2, r3}
 80087b2:	b500      	push	{lr}
 80087b4:	b09c      	sub	sp, #112	; 0x70
 80087b6:	ab1d      	add	r3, sp, #116	; 0x74
 80087b8:	9002      	str	r0, [sp, #8]
 80087ba:	9006      	str	r0, [sp, #24]
 80087bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087c0:	4809      	ldr	r0, [pc, #36]	; (80087e8 <siprintf+0x38>)
 80087c2:	9107      	str	r1, [sp, #28]
 80087c4:	9104      	str	r1, [sp, #16]
 80087c6:	4909      	ldr	r1, [pc, #36]	; (80087ec <siprintf+0x3c>)
 80087c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087cc:	9105      	str	r1, [sp, #20]
 80087ce:	6800      	ldr	r0, [r0, #0]
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	a902      	add	r1, sp, #8
 80087d4:	f000 f8f4 	bl	80089c0 <_svfiprintf_r>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	b01c      	add	sp, #112	; 0x70
 80087e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e4:	b003      	add	sp, #12
 80087e6:	4770      	bx	lr
 80087e8:	20000018 	.word	0x20000018
 80087ec:	ffff0208 	.word	0xffff0208

080087f0 <_strtol_l.constprop.0>:
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f6:	d001      	beq.n	80087fc <_strtol_l.constprop.0+0xc>
 80087f8:	2b24      	cmp	r3, #36	; 0x24
 80087fa:	d906      	bls.n	800880a <_strtol_l.constprop.0+0x1a>
 80087fc:	f7ff ffa6 	bl	800874c <__errno>
 8008800:	2316      	movs	r3, #22
 8008802:	6003      	str	r3, [r0, #0]
 8008804:	2000      	movs	r0, #0
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80088f0 <_strtol_l.constprop.0+0x100>
 800880e:	460d      	mov	r5, r1
 8008810:	462e      	mov	r6, r5
 8008812:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008816:	f814 700c 	ldrb.w	r7, [r4, ip]
 800881a:	f017 0708 	ands.w	r7, r7, #8
 800881e:	d1f7      	bne.n	8008810 <_strtol_l.constprop.0+0x20>
 8008820:	2c2d      	cmp	r4, #45	; 0x2d
 8008822:	d132      	bne.n	800888a <_strtol_l.constprop.0+0x9a>
 8008824:	782c      	ldrb	r4, [r5, #0]
 8008826:	2701      	movs	r7, #1
 8008828:	1cb5      	adds	r5, r6, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d05b      	beq.n	80088e6 <_strtol_l.constprop.0+0xf6>
 800882e:	2b10      	cmp	r3, #16
 8008830:	d109      	bne.n	8008846 <_strtol_l.constprop.0+0x56>
 8008832:	2c30      	cmp	r4, #48	; 0x30
 8008834:	d107      	bne.n	8008846 <_strtol_l.constprop.0+0x56>
 8008836:	782c      	ldrb	r4, [r5, #0]
 8008838:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800883c:	2c58      	cmp	r4, #88	; 0x58
 800883e:	d14d      	bne.n	80088dc <_strtol_l.constprop.0+0xec>
 8008840:	786c      	ldrb	r4, [r5, #1]
 8008842:	2310      	movs	r3, #16
 8008844:	3502      	adds	r5, #2
 8008846:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800884a:	f108 38ff 	add.w	r8, r8, #4294967295
 800884e:	f04f 0c00 	mov.w	ip, #0
 8008852:	fbb8 f9f3 	udiv	r9, r8, r3
 8008856:	4666      	mov	r6, ip
 8008858:	fb03 8a19 	mls	sl, r3, r9, r8
 800885c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008860:	f1be 0f09 	cmp.w	lr, #9
 8008864:	d816      	bhi.n	8008894 <_strtol_l.constprop.0+0xa4>
 8008866:	4674      	mov	r4, lr
 8008868:	42a3      	cmp	r3, r4
 800886a:	dd24      	ble.n	80088b6 <_strtol_l.constprop.0+0xc6>
 800886c:	f1bc 0f00 	cmp.w	ip, #0
 8008870:	db1e      	blt.n	80088b0 <_strtol_l.constprop.0+0xc0>
 8008872:	45b1      	cmp	r9, r6
 8008874:	d31c      	bcc.n	80088b0 <_strtol_l.constprop.0+0xc0>
 8008876:	d101      	bne.n	800887c <_strtol_l.constprop.0+0x8c>
 8008878:	45a2      	cmp	sl, r4
 800887a:	db19      	blt.n	80088b0 <_strtol_l.constprop.0+0xc0>
 800887c:	fb06 4603 	mla	r6, r6, r3, r4
 8008880:	f04f 0c01 	mov.w	ip, #1
 8008884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008888:	e7e8      	b.n	800885c <_strtol_l.constprop.0+0x6c>
 800888a:	2c2b      	cmp	r4, #43	; 0x2b
 800888c:	bf04      	itt	eq
 800888e:	782c      	ldrbeq	r4, [r5, #0]
 8008890:	1cb5      	addeq	r5, r6, #2
 8008892:	e7ca      	b.n	800882a <_strtol_l.constprop.0+0x3a>
 8008894:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008898:	f1be 0f19 	cmp.w	lr, #25
 800889c:	d801      	bhi.n	80088a2 <_strtol_l.constprop.0+0xb2>
 800889e:	3c37      	subs	r4, #55	; 0x37
 80088a0:	e7e2      	b.n	8008868 <_strtol_l.constprop.0+0x78>
 80088a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80088a6:	f1be 0f19 	cmp.w	lr, #25
 80088aa:	d804      	bhi.n	80088b6 <_strtol_l.constprop.0+0xc6>
 80088ac:	3c57      	subs	r4, #87	; 0x57
 80088ae:	e7db      	b.n	8008868 <_strtol_l.constprop.0+0x78>
 80088b0:	f04f 3cff 	mov.w	ip, #4294967295
 80088b4:	e7e6      	b.n	8008884 <_strtol_l.constprop.0+0x94>
 80088b6:	f1bc 0f00 	cmp.w	ip, #0
 80088ba:	da05      	bge.n	80088c8 <_strtol_l.constprop.0+0xd8>
 80088bc:	2322      	movs	r3, #34	; 0x22
 80088be:	6003      	str	r3, [r0, #0]
 80088c0:	4646      	mov	r6, r8
 80088c2:	b942      	cbnz	r2, 80088d6 <_strtol_l.constprop.0+0xe6>
 80088c4:	4630      	mov	r0, r6
 80088c6:	e79e      	b.n	8008806 <_strtol_l.constprop.0+0x16>
 80088c8:	b107      	cbz	r7, 80088cc <_strtol_l.constprop.0+0xdc>
 80088ca:	4276      	negs	r6, r6
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	d0f9      	beq.n	80088c4 <_strtol_l.constprop.0+0xd4>
 80088d0:	f1bc 0f00 	cmp.w	ip, #0
 80088d4:	d000      	beq.n	80088d8 <_strtol_l.constprop.0+0xe8>
 80088d6:	1e69      	subs	r1, r5, #1
 80088d8:	6011      	str	r1, [r2, #0]
 80088da:	e7f3      	b.n	80088c4 <_strtol_l.constprop.0+0xd4>
 80088dc:	2430      	movs	r4, #48	; 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1b1      	bne.n	8008846 <_strtol_l.constprop.0+0x56>
 80088e2:	2308      	movs	r3, #8
 80088e4:	e7af      	b.n	8008846 <_strtol_l.constprop.0+0x56>
 80088e6:	2c30      	cmp	r4, #48	; 0x30
 80088e8:	d0a5      	beq.n	8008836 <_strtol_l.constprop.0+0x46>
 80088ea:	230a      	movs	r3, #10
 80088ec:	e7ab      	b.n	8008846 <_strtol_l.constprop.0+0x56>
 80088ee:	bf00      	nop
 80088f0:	0800c331 	.word	0x0800c331

080088f4 <strtol>:
 80088f4:	4613      	mov	r3, r2
 80088f6:	460a      	mov	r2, r1
 80088f8:	4601      	mov	r1, r0
 80088fa:	4802      	ldr	r0, [pc, #8]	; (8008904 <strtol+0x10>)
 80088fc:	6800      	ldr	r0, [r0, #0]
 80088fe:	f7ff bf77 	b.w	80087f0 <_strtol_l.constprop.0>
 8008902:	bf00      	nop
 8008904:	20000018 	.word	0x20000018

08008908 <__ssputs_r>:
 8008908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890c:	688e      	ldr	r6, [r1, #8]
 800890e:	429e      	cmp	r6, r3
 8008910:	4682      	mov	sl, r0
 8008912:	460c      	mov	r4, r1
 8008914:	4690      	mov	r8, r2
 8008916:	461f      	mov	r7, r3
 8008918:	d838      	bhi.n	800898c <__ssputs_r+0x84>
 800891a:	898a      	ldrh	r2, [r1, #12]
 800891c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008920:	d032      	beq.n	8008988 <__ssputs_r+0x80>
 8008922:	6825      	ldr	r5, [r4, #0]
 8008924:	6909      	ldr	r1, [r1, #16]
 8008926:	eba5 0901 	sub.w	r9, r5, r1
 800892a:	6965      	ldr	r5, [r4, #20]
 800892c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008934:	3301      	adds	r3, #1
 8008936:	444b      	add	r3, r9
 8008938:	106d      	asrs	r5, r5, #1
 800893a:	429d      	cmp	r5, r3
 800893c:	bf38      	it	cc
 800893e:	461d      	movcc	r5, r3
 8008940:	0553      	lsls	r3, r2, #21
 8008942:	d531      	bpl.n	80089a8 <__ssputs_r+0xa0>
 8008944:	4629      	mov	r1, r5
 8008946:	f000 fb63 	bl	8009010 <_malloc_r>
 800894a:	4606      	mov	r6, r0
 800894c:	b950      	cbnz	r0, 8008964 <__ssputs_r+0x5c>
 800894e:	230c      	movs	r3, #12
 8008950:	f8ca 3000 	str.w	r3, [sl]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008964:	6921      	ldr	r1, [r4, #16]
 8008966:	464a      	mov	r2, r9
 8008968:	f000 fabe 	bl	8008ee8 <memcpy>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	6126      	str	r6, [r4, #16]
 800897a:	6165      	str	r5, [r4, #20]
 800897c:	444e      	add	r6, r9
 800897e:	eba5 0509 	sub.w	r5, r5, r9
 8008982:	6026      	str	r6, [r4, #0]
 8008984:	60a5      	str	r5, [r4, #8]
 8008986:	463e      	mov	r6, r7
 8008988:	42be      	cmp	r6, r7
 800898a:	d900      	bls.n	800898e <__ssputs_r+0x86>
 800898c:	463e      	mov	r6, r7
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	4632      	mov	r2, r6
 8008992:	4641      	mov	r1, r8
 8008994:	f000 fab6 	bl	8008f04 <memmove>
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	1b9b      	subs	r3, r3, r6
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	4433      	add	r3, r6
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	2000      	movs	r0, #0
 80089a6:	e7db      	b.n	8008960 <__ssputs_r+0x58>
 80089a8:	462a      	mov	r2, r5
 80089aa:	f000 fba5 	bl	80090f8 <_realloc_r>
 80089ae:	4606      	mov	r6, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d1e1      	bne.n	8008978 <__ssputs_r+0x70>
 80089b4:	6921      	ldr	r1, [r4, #16]
 80089b6:	4650      	mov	r0, sl
 80089b8:	f000 fabe 	bl	8008f38 <_free_r>
 80089bc:	e7c7      	b.n	800894e <__ssputs_r+0x46>
	...

080089c0 <_svfiprintf_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	4698      	mov	r8, r3
 80089c6:	898b      	ldrh	r3, [r1, #12]
 80089c8:	061b      	lsls	r3, r3, #24
 80089ca:	b09d      	sub	sp, #116	; 0x74
 80089cc:	4607      	mov	r7, r0
 80089ce:	460d      	mov	r5, r1
 80089d0:	4614      	mov	r4, r2
 80089d2:	d50e      	bpl.n	80089f2 <_svfiprintf_r+0x32>
 80089d4:	690b      	ldr	r3, [r1, #16]
 80089d6:	b963      	cbnz	r3, 80089f2 <_svfiprintf_r+0x32>
 80089d8:	2140      	movs	r1, #64	; 0x40
 80089da:	f000 fb19 	bl	8009010 <_malloc_r>
 80089de:	6028      	str	r0, [r5, #0]
 80089e0:	6128      	str	r0, [r5, #16]
 80089e2:	b920      	cbnz	r0, 80089ee <_svfiprintf_r+0x2e>
 80089e4:	230c      	movs	r3, #12
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	e0d1      	b.n	8008b92 <_svfiprintf_r+0x1d2>
 80089ee:	2340      	movs	r3, #64	; 0x40
 80089f0:	616b      	str	r3, [r5, #20]
 80089f2:	2300      	movs	r3, #0
 80089f4:	9309      	str	r3, [sp, #36]	; 0x24
 80089f6:	2320      	movs	r3, #32
 80089f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a00:	2330      	movs	r3, #48	; 0x30
 8008a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bac <_svfiprintf_r+0x1ec>
 8008a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a0a:	f04f 0901 	mov.w	r9, #1
 8008a0e:	4623      	mov	r3, r4
 8008a10:	469a      	mov	sl, r3
 8008a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a16:	b10a      	cbz	r2, 8008a1c <_svfiprintf_r+0x5c>
 8008a18:	2a25      	cmp	r2, #37	; 0x25
 8008a1a:	d1f9      	bne.n	8008a10 <_svfiprintf_r+0x50>
 8008a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a20:	d00b      	beq.n	8008a3a <_svfiprintf_r+0x7a>
 8008a22:	465b      	mov	r3, fp
 8008a24:	4622      	mov	r2, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff ff6d 	bl	8008908 <__ssputs_r>
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f000 80aa 	beq.w	8008b88 <_svfiprintf_r+0x1c8>
 8008a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a36:	445a      	add	r2, fp
 8008a38:	9209      	str	r2, [sp, #36]	; 0x24
 8008a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 80a2 	beq.w	8008b88 <_svfiprintf_r+0x1c8>
 8008a44:	2300      	movs	r3, #0
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a4e:	f10a 0a01 	add.w	sl, sl, #1
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	9307      	str	r3, [sp, #28]
 8008a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a5c:	4654      	mov	r4, sl
 8008a5e:	2205      	movs	r2, #5
 8008a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a64:	4851      	ldr	r0, [pc, #324]	; (8008bac <_svfiprintf_r+0x1ec>)
 8008a66:	f7f7 fbbb 	bl	80001e0 <memchr>
 8008a6a:	9a04      	ldr	r2, [sp, #16]
 8008a6c:	b9d8      	cbnz	r0, 8008aa6 <_svfiprintf_r+0xe6>
 8008a6e:	06d0      	lsls	r0, r2, #27
 8008a70:	bf44      	itt	mi
 8008a72:	2320      	movmi	r3, #32
 8008a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a78:	0711      	lsls	r1, r2, #28
 8008a7a:	bf44      	itt	mi
 8008a7c:	232b      	movmi	r3, #43	; 0x2b
 8008a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a82:	f89a 3000 	ldrb.w	r3, [sl]
 8008a86:	2b2a      	cmp	r3, #42	; 0x2a
 8008a88:	d015      	beq.n	8008ab6 <_svfiprintf_r+0xf6>
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	4654      	mov	r4, sl
 8008a8e:	2000      	movs	r0, #0
 8008a90:	f04f 0c0a 	mov.w	ip, #10
 8008a94:	4621      	mov	r1, r4
 8008a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a9a:	3b30      	subs	r3, #48	; 0x30
 8008a9c:	2b09      	cmp	r3, #9
 8008a9e:	d94e      	bls.n	8008b3e <_svfiprintf_r+0x17e>
 8008aa0:	b1b0      	cbz	r0, 8008ad0 <_svfiprintf_r+0x110>
 8008aa2:	9207      	str	r2, [sp, #28]
 8008aa4:	e014      	b.n	8008ad0 <_svfiprintf_r+0x110>
 8008aa6:	eba0 0308 	sub.w	r3, r0, r8
 8008aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	46a2      	mov	sl, r4
 8008ab4:	e7d2      	b.n	8008a5c <_svfiprintf_r+0x9c>
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	1d19      	adds	r1, r3, #4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	9103      	str	r1, [sp, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfbb      	ittet	lt
 8008ac2:	425b      	neglt	r3, r3
 8008ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac8:	9307      	strge	r3, [sp, #28]
 8008aca:	9307      	strlt	r3, [sp, #28]
 8008acc:	bfb8      	it	lt
 8008ace:	9204      	strlt	r2, [sp, #16]
 8008ad0:	7823      	ldrb	r3, [r4, #0]
 8008ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad4:	d10c      	bne.n	8008af0 <_svfiprintf_r+0x130>
 8008ad6:	7863      	ldrb	r3, [r4, #1]
 8008ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8008ada:	d135      	bne.n	8008b48 <_svfiprintf_r+0x188>
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	1d1a      	adds	r2, r3, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	9203      	str	r2, [sp, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bfb8      	it	lt
 8008ae8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aec:	3402      	adds	r4, #2
 8008aee:	9305      	str	r3, [sp, #20]
 8008af0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bbc <_svfiprintf_r+0x1fc>
 8008af4:	7821      	ldrb	r1, [r4, #0]
 8008af6:	2203      	movs	r2, #3
 8008af8:	4650      	mov	r0, sl
 8008afa:	f7f7 fb71 	bl	80001e0 <memchr>
 8008afe:	b140      	cbz	r0, 8008b12 <_svfiprintf_r+0x152>
 8008b00:	2340      	movs	r3, #64	; 0x40
 8008b02:	eba0 000a 	sub.w	r0, r0, sl
 8008b06:	fa03 f000 	lsl.w	r0, r3, r0
 8008b0a:	9b04      	ldr	r3, [sp, #16]
 8008b0c:	4303      	orrs	r3, r0
 8008b0e:	3401      	adds	r4, #1
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b16:	4826      	ldr	r0, [pc, #152]	; (8008bb0 <_svfiprintf_r+0x1f0>)
 8008b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b1c:	2206      	movs	r2, #6
 8008b1e:	f7f7 fb5f 	bl	80001e0 <memchr>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d038      	beq.n	8008b98 <_svfiprintf_r+0x1d8>
 8008b26:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <_svfiprintf_r+0x1f4>)
 8008b28:	bb1b      	cbnz	r3, 8008b72 <_svfiprintf_r+0x1b2>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	3307      	adds	r3, #7
 8008b2e:	f023 0307 	bic.w	r3, r3, #7
 8008b32:	3308      	adds	r3, #8
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b38:	4433      	add	r3, r6
 8008b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3c:	e767      	b.n	8008a0e <_svfiprintf_r+0x4e>
 8008b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b42:	460c      	mov	r4, r1
 8008b44:	2001      	movs	r0, #1
 8008b46:	e7a5      	b.n	8008a94 <_svfiprintf_r+0xd4>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	3401      	adds	r4, #1
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f04f 0c0a 	mov.w	ip, #10
 8008b54:	4620      	mov	r0, r4
 8008b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5a:	3a30      	subs	r2, #48	; 0x30
 8008b5c:	2a09      	cmp	r2, #9
 8008b5e:	d903      	bls.n	8008b68 <_svfiprintf_r+0x1a8>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0c5      	beq.n	8008af0 <_svfiprintf_r+0x130>
 8008b64:	9105      	str	r1, [sp, #20]
 8008b66:	e7c3      	b.n	8008af0 <_svfiprintf_r+0x130>
 8008b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e7f0      	b.n	8008b54 <_svfiprintf_r+0x194>
 8008b72:	ab03      	add	r3, sp, #12
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <_svfiprintf_r+0x1f8>)
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f3af 8000 	nop.w
 8008b82:	1c42      	adds	r2, r0, #1
 8008b84:	4606      	mov	r6, r0
 8008b86:	d1d6      	bne.n	8008b36 <_svfiprintf_r+0x176>
 8008b88:	89ab      	ldrh	r3, [r5, #12]
 8008b8a:	065b      	lsls	r3, r3, #25
 8008b8c:	f53f af2c 	bmi.w	80089e8 <_svfiprintf_r+0x28>
 8008b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b92:	b01d      	add	sp, #116	; 0x74
 8008b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b98:	ab03      	add	r3, sp, #12
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	462a      	mov	r2, r5
 8008b9e:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <_svfiprintf_r+0x1f8>)
 8008ba0:	a904      	add	r1, sp, #16
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	f000 f87a 	bl	8008c9c <_printf_i>
 8008ba8:	e7eb      	b.n	8008b82 <_svfiprintf_r+0x1c2>
 8008baa:	bf00      	nop
 8008bac:	0800c431 	.word	0x0800c431
 8008bb0:	0800c43b 	.word	0x0800c43b
 8008bb4:	00000000 	.word	0x00000000
 8008bb8:	08008909 	.word	0x08008909
 8008bbc:	0800c437 	.word	0x0800c437

08008bc0 <_printf_common>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	4616      	mov	r6, r2
 8008bc6:	4699      	mov	r9, r3
 8008bc8:	688a      	ldr	r2, [r1, #8]
 8008bca:	690b      	ldr	r3, [r1, #16]
 8008bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	bfb8      	it	lt
 8008bd4:	4613      	movlt	r3, r2
 8008bd6:	6033      	str	r3, [r6, #0]
 8008bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bdc:	4607      	mov	r7, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	b10a      	cbz	r2, 8008be6 <_printf_common+0x26>
 8008be2:	3301      	adds	r3, #1
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	0699      	lsls	r1, r3, #26
 8008bea:	bf42      	ittt	mi
 8008bec:	6833      	ldrmi	r3, [r6, #0]
 8008bee:	3302      	addmi	r3, #2
 8008bf0:	6033      	strmi	r3, [r6, #0]
 8008bf2:	6825      	ldr	r5, [r4, #0]
 8008bf4:	f015 0506 	ands.w	r5, r5, #6
 8008bf8:	d106      	bne.n	8008c08 <_printf_common+0x48>
 8008bfa:	f104 0a19 	add.w	sl, r4, #25
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	6832      	ldr	r2, [r6, #0]
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	dc26      	bgt.n	8008c56 <_printf_common+0x96>
 8008c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c0c:	1e13      	subs	r3, r2, #0
 8008c0e:	6822      	ldr	r2, [r4, #0]
 8008c10:	bf18      	it	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	0692      	lsls	r2, r2, #26
 8008c16:	d42b      	bmi.n	8008c70 <_printf_common+0xb0>
 8008c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4638      	mov	r0, r7
 8008c20:	47c0      	blx	r8
 8008c22:	3001      	adds	r0, #1
 8008c24:	d01e      	beq.n	8008c64 <_printf_common+0xa4>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	68e5      	ldr	r5, [r4, #12]
 8008c2a:	6832      	ldr	r2, [r6, #0]
 8008c2c:	f003 0306 	and.w	r3, r3, #6
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	bf08      	it	eq
 8008c34:	1aad      	subeq	r5, r5, r2
 8008c36:	68a3      	ldr	r3, [r4, #8]
 8008c38:	6922      	ldr	r2, [r4, #16]
 8008c3a:	bf0c      	ite	eq
 8008c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c40:	2500      	movne	r5, #0
 8008c42:	4293      	cmp	r3, r2
 8008c44:	bfc4      	itt	gt
 8008c46:	1a9b      	subgt	r3, r3, r2
 8008c48:	18ed      	addgt	r5, r5, r3
 8008c4a:	2600      	movs	r6, #0
 8008c4c:	341a      	adds	r4, #26
 8008c4e:	42b5      	cmp	r5, r6
 8008c50:	d11a      	bne.n	8008c88 <_printf_common+0xc8>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e008      	b.n	8008c68 <_printf_common+0xa8>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4652      	mov	r2, sl
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	47c0      	blx	r8
 8008c60:	3001      	adds	r0, #1
 8008c62:	d103      	bne.n	8008c6c <_printf_common+0xac>
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6c:	3501      	adds	r5, #1
 8008c6e:	e7c6      	b.n	8008bfe <_printf_common+0x3e>
 8008c70:	18e1      	adds	r1, r4, r3
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	2030      	movs	r0, #48	; 0x30
 8008c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c7a:	4422      	add	r2, r4
 8008c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c84:	3302      	adds	r3, #2
 8008c86:	e7c7      	b.n	8008c18 <_printf_common+0x58>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	4638      	mov	r0, r7
 8008c90:	47c0      	blx	r8
 8008c92:	3001      	adds	r0, #1
 8008c94:	d0e6      	beq.n	8008c64 <_printf_common+0xa4>
 8008c96:	3601      	adds	r6, #1
 8008c98:	e7d9      	b.n	8008c4e <_printf_common+0x8e>
	...

08008c9c <_printf_i>:
 8008c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca0:	7e0f      	ldrb	r7, [r1, #24]
 8008ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ca4:	2f78      	cmp	r7, #120	; 0x78
 8008ca6:	4691      	mov	r9, r2
 8008ca8:	4680      	mov	r8, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	469a      	mov	sl, r3
 8008cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cb2:	d807      	bhi.n	8008cc4 <_printf_i+0x28>
 8008cb4:	2f62      	cmp	r7, #98	; 0x62
 8008cb6:	d80a      	bhi.n	8008cce <_printf_i+0x32>
 8008cb8:	2f00      	cmp	r7, #0
 8008cba:	f000 80d8 	beq.w	8008e6e <_printf_i+0x1d2>
 8008cbe:	2f58      	cmp	r7, #88	; 0x58
 8008cc0:	f000 80a3 	beq.w	8008e0a <_printf_i+0x16e>
 8008cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ccc:	e03a      	b.n	8008d44 <_printf_i+0xa8>
 8008cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cd2:	2b15      	cmp	r3, #21
 8008cd4:	d8f6      	bhi.n	8008cc4 <_printf_i+0x28>
 8008cd6:	a101      	add	r1, pc, #4	; (adr r1, 8008cdc <_printf_i+0x40>)
 8008cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cdc:	08008d35 	.word	0x08008d35
 8008ce0:	08008d49 	.word	0x08008d49
 8008ce4:	08008cc5 	.word	0x08008cc5
 8008ce8:	08008cc5 	.word	0x08008cc5
 8008cec:	08008cc5 	.word	0x08008cc5
 8008cf0:	08008cc5 	.word	0x08008cc5
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008cc5 	.word	0x08008cc5
 8008cfc:	08008cc5 	.word	0x08008cc5
 8008d00:	08008cc5 	.word	0x08008cc5
 8008d04:	08008cc5 	.word	0x08008cc5
 8008d08:	08008e55 	.word	0x08008e55
 8008d0c:	08008d79 	.word	0x08008d79
 8008d10:	08008e37 	.word	0x08008e37
 8008d14:	08008cc5 	.word	0x08008cc5
 8008d18:	08008cc5 	.word	0x08008cc5
 8008d1c:	08008e77 	.word	0x08008e77
 8008d20:	08008cc5 	.word	0x08008cc5
 8008d24:	08008d79 	.word	0x08008d79
 8008d28:	08008cc5 	.word	0x08008cc5
 8008d2c:	08008cc5 	.word	0x08008cc5
 8008d30:	08008e3f 	.word	0x08008e3f
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	1d1a      	adds	r2, r3, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	602a      	str	r2, [r5, #0]
 8008d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d44:	2301      	movs	r3, #1
 8008d46:	e0a3      	b.n	8008e90 <_printf_i+0x1f4>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	6829      	ldr	r1, [r5, #0]
 8008d4c:	0606      	lsls	r6, r0, #24
 8008d4e:	f101 0304 	add.w	r3, r1, #4
 8008d52:	d50a      	bpl.n	8008d6a <_printf_i+0xce>
 8008d54:	680e      	ldr	r6, [r1, #0]
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	da03      	bge.n	8008d64 <_printf_i+0xc8>
 8008d5c:	232d      	movs	r3, #45	; 0x2d
 8008d5e:	4276      	negs	r6, r6
 8008d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d64:	485e      	ldr	r0, [pc, #376]	; (8008ee0 <_printf_i+0x244>)
 8008d66:	230a      	movs	r3, #10
 8008d68:	e019      	b.n	8008d9e <_printf_i+0x102>
 8008d6a:	680e      	ldr	r6, [r1, #0]
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d72:	bf18      	it	ne
 8008d74:	b236      	sxthne	r6, r6
 8008d76:	e7ef      	b.n	8008d58 <_printf_i+0xbc>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	6820      	ldr	r0, [r4, #0]
 8008d7c:	1d19      	adds	r1, r3, #4
 8008d7e:	6029      	str	r1, [r5, #0]
 8008d80:	0601      	lsls	r1, r0, #24
 8008d82:	d501      	bpl.n	8008d88 <_printf_i+0xec>
 8008d84:	681e      	ldr	r6, [r3, #0]
 8008d86:	e002      	b.n	8008d8e <_printf_i+0xf2>
 8008d88:	0646      	lsls	r6, r0, #25
 8008d8a:	d5fb      	bpl.n	8008d84 <_printf_i+0xe8>
 8008d8c:	881e      	ldrh	r6, [r3, #0]
 8008d8e:	4854      	ldr	r0, [pc, #336]	; (8008ee0 <_printf_i+0x244>)
 8008d90:	2f6f      	cmp	r7, #111	; 0x6f
 8008d92:	bf0c      	ite	eq
 8008d94:	2308      	moveq	r3, #8
 8008d96:	230a      	movne	r3, #10
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d9e:	6865      	ldr	r5, [r4, #4]
 8008da0:	60a5      	str	r5, [r4, #8]
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	bfa2      	ittt	ge
 8008da6:	6821      	ldrge	r1, [r4, #0]
 8008da8:	f021 0104 	bicge.w	r1, r1, #4
 8008dac:	6021      	strge	r1, [r4, #0]
 8008dae:	b90e      	cbnz	r6, 8008db4 <_printf_i+0x118>
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	d04d      	beq.n	8008e50 <_printf_i+0x1b4>
 8008db4:	4615      	mov	r5, r2
 8008db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dba:	fb03 6711 	mls	r7, r3, r1, r6
 8008dbe:	5dc7      	ldrb	r7, [r0, r7]
 8008dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dc4:	4637      	mov	r7, r6
 8008dc6:	42bb      	cmp	r3, r7
 8008dc8:	460e      	mov	r6, r1
 8008dca:	d9f4      	bls.n	8008db6 <_printf_i+0x11a>
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d10b      	bne.n	8008de8 <_printf_i+0x14c>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	07de      	lsls	r6, r3, #31
 8008dd4:	d508      	bpl.n	8008de8 <_printf_i+0x14c>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	bfde      	ittt	le
 8008dde:	2330      	movle	r3, #48	; 0x30
 8008de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008de8:	1b52      	subs	r2, r2, r5
 8008dea:	6122      	str	r2, [r4, #16]
 8008dec:	f8cd a000 	str.w	sl, [sp]
 8008df0:	464b      	mov	r3, r9
 8008df2:	aa03      	add	r2, sp, #12
 8008df4:	4621      	mov	r1, r4
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7ff fee2 	bl	8008bc0 <_printf_common>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d14c      	bne.n	8008e9a <_printf_i+0x1fe>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
 8008e04:	b004      	add	sp, #16
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	4835      	ldr	r0, [pc, #212]	; (8008ee0 <_printf_i+0x244>)
 8008e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e10:	6829      	ldr	r1, [r5, #0]
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e18:	6029      	str	r1, [r5, #0]
 8008e1a:	061d      	lsls	r5, r3, #24
 8008e1c:	d514      	bpl.n	8008e48 <_printf_i+0x1ac>
 8008e1e:	07df      	lsls	r7, r3, #31
 8008e20:	bf44      	itt	mi
 8008e22:	f043 0320 	orrmi.w	r3, r3, #32
 8008e26:	6023      	strmi	r3, [r4, #0]
 8008e28:	b91e      	cbnz	r6, 8008e32 <_printf_i+0x196>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	f023 0320 	bic.w	r3, r3, #32
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	2310      	movs	r3, #16
 8008e34:	e7b0      	b.n	8008d98 <_printf_i+0xfc>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	f043 0320 	orr.w	r3, r3, #32
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	2378      	movs	r3, #120	; 0x78
 8008e40:	4828      	ldr	r0, [pc, #160]	; (8008ee4 <_printf_i+0x248>)
 8008e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e46:	e7e3      	b.n	8008e10 <_printf_i+0x174>
 8008e48:	0659      	lsls	r1, r3, #25
 8008e4a:	bf48      	it	mi
 8008e4c:	b2b6      	uxthmi	r6, r6
 8008e4e:	e7e6      	b.n	8008e1e <_printf_i+0x182>
 8008e50:	4615      	mov	r5, r2
 8008e52:	e7bb      	b.n	8008dcc <_printf_i+0x130>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	6826      	ldr	r6, [r4, #0]
 8008e58:	6961      	ldr	r1, [r4, #20]
 8008e5a:	1d18      	adds	r0, r3, #4
 8008e5c:	6028      	str	r0, [r5, #0]
 8008e5e:	0635      	lsls	r5, r6, #24
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	d501      	bpl.n	8008e68 <_printf_i+0x1cc>
 8008e64:	6019      	str	r1, [r3, #0]
 8008e66:	e002      	b.n	8008e6e <_printf_i+0x1d2>
 8008e68:	0670      	lsls	r0, r6, #25
 8008e6a:	d5fb      	bpl.n	8008e64 <_printf_i+0x1c8>
 8008e6c:	8019      	strh	r1, [r3, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	4615      	mov	r5, r2
 8008e74:	e7ba      	b.n	8008dec <_printf_i+0x150>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	1d1a      	adds	r2, r3, #4
 8008e7a:	602a      	str	r2, [r5, #0]
 8008e7c:	681d      	ldr	r5, [r3, #0]
 8008e7e:	6862      	ldr	r2, [r4, #4]
 8008e80:	2100      	movs	r1, #0
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7f7 f9ac 	bl	80001e0 <memchr>
 8008e88:	b108      	cbz	r0, 8008e8e <_printf_i+0x1f2>
 8008e8a:	1b40      	subs	r0, r0, r5
 8008e8c:	6060      	str	r0, [r4, #4]
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	6123      	str	r3, [r4, #16]
 8008e92:	2300      	movs	r3, #0
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	e7a8      	b.n	8008dec <_printf_i+0x150>
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	462a      	mov	r2, r5
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	47d0      	blx	sl
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d0ab      	beq.n	8008e00 <_printf_i+0x164>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	079b      	lsls	r3, r3, #30
 8008eac:	d413      	bmi.n	8008ed6 <_printf_i+0x23a>
 8008eae:	68e0      	ldr	r0, [r4, #12]
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	4298      	cmp	r0, r3
 8008eb4:	bfb8      	it	lt
 8008eb6:	4618      	movlt	r0, r3
 8008eb8:	e7a4      	b.n	8008e04 <_printf_i+0x168>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	47d0      	blx	sl
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d09b      	beq.n	8008e00 <_printf_i+0x164>
 8008ec8:	3501      	adds	r5, #1
 8008eca:	68e3      	ldr	r3, [r4, #12]
 8008ecc:	9903      	ldr	r1, [sp, #12]
 8008ece:	1a5b      	subs	r3, r3, r1
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dcf2      	bgt.n	8008eba <_printf_i+0x21e>
 8008ed4:	e7eb      	b.n	8008eae <_printf_i+0x212>
 8008ed6:	2500      	movs	r5, #0
 8008ed8:	f104 0619 	add.w	r6, r4, #25
 8008edc:	e7f5      	b.n	8008eca <_printf_i+0x22e>
 8008ede:	bf00      	nop
 8008ee0:	0800c442 	.word	0x0800c442
 8008ee4:	0800c453 	.word	0x0800c453

08008ee8 <memcpy>:
 8008ee8:	440a      	add	r2, r1
 8008eea:	4291      	cmp	r1, r2
 8008eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ef0:	d100      	bne.n	8008ef4 <memcpy+0xc>
 8008ef2:	4770      	bx	lr
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008efe:	4291      	cmp	r1, r2
 8008f00:	d1f9      	bne.n	8008ef6 <memcpy+0xe>
 8008f02:	bd10      	pop	{r4, pc}

08008f04 <memmove>:
 8008f04:	4288      	cmp	r0, r1
 8008f06:	b510      	push	{r4, lr}
 8008f08:	eb01 0402 	add.w	r4, r1, r2
 8008f0c:	d902      	bls.n	8008f14 <memmove+0x10>
 8008f0e:	4284      	cmp	r4, r0
 8008f10:	4623      	mov	r3, r4
 8008f12:	d807      	bhi.n	8008f24 <memmove+0x20>
 8008f14:	1e43      	subs	r3, r0, #1
 8008f16:	42a1      	cmp	r1, r4
 8008f18:	d008      	beq.n	8008f2c <memmove+0x28>
 8008f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f22:	e7f8      	b.n	8008f16 <memmove+0x12>
 8008f24:	4402      	add	r2, r0
 8008f26:	4601      	mov	r1, r0
 8008f28:	428a      	cmp	r2, r1
 8008f2a:	d100      	bne.n	8008f2e <memmove+0x2a>
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f36:	e7f7      	b.n	8008f28 <memmove+0x24>

08008f38 <_free_r>:
 8008f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f3a:	2900      	cmp	r1, #0
 8008f3c:	d044      	beq.n	8008fc8 <_free_r+0x90>
 8008f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f42:	9001      	str	r0, [sp, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f1a1 0404 	sub.w	r4, r1, #4
 8008f4a:	bfb8      	it	lt
 8008f4c:	18e4      	addlt	r4, r4, r3
 8008f4e:	f000 f913 	bl	8009178 <__malloc_lock>
 8008f52:	4a1e      	ldr	r2, [pc, #120]	; (8008fcc <_free_r+0x94>)
 8008f54:	9801      	ldr	r0, [sp, #4]
 8008f56:	6813      	ldr	r3, [r2, #0]
 8008f58:	b933      	cbnz	r3, 8008f68 <_free_r+0x30>
 8008f5a:	6063      	str	r3, [r4, #4]
 8008f5c:	6014      	str	r4, [r2, #0]
 8008f5e:	b003      	add	sp, #12
 8008f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f64:	f000 b90e 	b.w	8009184 <__malloc_unlock>
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	d908      	bls.n	8008f7e <_free_r+0x46>
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	1961      	adds	r1, r4, r5
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf01      	itttt	eq
 8008f74:	6819      	ldreq	r1, [r3, #0]
 8008f76:	685b      	ldreq	r3, [r3, #4]
 8008f78:	1949      	addeq	r1, r1, r5
 8008f7a:	6021      	streq	r1, [r4, #0]
 8008f7c:	e7ed      	b.n	8008f5a <_free_r+0x22>
 8008f7e:	461a      	mov	r2, r3
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	b10b      	cbz	r3, 8008f88 <_free_r+0x50>
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d9fa      	bls.n	8008f7e <_free_r+0x46>
 8008f88:	6811      	ldr	r1, [r2, #0]
 8008f8a:	1855      	adds	r5, r2, r1
 8008f8c:	42a5      	cmp	r5, r4
 8008f8e:	d10b      	bne.n	8008fa8 <_free_r+0x70>
 8008f90:	6824      	ldr	r4, [r4, #0]
 8008f92:	4421      	add	r1, r4
 8008f94:	1854      	adds	r4, r2, r1
 8008f96:	42a3      	cmp	r3, r4
 8008f98:	6011      	str	r1, [r2, #0]
 8008f9a:	d1e0      	bne.n	8008f5e <_free_r+0x26>
 8008f9c:	681c      	ldr	r4, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	6053      	str	r3, [r2, #4]
 8008fa2:	4421      	add	r1, r4
 8008fa4:	6011      	str	r1, [r2, #0]
 8008fa6:	e7da      	b.n	8008f5e <_free_r+0x26>
 8008fa8:	d902      	bls.n	8008fb0 <_free_r+0x78>
 8008faa:	230c      	movs	r3, #12
 8008fac:	6003      	str	r3, [r0, #0]
 8008fae:	e7d6      	b.n	8008f5e <_free_r+0x26>
 8008fb0:	6825      	ldr	r5, [r4, #0]
 8008fb2:	1961      	adds	r1, r4, r5
 8008fb4:	428b      	cmp	r3, r1
 8008fb6:	bf04      	itt	eq
 8008fb8:	6819      	ldreq	r1, [r3, #0]
 8008fba:	685b      	ldreq	r3, [r3, #4]
 8008fbc:	6063      	str	r3, [r4, #4]
 8008fbe:	bf04      	itt	eq
 8008fc0:	1949      	addeq	r1, r1, r5
 8008fc2:	6021      	streq	r1, [r4, #0]
 8008fc4:	6054      	str	r4, [r2, #4]
 8008fc6:	e7ca      	b.n	8008f5e <_free_r+0x26>
 8008fc8:	b003      	add	sp, #12
 8008fca:	bd30      	pop	{r4, r5, pc}
 8008fcc:	20000414 	.word	0x20000414

08008fd0 <sbrk_aligned>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	4e0e      	ldr	r6, [pc, #56]	; (800900c <sbrk_aligned+0x3c>)
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	6831      	ldr	r1, [r6, #0]
 8008fd8:	4605      	mov	r5, r0
 8008fda:	b911      	cbnz	r1, 8008fe2 <sbrk_aligned+0x12>
 8008fdc:	f000 f8bc 	bl	8009158 <_sbrk_r>
 8008fe0:	6030      	str	r0, [r6, #0]
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f000 f8b7 	bl	8009158 <_sbrk_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	d00a      	beq.n	8009004 <sbrk_aligned+0x34>
 8008fee:	1cc4      	adds	r4, r0, #3
 8008ff0:	f024 0403 	bic.w	r4, r4, #3
 8008ff4:	42a0      	cmp	r0, r4
 8008ff6:	d007      	beq.n	8009008 <sbrk_aligned+0x38>
 8008ff8:	1a21      	subs	r1, r4, r0
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f8ac 	bl	8009158 <_sbrk_r>
 8009000:	3001      	adds	r0, #1
 8009002:	d101      	bne.n	8009008 <sbrk_aligned+0x38>
 8009004:	f04f 34ff 	mov.w	r4, #4294967295
 8009008:	4620      	mov	r0, r4
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	20000418 	.word	0x20000418

08009010 <_malloc_r>:
 8009010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009014:	1ccd      	adds	r5, r1, #3
 8009016:	f025 0503 	bic.w	r5, r5, #3
 800901a:	3508      	adds	r5, #8
 800901c:	2d0c      	cmp	r5, #12
 800901e:	bf38      	it	cc
 8009020:	250c      	movcc	r5, #12
 8009022:	2d00      	cmp	r5, #0
 8009024:	4607      	mov	r7, r0
 8009026:	db01      	blt.n	800902c <_malloc_r+0x1c>
 8009028:	42a9      	cmp	r1, r5
 800902a:	d905      	bls.n	8009038 <_malloc_r+0x28>
 800902c:	230c      	movs	r3, #12
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	2600      	movs	r6, #0
 8009032:	4630      	mov	r0, r6
 8009034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009038:	4e2e      	ldr	r6, [pc, #184]	; (80090f4 <_malloc_r+0xe4>)
 800903a:	f000 f89d 	bl	8009178 <__malloc_lock>
 800903e:	6833      	ldr	r3, [r6, #0]
 8009040:	461c      	mov	r4, r3
 8009042:	bb34      	cbnz	r4, 8009092 <_malloc_r+0x82>
 8009044:	4629      	mov	r1, r5
 8009046:	4638      	mov	r0, r7
 8009048:	f7ff ffc2 	bl	8008fd0 <sbrk_aligned>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	4604      	mov	r4, r0
 8009050:	d14d      	bne.n	80090ee <_malloc_r+0xde>
 8009052:	6834      	ldr	r4, [r6, #0]
 8009054:	4626      	mov	r6, r4
 8009056:	2e00      	cmp	r6, #0
 8009058:	d140      	bne.n	80090dc <_malloc_r+0xcc>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	4631      	mov	r1, r6
 800905e:	4638      	mov	r0, r7
 8009060:	eb04 0803 	add.w	r8, r4, r3
 8009064:	f000 f878 	bl	8009158 <_sbrk_r>
 8009068:	4580      	cmp	r8, r0
 800906a:	d13a      	bne.n	80090e2 <_malloc_r+0xd2>
 800906c:	6821      	ldr	r1, [r4, #0]
 800906e:	3503      	adds	r5, #3
 8009070:	1a6d      	subs	r5, r5, r1
 8009072:	f025 0503 	bic.w	r5, r5, #3
 8009076:	3508      	adds	r5, #8
 8009078:	2d0c      	cmp	r5, #12
 800907a:	bf38      	it	cc
 800907c:	250c      	movcc	r5, #12
 800907e:	4629      	mov	r1, r5
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff ffa5 	bl	8008fd0 <sbrk_aligned>
 8009086:	3001      	adds	r0, #1
 8009088:	d02b      	beq.n	80090e2 <_malloc_r+0xd2>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	442b      	add	r3, r5
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	e00e      	b.n	80090b0 <_malloc_r+0xa0>
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	1b52      	subs	r2, r2, r5
 8009096:	d41e      	bmi.n	80090d6 <_malloc_r+0xc6>
 8009098:	2a0b      	cmp	r2, #11
 800909a:	d916      	bls.n	80090ca <_malloc_r+0xba>
 800909c:	1961      	adds	r1, r4, r5
 800909e:	42a3      	cmp	r3, r4
 80090a0:	6025      	str	r5, [r4, #0]
 80090a2:	bf18      	it	ne
 80090a4:	6059      	strne	r1, [r3, #4]
 80090a6:	6863      	ldr	r3, [r4, #4]
 80090a8:	bf08      	it	eq
 80090aa:	6031      	streq	r1, [r6, #0]
 80090ac:	5162      	str	r2, [r4, r5]
 80090ae:	604b      	str	r3, [r1, #4]
 80090b0:	4638      	mov	r0, r7
 80090b2:	f104 060b 	add.w	r6, r4, #11
 80090b6:	f000 f865 	bl	8009184 <__malloc_unlock>
 80090ba:	f026 0607 	bic.w	r6, r6, #7
 80090be:	1d23      	adds	r3, r4, #4
 80090c0:	1af2      	subs	r2, r6, r3
 80090c2:	d0b6      	beq.n	8009032 <_malloc_r+0x22>
 80090c4:	1b9b      	subs	r3, r3, r6
 80090c6:	50a3      	str	r3, [r4, r2]
 80090c8:	e7b3      	b.n	8009032 <_malloc_r+0x22>
 80090ca:	6862      	ldr	r2, [r4, #4]
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	bf0c      	ite	eq
 80090d0:	6032      	streq	r2, [r6, #0]
 80090d2:	605a      	strne	r2, [r3, #4]
 80090d4:	e7ec      	b.n	80090b0 <_malloc_r+0xa0>
 80090d6:	4623      	mov	r3, r4
 80090d8:	6864      	ldr	r4, [r4, #4]
 80090da:	e7b2      	b.n	8009042 <_malloc_r+0x32>
 80090dc:	4634      	mov	r4, r6
 80090de:	6876      	ldr	r6, [r6, #4]
 80090e0:	e7b9      	b.n	8009056 <_malloc_r+0x46>
 80090e2:	230c      	movs	r3, #12
 80090e4:	603b      	str	r3, [r7, #0]
 80090e6:	4638      	mov	r0, r7
 80090e8:	f000 f84c 	bl	8009184 <__malloc_unlock>
 80090ec:	e7a1      	b.n	8009032 <_malloc_r+0x22>
 80090ee:	6025      	str	r5, [r4, #0]
 80090f0:	e7de      	b.n	80090b0 <_malloc_r+0xa0>
 80090f2:	bf00      	nop
 80090f4:	20000414 	.word	0x20000414

080090f8 <_realloc_r>:
 80090f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	4680      	mov	r8, r0
 80090fe:	4614      	mov	r4, r2
 8009100:	460e      	mov	r6, r1
 8009102:	b921      	cbnz	r1, 800910e <_realloc_r+0x16>
 8009104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009108:	4611      	mov	r1, r2
 800910a:	f7ff bf81 	b.w	8009010 <_malloc_r>
 800910e:	b92a      	cbnz	r2, 800911c <_realloc_r+0x24>
 8009110:	f7ff ff12 	bl	8008f38 <_free_r>
 8009114:	4625      	mov	r5, r4
 8009116:	4628      	mov	r0, r5
 8009118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911c:	f000 f838 	bl	8009190 <_malloc_usable_size_r>
 8009120:	4284      	cmp	r4, r0
 8009122:	4607      	mov	r7, r0
 8009124:	d802      	bhi.n	800912c <_realloc_r+0x34>
 8009126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800912a:	d812      	bhi.n	8009152 <_realloc_r+0x5a>
 800912c:	4621      	mov	r1, r4
 800912e:	4640      	mov	r0, r8
 8009130:	f7ff ff6e 	bl	8009010 <_malloc_r>
 8009134:	4605      	mov	r5, r0
 8009136:	2800      	cmp	r0, #0
 8009138:	d0ed      	beq.n	8009116 <_realloc_r+0x1e>
 800913a:	42bc      	cmp	r4, r7
 800913c:	4622      	mov	r2, r4
 800913e:	4631      	mov	r1, r6
 8009140:	bf28      	it	cs
 8009142:	463a      	movcs	r2, r7
 8009144:	f7ff fed0 	bl	8008ee8 <memcpy>
 8009148:	4631      	mov	r1, r6
 800914a:	4640      	mov	r0, r8
 800914c:	f7ff fef4 	bl	8008f38 <_free_r>
 8009150:	e7e1      	b.n	8009116 <_realloc_r+0x1e>
 8009152:	4635      	mov	r5, r6
 8009154:	e7df      	b.n	8009116 <_realloc_r+0x1e>
	...

08009158 <_sbrk_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d06      	ldr	r5, [pc, #24]	; (8009174 <_sbrk_r+0x1c>)
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	4608      	mov	r0, r1
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	f7fa fb82 	bl	800386c <_sbrk>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_sbrk_r+0x1a>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_sbrk_r+0x1a>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	2000041c 	.word	0x2000041c

08009178 <__malloc_lock>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__malloc_lock+0x8>)
 800917a:	f000 b811 	b.w	80091a0 <__retarget_lock_acquire_recursive>
 800917e:	bf00      	nop
 8009180:	20000420 	.word	0x20000420

08009184 <__malloc_unlock>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__malloc_unlock+0x8>)
 8009186:	f000 b80c 	b.w	80091a2 <__retarget_lock_release_recursive>
 800918a:	bf00      	nop
 800918c:	20000420 	.word	0x20000420

08009190 <_malloc_usable_size_r>:
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f18      	subs	r0, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfbc      	itt	lt
 800919a:	580b      	ldrlt	r3, [r1, r0]
 800919c:	18c0      	addlt	r0, r0, r3
 800919e:	4770      	bx	lr

080091a0 <__retarget_lock_acquire_recursive>:
 80091a0:	4770      	bx	lr

080091a2 <__retarget_lock_release_recursive>:
 80091a2:	4770      	bx	lr

080091a4 <_init>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr

080091b0 <_fini>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr
